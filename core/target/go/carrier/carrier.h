#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD__poll_h_
#define ZZ_FORWARD__poll_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_config_net_get
#define ZZ_FORWARD_carrier_config_net_get
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_stream
#define ZZ_FORWARD_carrier_connect_on_stream
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_stream
#define ZZ_FORWARD_carrier_sft_sft_stream
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_identity_change_event_cb
#define ZZ_FORWARD_carrier_subscribe_identity_change_event_cb
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_Subscribe
#define ZZ_FORWARD_carrier_subscribe_Subscribe
struct carrier_subscribe_Subscribe_t;
typedef struct carrier_subscribe_Subscribe_t carrier_subscribe_Subscribe;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_connect_Connect
#define ZZ_FORWARD_carrier_connect_Connect
struct carrier_connect_Connect_t;
typedef struct carrier_connect_Connect_t carrier_connect_Connect;
#endif
#ifndef ZZ_FORWARD_carrier_connect_start
#define ZZ_FORWARD_carrier_connect_start
#endif
#ifndef ZZ_FORWARD_carrier_sync_Sync
#define ZZ_FORWARD_carrier_sync_Sync
struct carrier_sync_Sync_t;
typedef struct carrier_sync_Sync_t carrier_sync_Sync;
#endif
#ifndef ZZ_FORWARD_carrier_sync_start
#define ZZ_FORWARD_carrier_sync_start
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_connect_disconnect_t
#define ZZ_FORWARD_carrier_connect_disconnect_t
#endif
#ifndef ZZ_FORWARD_carrier_connect_connect_t
#define ZZ_FORWARD_carrier_connect_connect_t
#endif
#ifndef ZZ_FORWARD_carrier_connect_Connect
#define ZZ_FORWARD_carrier_connect_Connect
struct carrier_connect_Connect_t;
typedef struct carrier_connect_Connect_t carrier_connect_Connect;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_config_net_join_stream
#define ZZ_FORWARD_carrier_config_net_join_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_Async_100
#define ZZ_FORWARD_io_unix_Async_100
struct io_unix_Async_100_t;
typedef struct io_unix_Async_100_t io_unix_Async_100;
#endif
#ifndef ZZ_FORWARD_io_unix_make
#define ZZ_FORWARD_io_unix_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_start
#define ZZ_FORWARD_carrier_subscribe_start
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_open
#define ZZ_FORWARD_carrier_sft_sft_open
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_hellozz
#define ZZ_FORWARD_carrier_hellozz
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_get
#define ZZ_FORWARD_carrier_config_auth_get
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_add_del_stream
#define ZZ_FORWARD_carrier_config_auth_add_del_stream
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_config_open_then_stream
#define ZZ_FORWARD_carrier_config_open_then_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_io_unix_select_fd
#define ZZ_FORWARD_io_unix_select_fd
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_Async_100
#define ZZ_FORWARD_io_unix_Async_100
struct io_unix_Async_100_t;
typedef struct io_unix_Async_100_t io_unix_Async_100;
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_sync_iwait
#define ZZ_FORWARD_carrier_sync_iwait
#endif
#ifndef ZZ_FORWARD_carrier_sync_wait
#define ZZ_FORWARD_carrier_sync_wait
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_on_close
#define ZZ_FORWARD_carrier_subscribe_on_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_io_unix_reset
#define ZZ_FORWARD_io_unix_reset
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_on_stream
#define ZZ_FORWARD_carrier_subscribe_on_stream
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_sync_open_with_headers
#define ZZ_FORWARD_carrier_sync_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_config_return_err
#define ZZ_FORWARD_carrier_config_return_err
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_sync_open
#define ZZ_FORWARD_carrier_sync_open
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_sysinfo_open
#define ZZ_FORWARD_carrier_pub_sysinfo_sysinfo_open
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_close
#define ZZ_FORWARD_carrier_sft_sft_close
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_del_stream
#define ZZ_FORWARD_carrier_config_auth_del_stream
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_sync_close
#define ZZ_FORWARD_carrier_sync_close
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_sync_connect
#define ZZ_FORWARD_carrier_sync_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_sft_State
#define ZZ_FORWARD_carrier_sft_State
struct carrier_sft_State_t;
typedef struct carrier_sft_State_t carrier_sft_State;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_close
#define ZZ_FORWARD_carrier_connect_on_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_add_stream
#define ZZ_FORWARD_carrier_config_auth_add_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#define ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#endif
#ifndef ZZ_FORWARD_carrier_sync_Sync
#define ZZ_FORWARD_carrier_sync_Sync
struct carrier_sync_Sync_t;
typedef struct carrier_sync_Sync_t carrier_sync_Sync;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT__poll_h_
#define ZZ_EXPORT__poll_h_
#include <poll.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_config_net_get
#define ZZ_EXPORT_carrier_config_net_get
static void carrier_config_net_get (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_stream
#define ZZ_EXPORT_carrier_connect_on_stream
static bool carrier_connect_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_stream
#define ZZ_EXPORT_carrier_sft_sft_stream
extern bool carrier_sft_sft_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_identity_change_event_cb
#define ZZ_EXPORT_carrier_subscribe_identity_change_event_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_subscribe_Subscribe*  const  self, carrier_identity_Identity const *  const  id, carrier_stream_Stream*  const  st, void * _ctx);
} carrier_subscribe_identity_change_event_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb)

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_Subscribe
#define ZZ_EXPORT_carrier_subscribe_Subscribe
struct carrier_subscribe_Subscribe_t {
   carrier_subscribe_identity_change_event_cb on_publish ;
   carrier_subscribe_identity_change_event_cb on_unpublish ;
}
;
size_t sizeof_carrier_subscribe_Subscribe();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_connect_start
#define ZZ_EXPORT_carrier_connect_start
void carrier_connect_start (carrier_connect_Connect*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_endpoint_Endpoint*  const  ep, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_sync_start
#define ZZ_EXPORT_carrier_sync_start
void carrier_sync_start (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_connect_disconnect_t
#define ZZ_EXPORT_carrier_connect_disconnect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_endpoint_Endpoint*  const  ep, void * _ctx);
} carrier_connect_disconnect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_connect_t
#define ZZ_EXPORT_carrier_connect_connect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_channel_Channel*  const  chan, void * _ctx);
} carrier_connect_connect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_Connect
#define ZZ_EXPORT_carrier_connect_Connect
struct carrier_connect_Connect_t {
   carrier_identity_Identity target ;
   carrier_identity_Identity principal ;
   carrier_initiator_Initiator initiator ;
   uint64_t initiator_time ;
   buffer_Buffer_1024 initiator_pkt ;
   carrier_connect_disconnect_t on_disconnect ;
   carrier_connect_connect_t on_connect ;
   buffer_Buffer_1024 remoteError ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_carrier_connect_Connect();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_config_net_join_stream
#define ZZ_EXPORT_carrier_config_net_join_stream
static bool carrier_config_net_join_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_unix_make
#define ZZ_EXPORT_io_unix_make
void io_unix_make (io_unix_Async*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_start
#define ZZ_EXPORT_carrier_subscribe_start
void carrier_subscribe_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_subscribe_Subscribe*  const  ss);

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_open
#define ZZ_EXPORT_carrier_sft_sft_open
static void carrier_sft_sft_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_hellozz
#define ZZ_EXPORT_carrier_hellozz
int carrier_hellozz ();

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_get
#define ZZ_EXPORT_carrier_config_auth_get
static void carrier_config_auth_get (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_add_del_stream
#define ZZ_EXPORT_carrier_config_auth_add_del_stream
static bool carrier_config_auth_add_del_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg, int const  impl);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_config_open_then_stream
#define ZZ_EXPORT_carrier_config_open_then_stream
static void carrier_config_open_then_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_io_unix_select_fd
#define ZZ_EXPORT_io_unix_select_fd
extern bool io_unix_select_fd (io_unix_Async*  const  self, int const  fd, int const  events);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_io_unix_Async
#define ZZ_EXPORT_io_unix_Async
struct io_unix_Async_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[] ;
}
;
size_t sizeof_io_unix_Async(size_t tail);
#endif
#ifndef ZZ_EXPORT_io_unix_Async_100_100
#define ZZ_EXPORT_io_unix_Async_100_100
struct io_unix_Async_100_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[100] ;
}
;
size_t sizeof_io_unix_Async_100();

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sync_iwait
#define ZZ_EXPORT_carrier_sync_iwait
static void carrier_sync_iwait (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sync_wait
#define ZZ_EXPORT_carrier_sync_wait
void carrier_sync_wait (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_on_close
#define ZZ_EXPORT_carrier_subscribe_on_close
static void carrier_subscribe_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_unix_reset
#define ZZ_EXPORT_io_unix_reset
static void io_unix_reset (io_unix_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_on_stream
#define ZZ_EXPORT_carrier_subscribe_on_stream
static bool carrier_subscribe_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sync_open_with_headers
#define ZZ_EXPORT_carrier_sync_open_with_headers
carrier_stream_Stream * carrier_sync_open_with_headers (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  sc, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_config_return_err
#define ZZ_EXPORT_carrier_config_return_err
static bool carrier_config_return_err (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_sync_open
#define ZZ_EXPORT_carrier_sync_open
carrier_stream_Stream * carrier_sync_open (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  sc);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_sysinfo_open
#define ZZ_EXPORT_carrier_pub_sysinfo_sysinfo_open
static void carrier_pub_sysinfo_sysinfo_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_close
#define ZZ_EXPORT_carrier_sft_sft_close
static void carrier_sft_sft_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_del_stream
#define ZZ_EXPORT_carrier_config_auth_del_stream
static bool carrier_config_auth_del_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sync_close
#define ZZ_EXPORT_carrier_sync_close
void carrier_sync_close (carrier_sync_Sync*  const  self, int const  exit_code);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_sync_connect
#define ZZ_EXPORT_carrier_sync_connect
void carrier_sync_connect (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_sft_State
#define ZZ_EXPORT_carrier_sft_State
struct carrier_sft_State_t {
   FILE*  f ;
   carrier_sha256_Sha256 sha ;
   uint8_t expecthash[    32] ;
}
;
size_t sizeof_carrier_sft_State();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_close
#define ZZ_EXPORT_carrier_connect_on_close
static void carrier_connect_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_add_stream
#define ZZ_EXPORT_carrier_config_auth_add_stream
static bool carrier_config_auth_add_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
#define ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
static void carrier_pub_sysinfo_sensors_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_sync_Sync
#define ZZ_EXPORT_carrier_sync_Sync
struct carrier_sync_Sync_t {
   io_unix_Async_100 async ;
   carrier_endpoint_Endpoint*  ep ;
   carrier_connect_Connect con ;
   carrier_channel_Channel*  chan ;
   bool waiting ;
   bool error ;
}
;
size_t sizeof_carrier_sync_Sync();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_300
#define ZZ_FORWARD_err_Err_300
struct err_Err_300_t;
typedef struct err_Err_300_t err_Err_300;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_protonerf_write_varint
#define ZZ_FORWARD_protonerf_write_varint
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le64
#define ZZ_FORWARD_byteorder_to_le64
#endif
#ifndef ZZ_FORWARD_protonerf_encode_f64
#define ZZ_FORWARD_protonerf_encode_f64
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_300
#define ZZ_FORWARD_err_Err_300
struct err_Err_300_t;
typedef struct err_Err_300_t err_Err_300;
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Uname
#define ZZ_FORWARD_sysinfo_proto_Uname
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Mem
#define ZZ_FORWARD_sysinfo_proto_Mem
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Load
#define ZZ_FORWARD_sysinfo_proto_Load
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Firmware
#define ZZ_FORWARD_sysinfo_proto_Firmware
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensor
#define ZZ_FORWARD_sysinfo_proto_Sensor
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensors
#define ZZ_FORWARD_sysinfo_proto_Sensors
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensor__ValueType
#define ZZ_FORWARD_sysinfo_proto_Sensor__ValueType
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Bootloader
#define ZZ_FORWARD_sysinfo_proto_Bootloader
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_err_SystemError
#define ZZ_FORWARD_err_SystemError
#endif
#ifndef ZZ_FORWARD__errno_h_
#define ZZ_FORWARD__errno_h_
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_sysinfo_src_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_sysinfo_src_os_h_
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sysinfo
#define ZZ_FORWARD_sysinfo_proto_Sysinfo
#endif
#ifndef ZZ_FORWARD_sysinfo_firmware
#define ZZ_FORWARD_sysinfo_firmware
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_sysinfo_uname
#define ZZ_FORWARD_sysinfo_uname
#endif
#ifndef ZZ_FORWARD_sysinfo_mem
#define ZZ_FORWARD_sysinfo_mem
#endif
#ifndef ZZ_FORWARD_sysinfo_load
#define ZZ_FORWARD_sysinfo_load
#endif
#ifndef ZZ_FORWARD_sysinfo_bootloader
#define ZZ_FORWARD_sysinfo_bootloader
#endif
#ifndef ZZ_FORWARD_sysinfo_sysinfo
#define ZZ_FORWARD_sysinfo_sysinfo
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_sysinfo_bootloader
#define ZZ_FORWARD_sysinfo_bootloader
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_sysinfo_sensors
#define ZZ_FORWARD_sysinfo_sensors
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_sysinfo_mem
#define ZZ_FORWARD_sysinfo_mem
#endif
#ifndef ZZ_FORWARD_sysinfo_uname
#define ZZ_FORWARD_sysinfo_uname
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_sysinfo_load
#define ZZ_FORWARD_sysinfo_load
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_protonerf_write_varint
#define ZZ_EXPORT_protonerf_write_varint
static void protonerf_write_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint32_t low, uint32_t high);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le64
#define ZZ_EXPORT_byteorder_to_le64
uint64_t  static inline byteorder_to_le64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_f64
#define ZZ_EXPORT_protonerf_encode_f64
void protonerf_encode_f64 (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, double value);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1000_1000
#define ZZ_EXPORT_buffer_Buffer_1000_1000
struct buffer_Buffer_1000_t {
   uintptr_t at ;
   char mem[1000] ;
}
;
size_t sizeof_buffer_Buffer_1000();

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_300_300
#define ZZ_EXPORT_err_Err_300_300
struct err_Err_300_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [300];
}
;
size_t sizeof_err_Err_300();

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Uname
#define ZZ_EXPORT_sysinfo_proto_Uname
typedef enum {
    sysinfo_proto_Uname_Sysname = 1,
    sysinfo_proto_Uname_Nodename = 2,
    sysinfo_proto_Uname_Release = 3,
    sysinfo_proto_Uname_Version = 4,
    sysinfo_proto_Uname_Machine = 5,

} sysinfo_proto_Uname;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Mem
#define ZZ_EXPORT_sysinfo_proto_Mem
typedef enum {
    sysinfo_proto_Mem_Total = 1,
    sysinfo_proto_Mem_Free = 2,
    sysinfo_proto_Mem_Available = 3,

} sysinfo_proto_Mem;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Load
#define ZZ_EXPORT_sysinfo_proto_Load
typedef enum {
    sysinfo_proto_Load_Avg1 = 1,
    sysinfo_proto_Load_Avg5 = 2,
    sysinfo_proto_Load_Avg15 = 3,
    sysinfo_proto_Load_Clock = 4,
    sysinfo_proto_Load_Uptime = 5,
    sysinfo_proto_Load_Idletime = 6,
    sysinfo_proto_Load_ProcActive = 7,
    sysinfo_proto_Load_ProcTotal = 8,
    sysinfo_proto_Load_Cores = 9,
    sysinfo_proto_Load_Threads = 10,

} sysinfo_proto_Load;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Firmware
#define ZZ_EXPORT_sysinfo_proto_Firmware
typedef enum {
    sysinfo_proto_Firmware_Board = 1,
    sysinfo_proto_Firmware_Distro = 2,
    sysinfo_proto_Firmware_Release = 3,
    sysinfo_proto_Firmware_Revision = 4,
    sysinfo_proto_Firmware_Builder = 5,
    sysinfo_proto_Firmware_Finger = 6,
    sysinfo_proto_Firmware_AndroidApiLevel = 7,

} sysinfo_proto_Firmware;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensor
#define ZZ_EXPORT_sysinfo_proto_Sensor
typedef enum {
    sysinfo_proto_Sensor_Name = 1,
    sysinfo_proto_Sensor_Vtype = 2,
    sysinfo_proto_Sensor_Value = 3,

} sysinfo_proto_Sensor;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensors
#define ZZ_EXPORT_sysinfo_proto_Sensors
typedef enum {
    sysinfo_proto_Sensors_Sensors = 1,

} sysinfo_proto_Sensors;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensor__ValueType
#define ZZ_EXPORT_sysinfo_proto_Sensor__ValueType
typedef enum {
    sysinfo_proto_Sensor__ValueType_None = 0,
    sysinfo_proto_Sensor__ValueType_MilliCelsius = 1,

} sysinfo_proto_Sensor__ValueType;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Bootloader
#define ZZ_EXPORT_sysinfo_proto_Bootloader
typedef enum {
    sysinfo_proto_Bootloader_ActiveSide = 1,
    sysinfo_proto_Bootloader_BootReason = 2,

} sysinfo_proto_Bootloader;

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_err_SystemError
#define ZZ_EXPORT_err_SystemError
extern const __attribute__ ((unused)) size_t err_SystemError;

#endif
#ifndef ZZ_EXPORT__errno_h_
#define ZZ_EXPORT__errno_h_
#include <errno.h>

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_sysinfo_src_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_sysinfo_src_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/modules/sysinfo/src/os.h"
#ifdef __linux__
#include <sys/utsname.h>
static bool os_sysinfo_uname(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    struct utsname name;
    if (uname(&name) != 0) {
        err_fail_with_errno(e, et, __FILE__, __FUNCTION__, __LINE__, "uname");
        return true;
    }

    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Sysname,  (uint8_t*)name.sysname,     strlen(name.sysname));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Nodename, (uint8_t*)name.nodename,    strlen(name.nodename));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Release,  (uint8_t*)name.release,     strlen(name.release));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Version,  (uint8_t*)name.version,     strlen(name.version));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Machine,  (uint8_t*)name.machine,     strlen(name.machine));
    return true;
}

#include <sys/sysinfo.h>
static bool os_sysinfo_mem(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    struct sysinfo info;
    if (sysinfo(&info) != 0) {
        err_fail_with_errno(e, et, __FILE__, __FUNCTION__, __LINE__, "uname");
        return true;
    }

    protonerf_encode_varint(sl, e, et, sysinfo_proto_Mem_Total,  info.totalram);
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Mem_Free,   info.freeram);
    return true;
}


#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
uint64_t time_to_millis(time_Time const*self);
time_Time time_real();
time_Time time_tick();

static bool os_sysinfo_load(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    FILE *fi = fopen("/proc/loadavg", "r");
    if (fi == 0) {
        err_fail_with_errno(e, et, __FILE__, __FUNCTION__, __LINE__, "open /proc/loadavg");
        return true;
    }

    char b[300] = {0};
    fread(b, 300, 1, fi);

    char *saveptr = 0;

    char * s_avg1  = strtok_r(b, " ", &saveptr);
    if (s_avg1 !=0) {
        protonerf_encode_f64(sl, e, et, sysinfo_proto_Load_Avg1,  atof(s_avg1));
    }

    char * s_avg5  = strtok_r(0, " ", &saveptr);
    if (s_avg5 !=0) {
        protonerf_encode_f64(sl, e, et, sysinfo_proto_Load_Avg5,  atof(s_avg5));
    }

    char * s_avg15 = strtok_r(0, " ", &saveptr);
    if (s_avg15 !=0) {
        protonerf_encode_f64(sl, e, et, sysinfo_proto_Load_Avg15,  atof(s_avg15));
    }

    char *saveptr2 = saveptr;
    char * s_proc  = strtok_r(0, " ", &saveptr);
    if (s_proc !=0) {
        protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_ProcActive,  atoi(s_proc));
    }
    s_proc  = strtok_r(0, "/", &saveptr2);
    s_proc  = strtok_r(0, "/", &saveptr2);
    if (s_proc !=0) {
        protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_ProcTotal,  atoi(s_proc));
    }


    time_Time t1 = time_real();
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Clock,  time_to_millis(&t1));

    time_Time t2 = time_tick();
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Uptime,  time_to_millis(&t2));

#ifndef __ANDROID__
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Cores,  get_nprocs());
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Threads,  get_nprocs());
#endif

    fclose(fi);

    return true;
}

static bool lsb_os_sysinfo_firmware(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    FILE *fi = fopen("/etc/lsb-release", "r");
    if (fi == 0) {
        fi = fopen("/etc/openwrt_release", "r");
        if (fi == 0) {
            return false;
        }
    }

    for (;;) {
        char buf[500] = {0};
        if (fgets(buf, 500, fi) == 0) {
            break;
        }
        char * saveptr = 0;
        char *ta = strtok_r(buf, "=", &saveptr);
        if (ta == 0) {
            continue;
        }
        if (strcmp(ta, "DISTRIB_ID") == 0) {
            char *tb = strtok_r(0, "=", &saveptr);
            int ll = strlen(tb);
            if (ll > 0) {
                ll -= 1;
            }
            if (ll > 0 && ( tb[0] == '"' || tb[0] == '\'')) {
                tb += 1;
                ll -= 1;
            }
            if (ll > 0 && ( tb[ll - 1] == '"' || tb[ll - 1] == '\'')) {
                ll -= 1;
            }
            protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Distro,  (uint8_t*)tb, ll);
        } else if (strcmp(ta, "DISTRIB_RELEASE") == 0) {
            char *tb = strtok_r(0, "=", &saveptr);
            int ll = strlen(tb);
            if (ll > 0) {
                ll -= 1;
            }
            if (ll > 0 && ( tb[0] == '"' || tb[0] == '\'')) {
                tb += 1;
                ll -= 1;
            }
            if (ll > 0 && ( tb[ll - 1] == '"' || tb[ll - 1] == '\'')) {
                ll -= 1;
            }
            protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Release,  (uint8_t*)tb, ll);
        } else if (strcmp(ta, "DISTRIB_REVISION") == 0) {
            char * tb = strtok_r(0, "=", &saveptr);
            int ll = strlen(tb);
            if (ll > 0) {
                ll -= 1;
            }
            if (ll > 0 && ( tb[0] == '"' || tb[0] == '\'')) {
                tb += 1;
                ll -= 1;
            }
            if (ll > 0 && ( tb[ll - 1] == '"' || tb[ll - 1] == '\'')) {
                ll -= 1;
            }
            protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Revision,  (uint8_t*)tb, ll);
        } else if (strcmp(ta, "DISTRIB_TARGET") == 0) {
            char * tb = strtok_r(0, "=", &saveptr);
            int ll = strlen(tb);
            if (ll > 0) {
                ll -= 1;
            }
            if (ll > 0 && ( tb[0] == '"' || tb[0] == '\'')) {
                tb += 1;
                ll -= 1;
            }
            if (ll > 0 && ( tb[ll - 1] == '"' || tb[ll - 1] == '\'')) {
                ll -= 1;
            }
            protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Board,  (uint8_t*)tb, ll);
        }
    }
    fclose(fi);
    return true;
}

#ifdef __ANDROID__
#include <sys/system_properties.h>
static bool android_os_sysinfo_firmware(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Distro,  "Android", 7);

    char pbb[PROP_VALUE_MAX+1] = {0};
    int ll;

    ll = __system_property_get("ro.product.model", pbb);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Board,  (uint8_t*)pbb, ll);

    ll = __system_property_get("ro.build.version.release", pbb);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Release,  (uint8_t*)pbb, ll);

    ll = __system_property_get("ro.build.version.security_patch", pbb);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Revision,  (uint8_t*)pbb, ll);

    ll = __system_property_get("ro.build.id", pbb);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Builder,  (uint8_t*)pbb, ll);

    ll = __system_property_get("ro.build.fingerprint", pbb);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Finger,  (uint8_t*)pbb, ll);

    ll = __system_property_get("ro.build.version.sdk", pbb);
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Firmware_AndroidApiLevel,  atoi(pbb));

    return true;
}
#endif


static bool os_sysinfo_firmware(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
#ifdef __ANDROID__
    return android_os_sysinfo_firmware(e, et, sl);
#else
    return lsb_os_sysinfo_firmware(e,et,sl);
#endif
}

#include <dirent.h>
static bool hwmon_os_sysinfo_sensors(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    DIR *d = opendir("/sys/class/hwmon/");
    if (d == 0) {
        return false;
    }
    for (;;) {
        struct dirent *dirent = readdir(d);
        if (dirent == 0) {
            break;
        }

        char name[100] = {0};

        char fp[500] = {0};
        snprintf(fp, 499, "/sys/class/hwmon/%s/name", dirent->d_name);
        FILE *fi = fopen(fp, "r");
        if (fi == 0) {
            continue;
        }
        fread(name, 100, 1, fi);
        fclose(fi);
        int ll = strlen(name);
        if (ll > 0) {
            name[ll - 1] = 0;
        }


        for (int i = 0; i < 20; i++) {
            char label[100] = {0};

            char fp[500] = {0};
            snprintf(fp, 499, "/sys/class/hwmon/%s/temp%d_label", dirent->d_name, i);
            FILE *fi = fopen(fp, "r");
            if (fi == 0) {
                continue;
            }
            fread(label, 100, 1, fi);
            fclose(fi);
            int ll = strlen(label);
            if (ll > 0) {
                label[ll - 1] = 0;
            }

            char value[100] = {0};
            snprintf(fp, 499, "/sys/class/hwmon/%s/temp%d_input", dirent->d_name, i);
            fi = fopen(fp, "r");
            if (fi == 0) {
                continue;
            }
            fread(value, 100, 1, fi);
            fclose(fi);

            char name_f[100] = {0};
            snprintf(name_f, 100, "%s/%s", name, label);

            int ivalue = atoi(value);

            uint8_t bb[200] = {0};
            size_t at = 0;
            slice_mut_slice_MutSlice bbs = {
                .mem    = bb,
                .size   = 200,
                .at     = &at,
            };
            protonerf_encode_bytes(bbs, e, et, sysinfo_proto_Sensor_Name,  (uint8_t*)name_f, strlen(name_f));
            protonerf_encode_varint(bbs, e, et, sysinfo_proto_Sensor_Vtype,  sysinfo_proto_Sensor__ValueType_MilliCelsius);
            protonerf_encode_varint(bbs, e, et, sysinfo_proto_Sensor_Value, ivalue);
            protonerf_encode_bytes(sl, e, et, sysinfo_proto_Sensors_Sensors, bb, at);
        }


    }
    closedir(d);
    return true;
}

#include <dirent.h>
static void thermal_zone_os_sysinfo_sensors(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    DIR *d = opendir("/sys/devices/virtual/thermal/");
    if (d == 0) {
        return;
    }
    for (;;) {
        struct dirent *dirent = readdir(d);
        if (dirent == 0) {
            break;
        }

        char value[100] = {0};
        char fp[500] = {0};
        snprintf(fp, 499, "/sys/devices/virtual/thermal/%s/temp", dirent->d_name);
        FILE *fi = fopen(fp, "r");
        if (fi == 0) {
            continue;
        }
        fread(value, 100, 1, fi);
        fclose(fi);


        char name[100] = {0};
        snprintf(fp, 499, "/sys/devices/virtual/thermal/%s/type", dirent->d_name);
        fi = fopen(fp, "r");
        if (fi == 0) {
            continue;
        }
        fread(name, 100, 1, fi);
        fclose(fi);
        int ll = strlen(name);
        if (ll > 0) {
            name[ll - 1] = 0;
        }

        int ivalue = atoi(value);

        uint8_t bb[200] = {0};
        size_t at = 0;
        slice_mut_slice_MutSlice bbs = {
            .mem    = bb,
            .size   = 200,
            .at     = &at,
        };
        protonerf_encode_bytes(bbs, e, et, sysinfo_proto_Sensor_Name,  (uint8_t*)name, strlen(name));
        protonerf_encode_varint(bbs, e, et, sysinfo_proto_Sensor_Vtype,  sysinfo_proto_Sensor__ValueType_MilliCelsius);
        protonerf_encode_varint(bbs, e, et, sysinfo_proto_Sensor_Value, ivalue);
        protonerf_encode_bytes(sl, e, et, sysinfo_proto_Sensors_Sensors, bb, at);
    }
    closedir(d);

}

static bool os_sysinfo_sensors(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    hwmon_os_sysinfo_sensors(e, et, sl);
    thermal_zone_os_sysinfo_sensors(e, et, sl);
    return true;
}

static bool os_sysinfo_bootloader(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    return false;
}

#elif defined(ESP_PLATFORM)
#include <esp_efuse.h>
#include <esp_system.h>
size_t spi_flash_get_chip_size(void);
static bool os_sysinfo_uname(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{

    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Sysname,  (uint8_t*)CONFIG_IDF_TARGET, strlen(CONFIG_IDF_TARGET));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Release,  (uint8_t*)IDF_VER, strlen(IDF_VER));

    uint8_t mac[6] = {0};
    esp_efuse_mac_get_default(mac);

    char sbuf[60] = {0};
    snprintf(sbuf, 60, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Nodename, (uint8_t*)sbuf, strlen(sbuf));

    esp_chip_info_t info;
    esp_chip_info(&info);

    char * modelstr = "unknown";
    if (info.model == CHIP_ESP32) {
        modelstr = "esp32";
    } else if (info.model == CHIP_ESP32S2) {
        modelstr = "esp32s2";
    }

    snprintf(sbuf, 60, "%dx%s%s%s%s%s%d%s/%d.%d",
        info.cores,
        modelstr,
        info.features & CHIP_FEATURE_WIFI_BGN ? "/802.11bgn" : "",
        info.features & CHIP_FEATURE_BLE ? "/BLE" : "",
        info.features & CHIP_FEATURE_BT ? "/BT" : "",
        info.features & CHIP_FEATURE_EMB_FLASH ? "/Embedded-Flash:" : "/External-Flash:",
        spi_flash_get_chip_size() / (1024 * 1024), "MB",
        esp_efuse_get_chip_ver(),
        esp_efuse_get_pkg_ver()
    );
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Machine,  (uint8_t*)sbuf, strlen(sbuf));


    //protonerf_encode_bytes(sl, e, et, sysinfo_proto_Uname_Version,  (uint8_t*)name.version, strlen(name.version));
    return true;
}


#include <esp_heap_caps.h>
static bool os_sysinfo_mem(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    multi_heap_info_t info = {0};
    heap_caps_get_info(&info, 0);

    protonerf_encode_varint(sl, e, et, sysinfo_proto_Mem_Total,         heap_caps_get_total_size(0));
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Mem_Available,     info.total_allocated_bytes + info.total_free_bytes);
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Mem_Free,          info.total_free_bytes);

    return true;
}

#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <esp_app_format.h>
#include <esp_ota_ops.h>

static bool os_sysinfo_load(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{

    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Uptime,  esp_timer_get_time());
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_ProcTotal,  uxTaskGetNumberOfTasks());

    esp_chip_info_t info;
    esp_chip_info(&info);
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Cores,    info.cores);
    protonerf_encode_varint(sl, e, et, sysinfo_proto_Load_Threads,  info.cores);
    return true;
}
static bool os_sysinfo_firmware(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    const esp_app_desc_t *appdesc = esp_ota_get_app_description();
    if (appdesc == 0) { return false; }

    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Distro,  (uint8_t*)appdesc->project_name, strlen(appdesc->project_name));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Builder,  (uint8_t*)appdesc->date,   strlen(appdesc->date));
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Release,  (uint8_t*)appdesc->version, strlen(appdesc->version));

    char revision[100] = {0};
    itoa(appdesc->secure_version, revision, 10);
    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Revision,  (uint8_t*)revision,   strlen(revision));

    char buf[80] = {0};
    snprintf(buf, 80, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", 
            appdesc->app_elf_sha256[0],
            appdesc->app_elf_sha256[1],
            appdesc->app_elf_sha256[2],
            appdesc->app_elf_sha256[3],
            appdesc->app_elf_sha256[4],
            appdesc->app_elf_sha256[5],
            appdesc->app_elf_sha256[6],
            appdesc->app_elf_sha256[7],
            appdesc->app_elf_sha256[8],
            appdesc->app_elf_sha256[9],

            appdesc->app_elf_sha256[10],
            appdesc->app_elf_sha256[11],
            appdesc->app_elf_sha256[12],
            appdesc->app_elf_sha256[13],
            appdesc->app_elf_sha256[14],
            appdesc->app_elf_sha256[15],
            appdesc->app_elf_sha256[16],
            appdesc->app_elf_sha256[17],
            appdesc->app_elf_sha256[18],
            appdesc->app_elf_sha256[19],

            appdesc->app_elf_sha256[20],
            appdesc->app_elf_sha256[21],
            appdesc->app_elf_sha256[22],
            appdesc->app_elf_sha256[23],
            appdesc->app_elf_sha256[24],
            appdesc->app_elf_sha256[25],
            appdesc->app_elf_sha256[26],
            appdesc->app_elf_sha256[27],
            appdesc->app_elf_sha256[28],
            appdesc->app_elf_sha256[29],

            appdesc->app_elf_sha256[30],
            appdesc->app_elf_sha256[31]
    );

    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Firmware_Finger,  (uint8_t*)buf,   strlen(buf));

    return true;
}

static bool os_sysinfo_sensors(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    return false;
}
#include "../../bootloader_support/include/esp_app_format.h"
#include "../../app_update/include/esp_ota_ops.h"
static bool os_sysinfo_bootloader(err_Err *e, size_t et, slice_mut_slice_MutSlice sl)
{
    char * reason = "unknown";
    switch (esp_reset_reason()) {
        case ESP_RST_POWERON:   reason = "poweron";      break;
        case ESP_RST_EXT:       reason = "reset-ext";    break;
        case ESP_RST_SW:        reason = "reset";        break;
        case ESP_RST_PANIC:     reason = "panic";        break;
        case ESP_RST_INT_WDT:   reason = "interrupt-watchdog";     break;
        case ESP_RST_TASK_WDT:  reason = "watchdog";     break;
        case ESP_RST_DEEPSLEEP: reason = "deepsleep";    break;
        case ESP_RST_BROWNOUT:  reason = "brownout";     break;
        case ESP_RST_SDIO:      reason = "sdio";         break;
        default: reason = "unknown";
    };

    protonerf_encode_bytes(sl, e, et, sysinfo_proto_Bootloader_BootReason,  (uint8_t*)reason, strlen(reason));


    esp_partition_t * part = esp_ota_get_running_partition();

    if (part != 0) {
        protonerf_encode_bytes(sl, e, et, sysinfo_proto_Bootloader_ActiveSide,  (uint8_t*)part->label, strlen(part->label));
    }

    return true;
}

#else
bool __attribute__((weak)) os_sysinfo_uname(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
bool __attribute__((weak)) os_sysinfo_mem(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
bool __attribute__((weak)) os_sysinfo_load(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
bool __attribute__((weak)) os_sysinfo_firmware(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
bool __attribute__((weak)) os_sysinfo_sensors(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
bool __attribute__((weak)) os_sysinfo_bootloader(err_Err *e, size_t et, slice_mut_slice_MutSlice sl){ return false; }
#endif

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sysinfo
#define ZZ_EXPORT_sysinfo_proto_Sysinfo
typedef enum {
    sysinfo_proto_Sysinfo_Uname = 1,
    sysinfo_proto_Sysinfo_Mem = 2,
    sysinfo_proto_Sysinfo_Load = 3,
    sysinfo_proto_Sysinfo_Firmware = 4,
    sysinfo_proto_Sysinfo_Fs = 5,
    sysinfo_proto_Sysinfo_Net = 6,
    sysinfo_proto_Sysinfo_Switch = 7,
    sysinfo_proto_Sysinfo_BoardId = 8,
    sysinfo_proto_Sysinfo_CarrierBuildId = 9,
    sysinfo_proto_Sysinfo_Belltower = 10,
    sysinfo_proto_Sysinfo_Bootloader = 11,

} sysinfo_proto_Sysinfo;

#endif
#ifndef ZZ_EXPORT_sysinfo_firmware
#define ZZ_EXPORT_sysinfo_firmware
static void sysinfo_firmware (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_uname
#define ZZ_EXPORT_sysinfo_uname
static void sysinfo_uname (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_sysinfo_mem
#define ZZ_EXPORT_sysinfo_mem
static void sysinfo_mem (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_sysinfo_load
#define ZZ_EXPORT_sysinfo_load
static void sysinfo_load (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_sysinfo_bootloader
#define ZZ_EXPORT_sysinfo_bootloader
static void sysinfo_bootloader (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_sysinfo_sysinfo
#define ZZ_EXPORT_sysinfo_sysinfo
void sysinfo_sysinfo (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_sysinfo_bootloader
#define ZZ_EXPORT_sysinfo_bootloader
static void sysinfo_bootloader (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_sensors
#define ZZ_EXPORT_sysinfo_sensors
void sysinfo_sensors (err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_mem
#define ZZ_EXPORT_sysinfo_mem
static void sysinfo_mem (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_sysinfo_uname
#define ZZ_EXPORT_sysinfo_uname
static void sysinfo_uname (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_sysinfo_load
#define ZZ_EXPORT_sysinfo_load
static void sysinfo_load (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_hex_dump
#define ZZ_FORWARD_hex_dump
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_hex_map
#define ZZ_FORWARD_hex_map
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_hex_str2bin
#define ZZ_FORWARD_hex_str2bin
#endif
#ifndef ZZ_FORWARD_hex_fdump
#define ZZ_FORWARD_hex_fdump
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_hex_dump_slice
#define ZZ_FORWARD_hex_dump_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_hex_print
#define ZZ_FORWARD_hex_print
#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_hex_dump
#define ZZ_EXPORT_hex_dump
void hex_dump (uint8_t const *  const  data, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_hex_str2bin
#define ZZ_EXPORT_hex_str2bin
uintptr_t hex_str2bin (char const *  const  in, uintptr_t const  inlen, uint8_t*  out, uintptr_t const  outlen);

#endif
#ifndef ZZ_EXPORT_hex_fdump
#define ZZ_EXPORT_hex_fdump
void hex_fdump (FILE*  const  f, uint8_t const *  const  data, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_hex_dump_slice
#define ZZ_EXPORT_hex_dump_slice
void hex_dump_slice (slice_slice_Slice const  s);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_hex_print
#define ZZ_EXPORT_hex_print
void hex_print (uint8_t const *  const  data, uintptr_t const  l);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_sha256_hkdf
#define ZZ_FORWARD_carrier_sha256_hkdf
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_hkdf
#define ZZ_EXPORT_carrier_sha256_hkdf
extern void carrier_sha256_hkdf (uint8_t const *  const  chaining_key, uint8_t const *  const  input_key_material, uintptr_t const  input_key_material_len, uint8_t*  const  out1, uint8_t*  const  out2, uint8_t*  const  out3);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD__stdint_h_
#define ZZ_FORWARD__stdint_h_
#endif
#ifndef ZZ_FORWARD_pool_ALIGN
#define ZZ_FORWARD_pool_ALIGN
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_pool_src_asan_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_pool_src_asan_h_
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_err_panic
#define ZZ_FORWARD_err_panic
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_pool_bitarray_test
#define ZZ_FORWARD_pool_bitarray_test
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_hex_fdump
#define ZZ_FORWARD_hex_fdump
#endif
#ifndef ZZ_FORWARD_pool_bitarray_clear
#define ZZ_FORWARD_pool_bitarray_clear
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_pool_bitarray_set
#define ZZ_FORWARD_pool_bitarray_set
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_pool_bitarray_test
#define ZZ_FORWARD_pool_bitarray_test
#endif
#ifndef ZZ_FORWARD_pool_bitarray_clear
#define ZZ_FORWARD_pool_bitarray_clear
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT__stdint_h_
#define ZZ_EXPORT__stdint_h_
#include <stdint.h>

#endif
#ifndef ZZ_EXPORT_pool_ALIGN
#define ZZ_EXPORT_pool_ALIGN
#define pool_ALIGN ((uintptr_t )    (uintptr_t)(    sizeof(    uintptr_t    )))

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_pool_src_asan_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_pool_src_asan_h_

#line 1 "/home/aep/proj/zz/modules/pool/src/asan.h"
// Marks memory region [addr, addr+size) as unaddressable.
// This memory must be previously allocated by the user program. Accessing
// addresses in this region from instrumented code is forbidden until
// this region is unpoisoned. This function is not guaranteed to poison
// the whole region - it may poison only subregion of [addr, addr+size) due
// to ASan alignment restrictions.
// Method is NOT thread-safe in the sense that no two threads can
// (un)poison memory in the same memory region simultaneously.
void __asan_poison_memory_region(void const volatile *addr, size_t size);
// Marks memory region [addr, addr+size) as addressable.
// This memory must be previously allocated by the user program. Accessing
// addresses in this region is allowed until this region is poisoned again.
// This function may unpoison a superregion of [addr, addr+size) due to
// ASan alignment restrictions.
// Method is NOT thread-safe in the sense that no two threads can
// (un)poison memory in the same memory region simultaneously.
void __asan_unpoison_memory_region(void const volatile *addr, size_t size);

// User code should use macros instead of functions.
#if defined(__SANITIZE_ADDRESS__)
#define ASAN_POISON_MEMORY_REGION(addr, size) \
    __asan_poison_memory_region((addr), (size))
#define ASAN_UNPOISON_MEMORY_REGION(addr, size) \
    __asan_unpoison_memory_region((addr), (size))
#else
#define ASAN_POISON_MEMORY_REGION(addr, size) \
    ((void)(addr), (void)(size))
#define ASAN_UNPOISON_MEMORY_REGION(addr, size) \
    ((void)(addr), (void)(size))
#endif

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_panic
#define ZZ_EXPORT_err_panic
void err_panic (char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_pool_bitarray_test
#define ZZ_EXPORT_pool_bitarray_test
static bool pool_bitarray_test (uint8_t*  const  a, uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hex_fdump
#define ZZ_EXPORT_hex_fdump
void hex_fdump (FILE*  const  f, uint8_t const *  const  data, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_pool_bitarray_clear
#define ZZ_EXPORT_pool_bitarray_clear
static void pool_bitarray_clear (uint8_t*  const  a, uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_pool_bitarray_set
#define ZZ_EXPORT_pool_bitarray_set
static void pool_bitarray_set (uint8_t*  const  a, uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_pool_bitarray_test
#define ZZ_EXPORT_pool_bitarray_test
static bool pool_bitarray_test (uint8_t*  const  a, uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_pool_bitarray_clear
#define ZZ_EXPORT_pool_bitarray_clear
static void pool_bitarray_clear (uint8_t*  const  a, uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_sysinfo_sysinfo
#define ZZ_FORWARD_sysinfo_sysinfo
#endif
#ifndef ZZ_FORWARD_carrier_revision_build_id
#define ZZ_FORWARD_carrier_revision_build_id
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Sysinfo
#define ZZ_FORWARD_carrier_proto_Sysinfo
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_sysinfo_open
#define ZZ_FORWARD_carrier_pub_sysinfo_sysinfo_open
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_sysinfo_sensors
#define ZZ_FORWARD_sysinfo_sensors
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_ConfigSysinfo
#define ZZ_FORWARD_carrier_pub_sysinfo_ConfigSysinfo
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#define ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_ConfigSensors
#define ZZ_FORWARD_carrier_pub_sysinfo_ConfigSensors
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_register
#define ZZ_FORWARD_carrier_pub_sysinfo_register
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#define ZZ_FORWARD_carrier_pub_sysinfo_sensors_open
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_sysinfo_sysinfo
#define ZZ_EXPORT_sysinfo_sysinfo
void sysinfo_sysinfo (slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_carrier_revision_build_id
#define ZZ_EXPORT_carrier_revision_build_id
char  const * carrier_revision_build_id ();

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Sysinfo
#define ZZ_EXPORT_carrier_proto_Sysinfo
typedef enum {
    carrier_proto_Sysinfo_Uname = 1,
    carrier_proto_Sysinfo_Mem = 2,
    carrier_proto_Sysinfo_Load = 3,
    carrier_proto_Sysinfo_Firmware = 4,
    carrier_proto_Sysinfo_Fs = 5,
    carrier_proto_Sysinfo_Net = 6,
    carrier_proto_Sysinfo_Switch = 7,
    carrier_proto_Sysinfo_BoardId = 8,
    carrier_proto_Sysinfo_CarrierBuildId = 9,
    carrier_proto_Sysinfo_Belltower = 10,
    carrier_proto_Sysinfo_Bootloader = 11,

} carrier_proto_Sysinfo;

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_sysinfo_open
#define ZZ_EXPORT_carrier_pub_sysinfo_sysinfo_open
static void carrier_pub_sysinfo_sysinfo_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_sysinfo_sensors
#define ZZ_EXPORT_sysinfo_sensors
void sysinfo_sensors (err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice sl);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
#define ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
static void carrier_pub_sysinfo_sensors_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_register
#define ZZ_EXPORT_carrier_pub_sysinfo_register
void carrier_pub_sysinfo_register (carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
#define ZZ_EXPORT_carrier_pub_sysinfo_sensors_open
static void carrier_pub_sysinfo_sensors_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_secret
#define ZZ_FORWARD_carrier_identity_identity_from_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_log_info
#define ZZ_FORWARD_log_info
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_400
#define ZZ_FORWARD_buffer_Buffer_400
struct buffer_Buffer_400_t;
typedef struct buffer_Buffer_400_t buffer_Buffer_400;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_findmtdindex
#define ZZ_FORWARD_carrier_vault_toml_findmtdindex
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Parser_1000
#define ZZ_FORWARD_toml_Parser_1000
struct toml_Parser_1000_t;
typedef struct toml_Parser_1000_t toml_Parser_1000;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_400
#define ZZ_FORWARD_buffer_Buffer_400
struct buffer_Buffer_400_t;
typedef struct buffer_Buffer_400_t buffer_Buffer_400;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_os_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_to_str
#define ZZ_FORWARD_carrier_identity_secret_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_isnull
#define ZZ_FORWARD_carrier_identity_isnull
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_to_str
#define ZZ_FORWARD_carrier_identity_address_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str
#define ZZ_FORWARD_carrier_identity_identity_to_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_identity_sign
#define ZZ_FORWARD_carrier_identity_sign
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_cstr_eq
#define ZZ_FORWARD_buffer_cstr_eq
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_identity_nullcheck
#define ZZ_FORWARD_carrier_identity_nullcheck
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_fs_get_homedir
#define ZZ_FORWARD_fs_get_homedir
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Parser_1000
#define ZZ_FORWARD_toml_Parser_1000
struct toml_Parser_1000_t;
typedef struct toml_Parser_1000_t toml_Parser_1000;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_time_real
#define ZZ_FORWARD_time_real
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_secret
#define ZZ_FORWARD_carrier_identity_address_from_secret
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb_publish
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb_publish
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_identity_secret
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_identity_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_cb
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_identity_secret
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_identity_secret
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_secret
#define ZZ_EXPORT_carrier_identity_identity_from_secret
void carrier_identity_identity_from_secret (carrier_identity_Identity*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_log_info
#define ZZ_EXPORT_log_info
void log_info (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_findmtdindex
#define ZZ_EXPORT_carrier_vault_toml_findmtdindex
static uintptr_t carrier_vault_toml_findmtdindex (err_Err*  const  e, uintptr_t const  et, char const *  const  mtdname);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_100_100
#define ZZ_EXPORT_buffer_Buffer_100_100
struct buffer_Buffer_100_t {
   uintptr_t at ;
   char mem[100] ;
}
;
size_t sizeof_buffer_Buffer_100();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_200_200
#define ZZ_EXPORT_buffer_Buffer_200_200
struct buffer_Buffer_200_t {
   uintptr_t at ;
   char mem[200] ;
}
;
size_t sizeof_buffer_Buffer_200();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1000_1000
#define ZZ_EXPORT_buffer_Buffer_1000_1000
struct buffer_Buffer_1000_t {
   uintptr_t at ;
   char mem[1000] ;
}
;
size_t sizeof_buffer_Buffer_1000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_400_400
#define ZZ_EXPORT_buffer_Buffer_400_400
struct buffer_Buffer_400_t {
   uintptr_t at ;
   char mem[400] ;
}
;
size_t sizeof_buffer_Buffer_400();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/src/os.h"
#if defined(OPENWRT_BUILD)
    #include <uci.h>
#endif

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_to_str
#define ZZ_EXPORT_carrier_identity_secret_to_str
uintptr_t carrier_identity_secret_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Secret const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_isnull
#define ZZ_EXPORT_carrier_identity_isnull
bool carrier_identity_isnull (uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_to_str
#define ZZ_EXPORT_carrier_identity_address_to_str
uintptr_t carrier_identity_address_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Address const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str
#define ZZ_EXPORT_carrier_identity_identity_to_str
uintptr_t carrier_identity_identity_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_identity_sign
#define ZZ_EXPORT_carrier_identity_sign
void carrier_identity_sign (carrier_identity_Secret const *  const  key, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr_eq
#define ZZ_EXPORT_buffer_cstr_eq
bool buffer_cstr_eq (char const *  const  a, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_identity_nullcheck
#define ZZ_EXPORT_carrier_identity_nullcheck
void carrier_identity_nullcheck (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_fs_get_homedir
#define ZZ_EXPORT_fs_get_homedir
void fs_get_homedir (err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);
#endif
#ifndef ZZ_EXPORT_toml_Parser_1000_1000
#define ZZ_EXPORT_toml_Parser_1000_1000
struct toml_Parser_1000_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
   char _____tail [1000];
}
;
size_t sizeof_toml_Parser_1000();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_time_real
#define ZZ_EXPORT_time_real
time_Time time_real ();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_secret
#define ZZ_EXPORT_carrier_identity_address_from_secret
void carrier_identity_address_from_secret (carrier_identity_Address*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb
static void carrier_vault_toml_load_from_toml_cb (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb_publish
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb_publish
static void carrier_vault_toml_load_from_toml_cb_publish (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_identity_secret
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_identity_secret
static void carrier_vault_toml_load_from_toml_identity_secret (carrier_vault_toml_Mem*  const  this, err_Err*  const  e, uintptr_t const  et, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_cb
static void carrier_vault_toml_load_from_toml_cb (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_identity_secret
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_identity_secret
static void carrier_vault_toml_load_from_toml_identity_secret (carrier_vault_toml_Mem*  const  this, err_Err*  const  e, uintptr_t const  et, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_time_src_native_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_time_src_native_h_
#endif
#ifndef ZZ_FORWARD_time_real
#define ZZ_FORWARD_time_real
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_time_from_millis
#define ZZ_FORWARD_time_from_millis
#endif
#ifndef ZZ_FORWARD__stdint_h_
#define ZZ_FORWARD__stdint_h_
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_time_infinite
#define ZZ_FORWARD_time_infinite
#endif
#ifndef ZZ_FORWARD_time_from_seconds
#define ZZ_FORWARD_time_from_seconds
#endif
#ifndef ZZ_FORWARD_time_tick
#define ZZ_FORWARD_time_tick
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_time_src_native_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_time_src_native_h_

#line 1 "/home/aep/proj/zz/modules/time/src/native.h"
#include <stdint.h>


#if defined(__linux__) || defined(__APPLE__)

    #ifndef _POSIX_C_SOURCE
    #define _POSIX_C_SOURCE 199309L
    #endif
    #include <time.h>

    #define zz__clock_gettime clock_gettime

#elif defined(_WIN32)

    #define WIN32_LEAN_AND_MEAN
    #include <windows.h>
    #include <time.h>
    #define MS_PER_SEC      1000ULL     // MS = milliseconds
    #define US_PER_MS       1000ULL     // US = microseconds
    #define HNS_PER_US      10ULL       // HNS = hundred-nanoseconds (e.g., 1 hns = 100 ns)
    #define NS_PER_US       1000ULL

    #define HNS_PER_SEC     (MS_PER_SEC * US_PER_MS * HNS_PER_US)
    #define NS_PER_HNS      (100ULL)    // NS = nanoseconds
    #define NS_PER_SEC      (MS_PER_SEC * US_PER_MS * NS_PER_US)

    #define CLOCK_MONOTONIC 1
    #define CLOCK_REALTIME  2

    static inline int zz__clock_gettime_monotonic(struct timespec *tv)
    {
        static LARGE_INTEGER ticksPerSec;
        LARGE_INTEGER ticks;
        double seconds;

        if (!ticksPerSec.QuadPart) {
            QueryPerformanceFrequency(&ticksPerSec);
            if (!ticksPerSec.QuadPart) {
                errno = 252; // ENOTSUP
                return -1;
            }
        }

        QueryPerformanceCounter(&ticks);

        seconds = (double) ticks.QuadPart / (double) ticksPerSec.QuadPart;
        tv->tv_sec = (time_t)seconds;
        tv->tv_nsec = (long)((ULONGLONG)(seconds * NS_PER_SEC) % NS_PER_SEC);

        return 0;
    }

    static inline int zz__clock_gettime_realtime(struct timespec *tv)
    {
        FILETIME ft;
        ULARGE_INTEGER hnsTime;

        GetSystemTimeAsFileTime(&ft);

        hnsTime.LowPart = ft.dwLowDateTime;
        hnsTime.HighPart = ft.dwHighDateTime;

        // To get POSIX Epoch as baseline, subtract the number of hns intervals from Jan 1, 1601 to Jan 1, 1970.
        hnsTime.QuadPart -= (11644473600ULL * HNS_PER_SEC);

        // modulus by hns intervals per second first, then convert to ns, as not to lose resolution
        tv->tv_nsec = (long) ((hnsTime.QuadPart % HNS_PER_SEC) * NS_PER_HNS);
        tv->tv_sec = (long) (hnsTime.QuadPart / HNS_PER_SEC);

        return 0;
    }

    static inline int zz__clock_gettime(int type, struct timespec *tp)
    {
        if (type == CLOCK_MONOTONIC)
        {
            return zz__clock_gettime_monotonic(tp);
        }
        else if (type == CLOCK_REALTIME)
        {
            return zz__clock_gettime_realtime(tp);
        }

        errno = 252; // ENOTSUP
        return -1;
    }

#endif

#if defined(__linux__) || defined(__APPLE__) || defined(_WIN32)
    static int os_time_tick(uint64_t *secs, uint64_t* nanos) {
        struct timespec tt;
        int r = zz__clock_gettime(CLOCK_MONOTONIC, &tt);
        if (r != 0) {
            return r;
        }

        *secs  = tt.tv_sec;
        *nanos  = tt.tv_nsec;
        return 0;
    }

    static int os_time_real(uint64_t *secs, uint64_t* nanos) {
        struct timespec tt;
        int r = zz__clock_gettime(CLOCK_REALTIME, &tt);
        if (r != 0) {
            return r;
        }

        *secs  = tt.tv_sec;
        *nanos  = tt.tv_nsec;
        return 0;
    }
#elif defined(ESP_PLATFORM)

    #include "esp_timer.h"

    static int os_time_tick(uint64_t *secs, uint64_t* nanos) {
        uint64_t tick =  esp_timer_get_time();
        *secs   = tick / 1000000;
        *nanos  = (tick % 1000000) * 1000;
        return 0;
    }

    int os_time_real(uint64_t *secs, uint64_t* nanos);

#else
    int os_time_tick(uint64_t *secs, uint64_t* nanos);
    int os_time_real(uint64_t *secs, uint64_t* nanos);
#endif

#endif
#ifndef ZZ_EXPORT_time_real
#define ZZ_EXPORT_time_real
time_Time time_real ();

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_time_from_millis
#define ZZ_EXPORT_time_from_millis
time_Time time_from_millis (uint64_t const  millis);

#endif
#ifndef ZZ_EXPORT__stdint_h_
#define ZZ_EXPORT__stdint_h_
#include <stdint.h>

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_time_infinite
#define ZZ_EXPORT_time_infinite
time_Time time_infinite ();

#endif
#ifndef ZZ_EXPORT_time_from_seconds
#define ZZ_EXPORT_time_from_seconds
time_Time time_from_seconds (uint64_t const  secs);

#endif
#ifndef ZZ_EXPORT_time_tick
#define ZZ_EXPORT_time_tick
time_Time time_tick ();

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_Async_100
#define ZZ_FORWARD_io_unix_Async_100
struct io_unix_Async_100_t;
typedef struct io_unix_Async_100_t io_unix_Async_100;
#endif
#ifndef ZZ_FORWARD_io_unix_select_fd
#define ZZ_FORWARD_io_unix_select_fd
#endif
#ifndef ZZ_FORWARD_io_unix_reset
#define ZZ_FORWARD_io_unix_reset
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__poll_h_
#define ZZ_FORWARD__poll_h_
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_Async_100
#define ZZ_FORWARD_io_unix_Async_100
struct io_unix_Async_100_t;
typedef struct io_unix_Async_100_t io_unix_Async_100;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_connect_disconnect_t
#define ZZ_FORWARD_carrier_connect_disconnect_t
#endif
#ifndef ZZ_FORWARD_carrier_connect_connect_t
#define ZZ_FORWARD_carrier_connect_connect_t
#endif
#ifndef ZZ_FORWARD_carrier_connect_Connect
#define ZZ_FORWARD_carrier_connect_Connect
struct carrier_connect_Connect_t;
typedef struct carrier_connect_Connect_t carrier_connect_Connect;
#endif
#ifndef ZZ_FORWARD_carrier_sync_Sync
#define ZZ_FORWARD_carrier_sync_Sync
struct carrier_sync_Sync_t;
typedef struct carrier_sync_Sync_t carrier_sync_Sync;
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_time_from_seconds
#define ZZ_FORWARD_time_from_seconds
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_connect_start
#define ZZ_FORWARD_carrier_connect_start
#endif
#ifndef ZZ_FORWARD_carrier_sync_on_disconnect
#define ZZ_FORWARD_carrier_sync_on_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_sync_on_connect
#define ZZ_FORWARD_carrier_sync_on_connect
#endif
#ifndef ZZ_FORWARD_carrier_sync_connect
#define ZZ_FORWARD_carrier_sync_connect
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_sync_Failed
#define ZZ_FORWARD_carrier_sync_Failed
#endif
#ifndef ZZ_FORWARD_io_unix_make
#define ZZ_FORWARD_io_unix_make
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_sync
#define ZZ_FORWARD_carrier_bootstrap_sync
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_stream
#define ZZ_FORWARD_carrier_connect_on_stream
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_sync_open_with_headers
#define ZZ_FORWARD_carrier_sync_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_sync_start
#define ZZ_FORWARD_carrier_sync_start
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_sync_close
#define ZZ_FORWARD_carrier_sync_close
#endif
#ifndef ZZ_FORWARD_carrier_sync_open
#define ZZ_FORWARD_carrier_sync_open
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_sync_on_connect
#define ZZ_FORWARD_carrier_sync_on_connect
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_sync_iwait
#define ZZ_FORWARD_carrier_sync_iwait
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_time_infinite
#define ZZ_FORWARD_time_infinite
#endif
#ifndef ZZ_FORWARD_carrier_sync_wait
#define ZZ_FORWARD_carrier_sync_wait
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_sync_on_disconnect
#define ZZ_FORWARD_carrier_sync_on_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_close
#define ZZ_FORWARD_carrier_connect_on_close
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_io_unix_select_fd
#define ZZ_EXPORT_io_unix_select_fd
extern bool io_unix_select_fd (io_unix_Async*  const  self, int const  fd, int const  events);

#endif
#ifndef ZZ_EXPORT_io_unix_reset
#define ZZ_EXPORT_io_unix_reset
static void io_unix_reset (io_unix_Async*  const  self);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT__poll_h_
#define ZZ_EXPORT__poll_h_
#include <poll.h>

#endif
#ifndef ZZ_EXPORT_io_unix_Async
#define ZZ_EXPORT_io_unix_Async
struct io_unix_Async_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[] ;
}
;
size_t sizeof_io_unix_Async(size_t tail);
#endif
#ifndef ZZ_EXPORT_io_unix_Async_100_100
#define ZZ_EXPORT_io_unix_Async_100_100
struct io_unix_Async_100_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[100] ;
}
;
size_t sizeof_io_unix_Async_100();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_connect_disconnect_t
#define ZZ_EXPORT_carrier_connect_disconnect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_endpoint_Endpoint*  const  ep, void * _ctx);
} carrier_connect_disconnect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_connect_t
#define ZZ_EXPORT_carrier_connect_connect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_channel_Channel*  const  chan, void * _ctx);
} carrier_connect_connect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_Connect
#define ZZ_EXPORT_carrier_connect_Connect
struct carrier_connect_Connect_t {
   carrier_identity_Identity target ;
   carrier_identity_Identity principal ;
   carrier_initiator_Initiator initiator ;
   uint64_t initiator_time ;
   buffer_Buffer_1024 initiator_pkt ;
   carrier_connect_disconnect_t on_disconnect ;
   carrier_connect_connect_t on_connect ;
   buffer_Buffer_1024 remoteError ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_carrier_connect_Connect();

#endif
#ifndef ZZ_EXPORT_carrier_sync_Sync
#define ZZ_EXPORT_carrier_sync_Sync
struct carrier_sync_Sync_t {
   io_unix_Async_100 async ;
   carrier_endpoint_Endpoint*  ep ;
   carrier_connect_Connect con ;
   carrier_channel_Channel*  chan ;
   bool waiting ;
   bool error ;
}
;
size_t sizeof_carrier_sync_Sync();

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_time_from_seconds
#define ZZ_EXPORT_time_from_seconds
time_Time time_from_seconds (uint64_t const  secs);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_connect_start
#define ZZ_EXPORT_carrier_connect_start
void carrier_connect_start (carrier_connect_Connect*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_endpoint_Endpoint*  const  ep, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_sync_on_disconnect
#define ZZ_EXPORT_carrier_sync_on_disconnect
static void carrier_sync_on_disconnect (carrier_connect_Connect*  const  con, carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_sync_on_connect
#define ZZ_EXPORT_carrier_sync_on_connect
static void carrier_sync_on_connect (carrier_connect_Connect*  const  con, carrier_channel_Channel*  const  chan);

#endif
#ifndef ZZ_EXPORT_carrier_sync_connect
#define ZZ_EXPORT_carrier_sync_connect
void carrier_sync_connect (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_sync_Failed
#define ZZ_EXPORT_carrier_sync_Failed
extern const __attribute__ ((unused)) size_t carrier_sync_Failed;

#endif
#ifndef ZZ_EXPORT_io_unix_make
#define ZZ_EXPORT_io_unix_make
void io_unix_make (io_unix_Async*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_sync
#define ZZ_EXPORT_carrier_bootstrap_sync
void carrier_bootstrap_sync (err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async, time_Time const  timeout);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_stream
#define ZZ_EXPORT_carrier_connect_on_stream
static bool carrier_connect_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sync_open_with_headers
#define ZZ_EXPORT_carrier_sync_open_with_headers
carrier_stream_Stream * carrier_sync_open_with_headers (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  sc, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_sync_start
#define ZZ_EXPORT_carrier_sync_start
void carrier_sync_start (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_sync_close
#define ZZ_EXPORT_carrier_sync_close
void carrier_sync_close (carrier_sync_Sync*  const  self, int const  exit_code);

#endif
#ifndef ZZ_EXPORT_carrier_sync_open
#define ZZ_EXPORT_carrier_sync_open
carrier_stream_Stream * carrier_sync_open (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  sc);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_sync_on_connect
#define ZZ_EXPORT_carrier_sync_on_connect
static void carrier_sync_on_connect (carrier_connect_Connect*  const  con, carrier_channel_Channel*  const  chan);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_sync_iwait
#define ZZ_EXPORT_carrier_sync_iwait
static void carrier_sync_iwait (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_time_infinite
#define ZZ_EXPORT_time_infinite
time_Time time_infinite ();

#endif
#ifndef ZZ_EXPORT_carrier_sync_wait
#define ZZ_EXPORT_carrier_sync_wait
void carrier_sync_wait (carrier_sync_Sync*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sync_on_disconnect
#define ZZ_EXPORT_carrier_sync_on_disconnect
static void carrier_sync_on_disconnect (carrier_connect_Connect*  const  con, carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_close
#define ZZ_EXPORT_carrier_connect_on_close
static void carrier_connect_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_buffer_cstr_eq
#define ZZ_FORWARD_buffer_cstr_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_check_existing_authorizations_cb
#define ZZ_FORWARD_carrier_vault_check_existing_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb_i
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb_i
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_secret_fn
#define ZZ_FORWARD_carrier_vault_get_secret_fn
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_cstr_eq
#define ZZ_EXPORT_buffer_cstr_eq
bool buffer_cstr_eq (char const *  const  a, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_check_existing_authorizations_cb
#define ZZ_EXPORT_carrier_vault_check_existing_authorizations_cb
static void carrier_vault_check_existing_authorizations_cb (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb_i
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb_i
static void carrier_vault_list_authorizations_cb_i (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_secret_fn
#define ZZ_EXPORT_carrier_vault_get_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret, void * _ctx);
} carrier_vault_get_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_secret_fn)

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_netio_unix_socket
#define ZZ_FORWARD_netio_unix_socket
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_netio_unix_make_async
#define ZZ_FORWARD_netio_unix_make_async
#endif
#ifndef ZZ_FORWARD_netio_unix_alen
#define ZZ_FORWARD_netio_unix_alen
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/modules/netio/src/os.h"
#if defined(__linux__)
    #define ZZ_NETIO_UNIX 1
#elif defined(__APPLE__)
    #define ZZ_NETIO_UNIX 1
    #define ZZ_NETIO_OSX 1
#endif


#if ZZ_NETIO_UNIX
#include <errno.h>
#include <unistd.h>
#include <fcntl.h>
#endif

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_netio_unix_socket
#define ZZ_EXPORT_netio_unix_socket
extern int netio_unix_socket (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et, int const  typ);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_netio_unix_make_async
#define ZZ_EXPORT_netio_unix_make_async
extern void netio_unix_make_async (int const  fd, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_unix_alen
#define ZZ_EXPORT_netio_unix_alen
extern uintptr_t netio_unix_alen (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_carrier_revision_m_revision
#define ZZ_FORWARD_carrier_revision_m_revision
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_revision_build_id
#define ZZ_FORWARD_carrier_revision_build_id
#endif
#ifndef ZZ_FORWARD_carrier_revision_m_build_id
#define ZZ_FORWARD_carrier_revision_m_build_id
#endif
#ifndef ZZ_FORWARD_carrier_revision_revision
#define ZZ_FORWARD_carrier_revision_revision
#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_carrier_revision_m_revision
#define ZZ_EXPORT_carrier_revision_m_revision

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_revision_build_id
#define ZZ_EXPORT_carrier_revision_build_id
char  const * carrier_revision_build_id ();

#endif
#ifndef ZZ_EXPORT_carrier_revision_m_build_id
#define ZZ_EXPORT_carrier_revision_m_build_id

#endif
#ifndef ZZ_EXPORT_carrier_revision_revision
#define ZZ_EXPORT_carrier_revision_revision
uint32_t  static inline carrier_revision_revision ();

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_on_close
#define ZZ_FORWARD_carrier_subscribe_on_close
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_on_stream
#define ZZ_FORWARD_carrier_subscribe_on_stream
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_SubscribeConfig
#define ZZ_FORWARD_carrier_subscribe_SubscribeConfig
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeChange
#define ZZ_FORWARD_carrier_proto_SubscribeChange
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD__poll_h_
#define ZZ_FORWARD__poll_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_select_fd
#define ZZ_FORWARD_io_unix_select_fd
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_io_unix_reset
#define ZZ_FORWARD_io_unix_reset
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeRequest
#define ZZ_FORWARD_carrier_proto_SubscribeRequest
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_io_unix_make
#define ZZ_FORWARD_io_unix_make
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_Subscribe
#define ZZ_FORWARD_carrier_subscribe_Subscribe
struct carrier_subscribe_Subscribe_t;
typedef struct carrier_subscribe_Subscribe_t carrier_subscribe_Subscribe;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_on_stream
#define ZZ_FORWARD_carrier_subscribe_on_stream
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_responder_accept_insecure
#define ZZ_FORWARD_carrier_responder_accept_insecure
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_identity_change_event_cb
#define ZZ_FORWARD_carrier_subscribe_identity_change_event_cb
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_start
#define ZZ_FORWARD_carrier_subscribe_start
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_subscribe_Subscribe
#define ZZ_FORWARD_carrier_subscribe_Subscribe
struct carrier_subscribe_Subscribe_t;
typedef struct carrier_subscribe_Subscribe_t carrier_subscribe_Subscribe;
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_on_close
#define ZZ_EXPORT_carrier_subscribe_on_close
static void carrier_subscribe_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_on_stream
#define ZZ_EXPORT_carrier_subscribe_on_stream
static bool carrier_subscribe_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeChange
#define ZZ_EXPORT_carrier_proto_SubscribeChange
typedef enum {
    carrier_proto_SubscribeChange_Publish = 1,
    carrier_proto_SubscribeChange_Unpublish = 2,
    carrier_proto_SubscribeChange_Supersede = 3,

} carrier_proto_SubscribeChange;

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT__poll_h_
#define ZZ_EXPORT__poll_h_
#include <poll.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_io_unix_select_fd
#define ZZ_EXPORT_io_unix_select_fd
extern bool io_unix_select_fd (io_unix_Async*  const  self, int const  fd, int const  events);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_io_unix_reset
#define ZZ_EXPORT_io_unix_reset
static void io_unix_reset (io_unix_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_unix_Async
#define ZZ_EXPORT_io_unix_Async
struct io_unix_Async_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[] ;
}
;
size_t sizeof_io_unix_Async(size_t tail);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeRequest
#define ZZ_EXPORT_carrier_proto_SubscribeRequest
typedef enum {
    carrier_proto_SubscribeRequest_Shadow = 1,
    carrier_proto_SubscribeRequest_Filter = 2,
    carrier_proto_SubscribeRequest_GroupKey = 3,
    carrier_proto_SubscribeRequest_GroupShard = 4,
    carrier_proto_SubscribeRequest_ShardWeight = 5,

} carrier_proto_SubscribeRequest;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_unix_make
#define ZZ_EXPORT_io_unix_make
void io_unix_make (io_unix_Async*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_on_stream
#define ZZ_EXPORT_carrier_subscribe_on_stream
static bool carrier_subscribe_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_responder_accept_insecure
#define ZZ_EXPORT_carrier_responder_accept_insecure
extern void carrier_responder_accept_insecure (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const *  const  store, uint64_t route, uint64_t const  timestamp, slice_mut_slice_MutSlice*  const  frame);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_identity_change_event_cb
#define ZZ_EXPORT_carrier_subscribe_identity_change_event_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_subscribe_Subscribe*  const  self, carrier_identity_Identity const *  const  id, carrier_stream_Stream*  const  st, void * _ctx);
} carrier_subscribe_identity_change_event_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_subscribe_identity_change_event_cb)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_start
#define ZZ_EXPORT_carrier_subscribe_start
void carrier_subscribe_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_subscribe_Subscribe*  const  ss);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_subscribe_Subscribe
#define ZZ_EXPORT_carrier_subscribe_Subscribe
struct carrier_subscribe_Subscribe_t {
   carrier_subscribe_identity_change_event_cb on_publish ;
   carrier_subscribe_identity_change_event_cb on_unpublish ;
}
;
size_t sizeof_carrier_subscribe_Subscribe();

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_net_address_hexmap
#define ZZ_FORWARD_net_address_hexmap
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_sysinfo_proto_Netdev
#define ZZ_FORWARD_sysinfo_proto_Netdev
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PublishChange
#define ZZ_FORWARD_sysinfo_proto_PublishChange
#endif
#ifndef ZZ_FORWARD_protonerf_FieldType
#define ZZ_FORWARD_protonerf_FieldType
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PublishChangeTypes
#define ZZ_FORWARD_sysinfo_proto_PublishChangeTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConnectRequest
#define ZZ_FORWARD_sysinfo_proto_ConnectRequest
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Path
#define ZZ_FORWARD_sysinfo_proto_Path
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NoneTypes
#define ZZ_FORWARD_sysinfo_proto_NoneTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensors
#define ZZ_FORWARD_sysinfo_proto_Sensors
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Satellite
#define ZZ_FORWARD_sysinfo_proto_Satellite
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SubscribeChange
#define ZZ_FORWARD_sysinfo_proto_SubscribeChange
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Arp
#define ZZ_FORWARD_sysinfo_proto_Arp
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Netdev__Duplex
#define ZZ_FORWARD_sysinfo_proto_Netdev__Duplex
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Confirmation
#define ZZ_FORWARD_sysinfo_proto_Confirmation
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Location
#define ZZ_FORWARD_sysinfo_proto_Location
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LocationTypes
#define ZZ_FORWARD_sysinfo_proto_LocationTypes
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensor
#define ZZ_FORWARD_sysinfo_proto_Sensor
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SensorTypes
#define ZZ_FORWARD_sysinfo_proto_SensorTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Filter
#define ZZ_FORWARD_sysinfo_proto_Filter
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FilterTypes
#define ZZ_FORWARD_sysinfo_proto_FilterTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SwitchPort
#define ZZ_FORWARD_sysinfo_proto_SwitchPort
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Claim
#define ZZ_FORWARD_sysinfo_proto_Claim
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Satellite__Constellation
#define ZZ_FORWARD_sysinfo_proto_Satellite__Constellation
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LocationAccuracity
#define ZZ_FORWARD_sysinfo_proto_LocationAccuracity
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Switch
#define ZZ_FORWARD_sysinfo_proto_Switch
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Uname
#define ZZ_FORWARD_sysinfo_proto_Uname
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Unpublish
#define ZZ_FORWARD_sysinfo_proto_Unpublish
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InnerTraceRequest
#define ZZ_FORWARD_sysinfo_proto_InnerTraceRequest
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InnerTraceRequestTypes
#define ZZ_FORWARD_sysinfo_proto_InnerTraceRequestTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_WifiStation
#define ZZ_FORWARD_sysinfo_proto_WifiStation
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterConfig
#define ZZ_FORWARD_sysinfo_proto_ClusterConfig
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_UnameTypes
#define ZZ_FORWARD_sysinfo_proto_UnameTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Mem
#define ZZ_FORWARD_sysinfo_proto_Mem
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PeerConnectRequest
#define ZZ_FORWARD_sysinfo_proto_PeerConnectRequest
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PeerConnectRequestTypes
#define ZZ_FORWARD_sysinfo_proto_PeerConnectRequestTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConnectResponse
#define ZZ_FORWARD_sysinfo_proto_ConnectResponse
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetSurvey
#define ZZ_FORWARD_sysinfo_proto_NetSurvey
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_DiscoveryResponse
#define ZZ_FORWARD_sysinfo_proto_DiscoveryResponse
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Arp__HwType
#define ZZ_FORWARD_sysinfo_proto_Arp__HwType
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Load
#define ZZ_FORWARD_sysinfo_proto_Load
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ProtoHeader
#define ZZ_FORWARD_sysinfo_proto_ProtoHeader
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ProtoHeaderTypes
#define ZZ_FORWARD_sysinfo_proto_ProtoHeaderTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ExceptionalRoute
#define ZZ_FORWARD_sysinfo_proto_ExceptionalRoute
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Publish
#define ZZ_FORWARD_sysinfo_proto_Publish
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Firmware
#define ZZ_FORWARD_sysinfo_proto_Firmware
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationGetTypes
#define ZZ_FORWARD_sysinfo_proto_AuthorizationGetTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InteractiveAuth
#define ZZ_FORWARD_sysinfo_proto_InteractiveAuth
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InteractiveAuthTypes
#define ZZ_FORWARD_sysinfo_proto_InteractiveAuthTypes
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FileSystem
#define ZZ_FORWARD_sysinfo_proto_FileSystem
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LocationVelocity
#define ZZ_FORWARD_sysinfo_proto_LocationVelocity
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetworkJoin
#define ZZ_FORWARD_sysinfo_proto_NetworkJoin
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetworkJoinTypes
#define ZZ_FORWARD_sysinfo_proto_NetworkJoinTypes
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sysinfo
#define ZZ_FORWARD_sysinfo_proto_Sysinfo
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationAdd
#define ZZ_FORWARD_sysinfo_proto_AuthorizationAdd
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationAddTypes
#define ZZ_FORWARD_sysinfo_proto_AuthorizationAddTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PathTypes
#define ZZ_FORWARD_sysinfo_proto_PathTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PeerConnectResponse
#define ZZ_FORWARD_sysinfo_proto_PeerConnectResponse
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClaimOne
#define ZZ_FORWARD_sysinfo_proto_ClaimOne
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PublishRequest
#define ZZ_FORWARD_sysinfo_proto_PublishRequest
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetAddress
#define ZZ_FORWARD_sysinfo_proto_NetAddress
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceShadow
#define ZZ_FORWARD_sysinfo_proto_TraceShadow
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_WifiInterface
#define ZZ_FORWARD_sysinfo_proto_WifiInterface
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PeerConnectResponseTypes
#define ZZ_FORWARD_sysinfo_proto_PeerConnectResponseTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClaimOneTypes
#define ZZ_FORWARD_sysinfo_proto_ClaimOneTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_DhcpLease
#define ZZ_FORWARD_sysinfo_proto_DhcpLease
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationList
#define ZZ_FORWARD_sysinfo_proto_AuthorizationList
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SubscribeRequest
#define ZZ_FORWARD_sysinfo_proto_SubscribeRequest
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Certificate
#define ZZ_FORWARD_sysinfo_proto_Certificate
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Location__Fix
#define ZZ_FORWARD_sysinfo_proto_Location__Fix
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetAddressTypes
#define ZZ_FORWARD_sysinfo_proto_NetAddressTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterShard
#define ZZ_FORWARD_sysinfo_proto_ClusterShard
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterShardTypes
#define ZZ_FORWARD_sysinfo_proto_ClusterShardTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterState
#define ZZ_FORWARD_sysinfo_proto_ClusterState
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_EmptyTypes
#define ZZ_FORWARD_sysinfo_proto_EmptyTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PublishRequestTypes
#define ZZ_FORWARD_sysinfo_proto_PublishRequestTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Bootloader
#define ZZ_FORWARD_sysinfo_proto_Bootloader
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_BootloaderTypes
#define ZZ_FORWARD_sysinfo_proto_BootloaderTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InnerTraceResponse
#define ZZ_FORWARD_sysinfo_proto_InnerTraceResponse
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceResponse
#define ZZ_FORWARD_sysinfo_proto_TraceResponse
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Belltower
#define ZZ_FORWARD_sysinfo_proto_Belltower
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetRoute
#define ZZ_FORWARD_sysinfo_proto_NetRoute
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_DhcpLeaseTypes
#define ZZ_FORWARD_sysinfo_proto_DhcpLeaseTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_CertificateTypes
#define ZZ_FORWARD_sysinfo_proto_CertificateTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Authorization
#define ZZ_FORWARD_sysinfo_proto_Authorization
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_GenesisCurrent
#define ZZ_FORWARD_sysinfo_proto_GenesisCurrent
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_CertificateRequest
#define ZZ_FORWARD_sysinfo_proto_CertificateRequest
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_MemTypes
#define ZZ_FORWARD_sysinfo_proto_MemTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Sensor__ValueType
#define ZZ_FORWARD_sysinfo_proto_Sensor__ValueType
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SysinfoTypes
#define ZZ_FORWARD_sysinfo_proto_SysinfoTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_GenesisUpdate
#define ZZ_FORWARD_sysinfo_proto_GenesisUpdate
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetworkGetResult
#define ZZ_FORWARD_sysinfo_proto_NetworkGetResult
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetworkGetTypes
#define ZZ_FORWARD_sysinfo_proto_NetworkGetTypes
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetRouteTypes
#define ZZ_FORWARD_sysinfo_proto_NetRouteTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClaimAll
#define ZZ_FORWARD_sysinfo_proto_ClaimAll
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FilterByRole
#define ZZ_FORWARD_sysinfo_proto_FilterByRole
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FilterByRoleTypes
#define ZZ_FORWARD_sysinfo_proto_FilterByRoleTypes
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SensorsTypes
#define ZZ_FORWARD_sysinfo_proto_SensorsTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_InnerTraceResponseTypes
#define ZZ_FORWARD_sysinfo_proto_InnerTraceResponseTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LocationVelocityTypes
#define ZZ_FORWARD_sysinfo_proto_LocationVelocityTypes
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetworkGetResultTypes
#define ZZ_FORWARD_sysinfo_proto_NetworkGetResultTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceRequest
#define ZZ_FORWARD_sysinfo_proto_TraceRequest
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LocationAccuracityTypes
#define ZZ_FORWARD_sysinfo_proto_LocationAccuracityTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_WifiInterfaceTypes
#define ZZ_FORWARD_sysinfo_proto_WifiInterfaceTypes
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_UnpublishTypes
#define ZZ_FORWARD_sysinfo_proto_UnpublishTypes
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SwitchPortTypes
#define ZZ_FORWARD_sysinfo_proto_SwitchPortTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Revoker
#define ZZ_FORWARD_sysinfo_proto_Revoker
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_RevokerTypes
#define ZZ_FORWARD_sysinfo_proto_RevokerTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_CertificateRequestTypes
#define ZZ_FORWARD_sysinfo_proto_CertificateRequestTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetSurveyTypes
#define ZZ_FORWARD_sysinfo_proto_NetSurveyTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConfigResult
#define ZZ_FORWARD_sysinfo_proto_ConfigResult
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_NetdevTypes
#define ZZ_FORWARD_sysinfo_proto_NetdevTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_GenesisUpdateTypes
#define ZZ_FORWARD_sysinfo_proto_GenesisUpdateTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_MoveInstruction
#define ZZ_FORWARD_sysinfo_proto_MoveInstruction
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_MoveInstructionTypes
#define ZZ_FORWARD_sysinfo_proto_MoveInstructionTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FileSystemTypes
#define ZZ_FORWARD_sysinfo_proto_FileSystemTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterStateTypes
#define ZZ_FORWARD_sysinfo_proto_ClusterStateTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConfigResultTypes
#define ZZ_FORWARD_sysinfo_proto_ConfigResultTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceShadowTypes
#define ZZ_FORWARD_sysinfo_proto_TraceShadowTypes
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthListResult
#define ZZ_FORWARD_sysinfo_proto_AuthListResult
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Alias
#define ZZ_FORWARD_sysinfo_proto_Alias
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AliasTypes
#define ZZ_FORWARD_sysinfo_proto_AliasTypes
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationDel
#define ZZ_FORWARD_sysinfo_proto_AuthorizationDel
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationDelTypes
#define ZZ_FORWARD_sysinfo_proto_AuthorizationDelTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ExceptionalRouteTypes
#define ZZ_FORWARD_sysinfo_proto_ExceptionalRouteTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_GenesisCurrentTypes
#define ZZ_FORWARD_sysinfo_proto_GenesisCurrentTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SubscribeChangeTypes
#define ZZ_FORWARD_sysinfo_proto_SubscribeChangeTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthListResultTypes
#define ZZ_FORWARD_sysinfo_proto_AuthListResultTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationListTypes
#define ZZ_FORWARD_sysinfo_proto_AuthorizationListTypes
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SwitchTypes
#define ZZ_FORWARD_sysinfo_proto_SwitchTypes
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_LoadTypes
#define ZZ_FORWARD_sysinfo_proto_LoadTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_DiscoveryResponseTypes
#define ZZ_FORWARD_sysinfo_proto_DiscoveryResponseTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_WifiStationTypes
#define ZZ_FORWARD_sysinfo_proto_WifiStationTypes
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SupersedeTypes
#define ZZ_FORWARD_sysinfo_proto_SupersedeTypes
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClusterConfigTypes
#define ZZ_FORWARD_sysinfo_proto_ClusterConfigTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceRequestTypes
#define ZZ_FORWARD_sysinfo_proto_TraceRequestTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConnectRequest__TargetType
#define ZZ_FORWARD_sysinfo_proto_ConnectRequest__TargetType
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_AuthorizationTypes
#define ZZ_FORWARD_sysinfo_proto_AuthorizationTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClaimAllTypes
#define ZZ_FORWARD_sysinfo_proto_ClaimAllTypes
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ClaimTypes
#define ZZ_FORWARD_sysinfo_proto_ClaimTypes
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SatelliteTypes
#define ZZ_FORWARD_sysinfo_proto_SatelliteTypes
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ArpTypes
#define ZZ_FORWARD_sysinfo_proto_ArpTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_SubscribeRequestTypes
#define ZZ_FORWARD_sysinfo_proto_SubscribeRequestTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_Path__Category
#define ZZ_FORWARD_sysinfo_proto_Path__Category
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConnectResponseTypes
#define ZZ_FORWARD_sysinfo_proto_ConnectResponseTypes
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_FirmwareTypes
#define ZZ_FORWARD_sysinfo_proto_FirmwareTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConfirmationTypes
#define ZZ_FORWARD_sysinfo_proto_ConfirmationTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_BelltowerTypes
#define ZZ_FORWARD_sysinfo_proto_BelltowerTypes
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_TraceResponseTypes
#define ZZ_FORWARD_sysinfo_proto_TraceResponseTypes
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_PublishTypes
#define ZZ_FORWARD_sysinfo_proto_PublishTypes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_sysinfo_proto_ConnectRequestTypes
#define ZZ_FORWARD_sysinfo_proto_ConnectRequestTypes
#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Netdev
#define ZZ_EXPORT_sysinfo_proto_Netdev
typedef enum {
    sysinfo_proto_Netdev_Name = 1,
    sysinfo_proto_Netdev_RxPkt = 2,
    sysinfo_proto_Netdev_RxErr = 3,
    sysinfo_proto_Netdev_TxPkt = 4,
    sysinfo_proto_Netdev_TxErr = 5,
    sysinfo_proto_Netdev_Up = 6,
    sysinfo_proto_Netdev_Macaddr = 7,
    sysinfo_proto_Netdev_Mtu = 8,
    sysinfo_proto_Netdev_Addrs = 9,
    sysinfo_proto_Netdev_Link = 10,
    sysinfo_proto_Netdev_LinkChanges = 11,
    sysinfo_proto_Netdev_LinkSpeed = 12,
    sysinfo_proto_Netdev_LinkDuplex = 13,

} sysinfo_proto_Netdev;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PublishChange
#define ZZ_EXPORT_sysinfo_proto_PublishChange
typedef enum {
    sysinfo_proto_PublishChange_Supersede = 1,
    sysinfo_proto_PublishChange_Alias = 2,

} sysinfo_proto_PublishChange;

#endif
#ifndef ZZ_EXPORT_protonerf_FieldType
#define ZZ_EXPORT_protonerf_FieldType
typedef enum {
    protonerf_FieldType_Skip = 0,
    protonerf_FieldType_Int32 = 1,
    protonerf_FieldType_Int64 = 2,
    protonerf_FieldType_Uint32 = 3,
    protonerf_FieldType_Uint64 = 4,
    protonerf_FieldType_Sint32 = 5,
    protonerf_FieldType_Sint64 = 6,
    protonerf_FieldType_Bool = 7,
    protonerf_FieldType_Enum = 8,
    protonerf_FieldType_Fixed64 = 9,
    protonerf_FieldType_Sfixed64 = 10,
    protonerf_FieldType_Double = 11,
    protonerf_FieldType_String = 12,
    protonerf_FieldType_Bytes = 13,
    protonerf_FieldType_Message = 14,
    protonerf_FieldType_Repeated = 15,
    protonerf_FieldType_Fixed32 = 16,
    protonerf_FieldType_Sfixed32 = 17,
    protonerf_FieldType_Float = 18,

} protonerf_FieldType;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PublishChangeTypes
#define ZZ_EXPORT_sysinfo_proto_PublishChangeTypes
protonerf_FieldType sysinfo_proto_PublishChangeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConnectRequest
#define ZZ_EXPORT_sysinfo_proto_ConnectRequest
typedef enum {
    sysinfo_proto_ConnectRequest_Target = 1,
    sysinfo_proto_ConnectRequest_Timestamp = 2,
    sysinfo_proto_ConnectRequest_Handshake = 3,
    sysinfo_proto_ConnectRequest_Paths = 4,
    sysinfo_proto_ConnectRequest_Principal = 5,
    sysinfo_proto_ConnectRequest_Timeout = 6,
    sysinfo_proto_ConnectRequest_TargetType = 7,

} sysinfo_proto_ConnectRequest;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Path
#define ZZ_EXPORT_sysinfo_proto_Path
typedef enum {
    sysinfo_proto_Path_Ipaddr = 1,
    sysinfo_proto_Path_Category = 2,

} sysinfo_proto_Path;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NoneTypes
#define ZZ_EXPORT_sysinfo_proto_NoneTypes
protonerf_FieldType sysinfo_proto_NoneTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensors
#define ZZ_EXPORT_sysinfo_proto_Sensors
typedef enum {
    sysinfo_proto_Sensors_Sensors = 1,

} sysinfo_proto_Sensors;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Satellite
#define ZZ_EXPORT_sysinfo_proto_Satellite
typedef enum {
    sysinfo_proto_Satellite_Constellation = 1,
    sysinfo_proto_Satellite_Prn = 2,
    sysinfo_proto_Satellite_Elevation = 3,
    sysinfo_proto_Satellite_Azimuth = 4,
    sysinfo_proto_Satellite_Snr = 5,
    sysinfo_proto_Satellite_Fix = 6,

} sysinfo_proto_Satellite;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SubscribeChange
#define ZZ_EXPORT_sysinfo_proto_SubscribeChange
typedef enum {
    sysinfo_proto_SubscribeChange_Publish = 1,
    sysinfo_proto_SubscribeChange_Unpublish = 2,
    sysinfo_proto_SubscribeChange_Supersede = 3,

} sysinfo_proto_SubscribeChange;

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Arp
#define ZZ_EXPORT_sysinfo_proto_Arp
typedef enum {
    sysinfo_proto_Arp_Ip = 1,
    sysinfo_proto_Arp_Hw = 2,
    sysinfo_proto_Arp_Mac = 3,
    sysinfo_proto_Arp_Dev = 4,
    sysinfo_proto_Arp_Value = 5,
    sysinfo_proto_Arp_Null = 6,

} sysinfo_proto_Arp;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Netdev__Duplex
#define ZZ_EXPORT_sysinfo_proto_Netdev__Duplex
typedef enum {
    sysinfo_proto_Netdev__Duplex_Invalid = 0,
    sysinfo_proto_Netdev__Duplex_Half = 1,
    sysinfo_proto_Netdev__Duplex_Full = 2,

} sysinfo_proto_Netdev__Duplex;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Confirmation
#define ZZ_EXPORT_sysinfo_proto_Confirmation
typedef enum {
    sysinfo_proto_Confirmation_Ok = 1,
    sysinfo_proto_Confirmation_Error = 2,

} sysinfo_proto_Confirmation;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Location
#define ZZ_EXPORT_sysinfo_proto_Location
typedef enum {
    sysinfo_proto_Location_Latitude = 1,
    sysinfo_proto_Location_Longitude = 2,
    sysinfo_proto_Location_Altitude = 3,
    sysinfo_proto_Location_Fix = 4,
    sysinfo_proto_Location_Accuracity = 5,
    sysinfo_proto_Location_Satellites = 6,
    sysinfo_proto_Location_Velocity = 7,

} sysinfo_proto_Location;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LocationTypes
#define ZZ_EXPORT_sysinfo_proto_LocationTypes
protonerf_FieldType sysinfo_proto_LocationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensor
#define ZZ_EXPORT_sysinfo_proto_Sensor
typedef enum {
    sysinfo_proto_Sensor_Name = 1,
    sysinfo_proto_Sensor_Vtype = 2,
    sysinfo_proto_Sensor_Value = 3,

} sysinfo_proto_Sensor;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SensorTypes
#define ZZ_EXPORT_sysinfo_proto_SensorTypes
protonerf_FieldType sysinfo_proto_SensorTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Filter
#define ZZ_EXPORT_sysinfo_proto_Filter
typedef enum {
    sysinfo_proto_Filter_Role = 1,

} sysinfo_proto_Filter;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FilterTypes
#define ZZ_EXPORT_sysinfo_proto_FilterTypes
protonerf_FieldType sysinfo_proto_FilterTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SwitchPort
#define ZZ_EXPORT_sysinfo_proto_SwitchPort
typedef enum {
    sysinfo_proto_SwitchPort_Port = 1,
    sysinfo_proto_SwitchPort_Link = 2,
    sysinfo_proto_SwitchPort_Speed = 3,
    sysinfo_proto_SwitchPort_Network = 4,
    sysinfo_proto_SwitchPort_Device = 5,
    sysinfo_proto_SwitchPort_None = 6,

} sysinfo_proto_SwitchPort;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Claim
#define ZZ_EXPORT_sysinfo_proto_Claim
typedef enum {
    sysinfo_proto_Claim_Opt = 1,
    sysinfo_proto_Claim_One = 2,
    sysinfo_proto_Claim_All = 3,
    sysinfo_proto_Claim_Revoker = 4,

} sysinfo_proto_Claim;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Satellite__Constellation
#define ZZ_EXPORT_sysinfo_proto_Satellite__Constellation
typedef enum {
    sysinfo_proto_Satellite__Constellation_Unknown = 0,
    sysinfo_proto_Satellite__Constellation_Galileo = 1,
    sysinfo_proto_Satellite__Constellation_Gps = 2,
    sysinfo_proto_Satellite__Constellation_Glonass = 3,

} sysinfo_proto_Satellite__Constellation;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LocationAccuracity
#define ZZ_EXPORT_sysinfo_proto_LocationAccuracity
typedef enum {
    sysinfo_proto_LocationAccuracity_Hdop = 1,
    sysinfo_proto_LocationAccuracity_Vdop = 2,
    sysinfo_proto_LocationAccuracity_Pdop = 3,

} sysinfo_proto_LocationAccuracity;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Switch
#define ZZ_EXPORT_sysinfo_proto_Switch
typedef enum {
    sysinfo_proto_Switch_Name = 1,
    sysinfo_proto_Switch_Ports = 2,

} sysinfo_proto_Switch;

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Uname
#define ZZ_EXPORT_sysinfo_proto_Uname
typedef enum {
    sysinfo_proto_Uname_Sysname = 1,
    sysinfo_proto_Uname_Nodename = 2,
    sysinfo_proto_Uname_Release = 3,
    sysinfo_proto_Uname_Version = 4,
    sysinfo_proto_Uname_Machine = 5,

} sysinfo_proto_Uname;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Unpublish
#define ZZ_EXPORT_sysinfo_proto_Unpublish
typedef enum {
    sysinfo_proto_Unpublish_Identity = 1,

} sysinfo_proto_Unpublish;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InnerTraceRequest
#define ZZ_EXPORT_sysinfo_proto_InnerTraceRequest
typedef enum {
    sysinfo_proto_InnerTraceRequest_Invalid = 1,
    sysinfo_proto_InnerTraceRequest_Ping = 2,

} sysinfo_proto_InnerTraceRequest;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InnerTraceRequestTypes
#define ZZ_EXPORT_sysinfo_proto_InnerTraceRequestTypes
protonerf_FieldType sysinfo_proto_InnerTraceRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_WifiStation
#define ZZ_EXPORT_sysinfo_proto_WifiStation
typedef enum {
    sysinfo_proto_WifiStation_Address = 1,
    sysinfo_proto_WifiStation_Inactive = 2,
    sysinfo_proto_WifiStation_RxBytes = 3,
    sysinfo_proto_WifiStation_RxPackets = 4,
    sysinfo_proto_WifiStation_TxBytes = 5,
    sysinfo_proto_WifiStation_TxPackets = 6,
    sysinfo_proto_WifiStation_TxRetries = 7,
    sysinfo_proto_WifiStation_TxFailed = 8,
    sysinfo_proto_WifiStation_BeaconLoss = 9,
    sysinfo_proto_WifiStation_BeaconRx = 10,
    sysinfo_proto_WifiStation_RxDropMisc = 11,
    sysinfo_proto_WifiStation_Signal = 12,
    sysinfo_proto_WifiStation_SignalAvg = 13,
    sysinfo_proto_WifiStation_BeaconSignalAvg = 14,
    sysinfo_proto_WifiStation_TxBitrate = 15,
    sysinfo_proto_WifiStation_RxBitrate = 16,
    sysinfo_proto_WifiStation_RxDuration = 17,
    sysinfo_proto_WifiStation_Expected = 18,
    sysinfo_proto_WifiStation_Authorized = 19,
    sysinfo_proto_WifiStation_Authenticated = 20,
    sysinfo_proto_WifiStation_Associated = 21,
    sysinfo_proto_WifiStation_Preamble = 22,
    sysinfo_proto_WifiStation_Wmm = 23,
    sysinfo_proto_WifiStation_Mfp = 24,
    sysinfo_proto_WifiStation_Tdls = 25,
    sysinfo_proto_WifiStation_Dtim = 26,
    sysinfo_proto_WifiStation_BeaconInterval = 27,
    sysinfo_proto_WifiStation_ShortPreamble = 28,
    sysinfo_proto_WifiStation_ShortSlotTime = 29,
    sysinfo_proto_WifiStation_ConnectedTime = 30,

} sysinfo_proto_WifiStation;

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterConfig
#define ZZ_EXPORT_sysinfo_proto_ClusterConfig
typedef enum {
    sysinfo_proto_ClusterConfig_Shards = 1,
    sysinfo_proto_ClusterConfig_ExceptionalRoutes = 2,
    sysinfo_proto_ClusterConfig_Epoch = 3,
    sysinfo_proto_ClusterConfig_DefaultShadowPublisherLimit = 4,
    sysinfo_proto_ClusterConfig_DefaultShadowTrafficLimit32 = 5,

} sysinfo_proto_ClusterConfig;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_UnameTypes
#define ZZ_EXPORT_sysinfo_proto_UnameTypes
protonerf_FieldType sysinfo_proto_UnameTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Mem
#define ZZ_EXPORT_sysinfo_proto_Mem
typedef enum {
    sysinfo_proto_Mem_Total = 1,
    sysinfo_proto_Mem_Free = 2,
    sysinfo_proto_Mem_Available = 3,

} sysinfo_proto_Mem;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PeerConnectRequest
#define ZZ_EXPORT_sysinfo_proto_PeerConnectRequest
typedef enum {
    sysinfo_proto_PeerConnectRequest_Identity = 1,
    sysinfo_proto_PeerConnectRequest_Timestamp = 2,
    sysinfo_proto_PeerConnectRequest_Handshake = 3,
    sysinfo_proto_PeerConnectRequest_Route = 4,
    sysinfo_proto_PeerConnectRequest_Paths = 5,

} sysinfo_proto_PeerConnectRequest;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PeerConnectRequestTypes
#define ZZ_EXPORT_sysinfo_proto_PeerConnectRequestTypes
protonerf_FieldType sysinfo_proto_PeerConnectRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConnectResponse
#define ZZ_EXPORT_sysinfo_proto_ConnectResponse
typedef enum {
    sysinfo_proto_ConnectResponse_Ok = 1,
    sysinfo_proto_ConnectResponse_Handshake = 2,
    sysinfo_proto_ConnectResponse_Route = 3,
    sysinfo_proto_ConnectResponse_Paths = 4,
    sysinfo_proto_ConnectResponse_Error = 5,

} sysinfo_proto_ConnectResponse;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetSurvey
#define ZZ_EXPORT_sysinfo_proto_NetSurvey
typedef enum {
    sysinfo_proto_NetSurvey_Wifi = 1,
    sysinfo_proto_NetSurvey_Dhcp = 2,
    sysinfo_proto_NetSurvey_Arp = 3,
    sysinfo_proto_NetSurvey_Routes = 4,

} sysinfo_proto_NetSurvey;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_DiscoveryResponse
#define ZZ_EXPORT_sysinfo_proto_DiscoveryResponse
typedef enum {
    sysinfo_proto_DiscoveryResponse_CarrierRevision = 1,
    sysinfo_proto_DiscoveryResponse_CarrierBuildId = 2,
    sysinfo_proto_DiscoveryResponse_Application = 3,
    sysinfo_proto_DiscoveryResponse_ApplicationVersion = 4,
    sysinfo_proto_DiscoveryResponse_Paths = 5,

} sysinfo_proto_DiscoveryResponse;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Arp__HwType
#define ZZ_EXPORT_sysinfo_proto_Arp__HwType
typedef enum {
    sysinfo_proto_Arp__HwType_Unknown = 0,
    sysinfo_proto_Arp__HwType_Ethernet = 1,

} sysinfo_proto_Arp__HwType;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Load
#define ZZ_EXPORT_sysinfo_proto_Load
typedef enum {
    sysinfo_proto_Load_Avg1 = 1,
    sysinfo_proto_Load_Avg5 = 2,
    sysinfo_proto_Load_Avg15 = 3,
    sysinfo_proto_Load_Clock = 4,
    sysinfo_proto_Load_Uptime = 5,
    sysinfo_proto_Load_Idletime = 6,
    sysinfo_proto_Load_ProcActive = 7,
    sysinfo_proto_Load_ProcTotal = 8,
    sysinfo_proto_Load_Cores = 9,
    sysinfo_proto_Load_Threads = 10,

} sysinfo_proto_Load;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ProtoHeader
#define ZZ_EXPORT_sysinfo_proto_ProtoHeader
typedef enum {
    sysinfo_proto_ProtoHeader_Len = 1,

} sysinfo_proto_ProtoHeader;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ProtoHeaderTypes
#define ZZ_EXPORT_sysinfo_proto_ProtoHeaderTypes
protonerf_FieldType sysinfo_proto_ProtoHeaderTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ExceptionalRoute
#define ZZ_EXPORT_sysinfo_proto_ExceptionalRoute
typedef enum {
    sysinfo_proto_ExceptionalRoute_Identity = 1,
    sysinfo_proto_ExceptionalRoute_This = 2,
    sysinfo_proto_ExceptionalRoute_Other = 3,
    sysinfo_proto_ExceptionalRoute_Blocked = 4,

} sysinfo_proto_ExceptionalRoute;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Publish
#define ZZ_EXPORT_sysinfo_proto_Publish
typedef enum {
    sysinfo_proto_Publish_Identity = 1,
    sysinfo_proto_Publish_Xaddr = 2,

} sysinfo_proto_Publish;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Firmware
#define ZZ_EXPORT_sysinfo_proto_Firmware
typedef enum {
    sysinfo_proto_Firmware_Board = 1,
    sysinfo_proto_Firmware_Distro = 2,
    sysinfo_proto_Firmware_Release = 3,
    sysinfo_proto_Firmware_Revision = 4,
    sysinfo_proto_Firmware_Builder = 5,
    sysinfo_proto_Firmware_Finger = 6,
    sysinfo_proto_Firmware_AndroidApiLevel = 7,

} sysinfo_proto_Firmware;

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationGetTypes
#define ZZ_EXPORT_sysinfo_proto_AuthorizationGetTypes
protonerf_FieldType sysinfo_proto_AuthorizationGetTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InteractiveAuth
#define ZZ_EXPORT_sysinfo_proto_InteractiveAuth
typedef enum {
    sysinfo_proto_InteractiveAuth_Otp = 1,

} sysinfo_proto_InteractiveAuth;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InteractiveAuthTypes
#define ZZ_EXPORT_sysinfo_proto_InteractiveAuthTypes
protonerf_FieldType sysinfo_proto_InteractiveAuthTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FileSystem
#define ZZ_EXPORT_sysinfo_proto_FileSystem
typedef enum {
    sysinfo_proto_FileSystem_Path = 1,
    sysinfo_proto_FileSystem_Blocksize = 2,
    sysinfo_proto_FileSystem_Total = 3,
    sysinfo_proto_FileSystem_Free = 4,

} sysinfo_proto_FileSystem;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LocationVelocity
#define ZZ_EXPORT_sysinfo_proto_LocationVelocity
typedef enum {
    sysinfo_proto_LocationVelocity_Course = 1,
    sysinfo_proto_LocationVelocity_Speed = 2,

} sysinfo_proto_LocationVelocity;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetworkJoin
#define ZZ_EXPORT_sysinfo_proto_NetworkJoin
typedef enum {
    sysinfo_proto_NetworkJoin_Secret = 1,

} sysinfo_proto_NetworkJoin;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetworkJoinTypes
#define ZZ_EXPORT_sysinfo_proto_NetworkJoinTypes
protonerf_FieldType sysinfo_proto_NetworkJoinTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sysinfo
#define ZZ_EXPORT_sysinfo_proto_Sysinfo
typedef enum {
    sysinfo_proto_Sysinfo_Uname = 1,
    sysinfo_proto_Sysinfo_Mem = 2,
    sysinfo_proto_Sysinfo_Load = 3,
    sysinfo_proto_Sysinfo_Firmware = 4,
    sysinfo_proto_Sysinfo_Fs = 5,
    sysinfo_proto_Sysinfo_Net = 6,
    sysinfo_proto_Sysinfo_Switch = 7,
    sysinfo_proto_Sysinfo_BoardId = 8,
    sysinfo_proto_Sysinfo_CarrierBuildId = 9,
    sysinfo_proto_Sysinfo_Belltower = 10,
    sysinfo_proto_Sysinfo_Bootloader = 11,

} sysinfo_proto_Sysinfo;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationAdd
#define ZZ_EXPORT_sysinfo_proto_AuthorizationAdd
typedef enum {
    sysinfo_proto_AuthorizationAdd_Identity = 1,
    sysinfo_proto_AuthorizationAdd_Path = 2,

} sysinfo_proto_AuthorizationAdd;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationAddTypes
#define ZZ_EXPORT_sysinfo_proto_AuthorizationAddTypes
protonerf_FieldType sysinfo_proto_AuthorizationAddTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PathTypes
#define ZZ_EXPORT_sysinfo_proto_PathTypes
protonerf_FieldType sysinfo_proto_PathTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PeerConnectResponse
#define ZZ_EXPORT_sysinfo_proto_PeerConnectResponse
typedef enum {
    sysinfo_proto_PeerConnectResponse_Ok = 1,
    sysinfo_proto_PeerConnectResponse_Handshake = 2,
    sysinfo_proto_PeerConnectResponse_Paths = 3,
    sysinfo_proto_PeerConnectResponse_Error = 4,

} sysinfo_proto_PeerConnectResponse;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClaimOne
#define ZZ_EXPORT_sysinfo_proto_ClaimOne
typedef enum {
    sysinfo_proto_ClaimOne_Target = 1,
    sysinfo_proto_ClaimOne_Resources = 2,

} sysinfo_proto_ClaimOne;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PublishRequest
#define ZZ_EXPORT_sysinfo_proto_PublishRequest
typedef enum {
    sysinfo_proto_PublishRequest_Unused = 1,
    sysinfo_proto_PublishRequest_Network = 2,
    sysinfo_proto_PublishRequest_ReceiveAlias = 3,

} sysinfo_proto_PublishRequest;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetAddress
#define ZZ_EXPORT_sysinfo_proto_NetAddress
typedef enum {
    sysinfo_proto_NetAddress_Addr = 1,
    sysinfo_proto_NetAddress_Mask = 2,
    sysinfo_proto_NetAddress_Broadcast = 3,

} sysinfo_proto_NetAddress;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceShadow
#define ZZ_EXPORT_sysinfo_proto_TraceShadow
typedef enum {
    sysinfo_proto_TraceShadow_Xaddress = 1,
    sysinfo_proto_TraceShadow_PublisherCount = 2,
    sysinfo_proto_TraceShadow_PublisherSoftLimit = 3,
    sysinfo_proto_TraceShadow_PublisherHardLimit = 4,
    sysinfo_proto_TraceShadow_TrafficEpoch64 = 5,
    sysinfo_proto_TraceShadow_TrafficLimit64 = 6,

} sysinfo_proto_TraceShadow;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_WifiInterface
#define ZZ_EXPORT_sysinfo_proto_WifiInterface
typedef enum {
    sysinfo_proto_WifiInterface_Name = 1,
    sysinfo_proto_WifiInterface_Typ = 2,
    sysinfo_proto_WifiInterface_Phy = 3,
    sysinfo_proto_WifiInterface_Ssid = 4,
    sysinfo_proto_WifiInterface_Channel = 5,
    sysinfo_proto_WifiInterface_Txpower = 6,
    sysinfo_proto_WifiInterface_Stations = 7,

} sysinfo_proto_WifiInterface;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PeerConnectResponseTypes
#define ZZ_EXPORT_sysinfo_proto_PeerConnectResponseTypes
protonerf_FieldType sysinfo_proto_PeerConnectResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClaimOneTypes
#define ZZ_EXPORT_sysinfo_proto_ClaimOneTypes
protonerf_FieldType sysinfo_proto_ClaimOneTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_DhcpLease
#define ZZ_EXPORT_sysinfo_proto_DhcpLease
typedef enum {
    sysinfo_proto_DhcpLease_Ts = 1,
    sysinfo_proto_DhcpLease_Mac = 2,
    sysinfo_proto_DhcpLease_Ip = 3,
    sysinfo_proto_DhcpLease_Name = 4,

} sysinfo_proto_DhcpLease;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationList
#define ZZ_EXPORT_sysinfo_proto_AuthorizationList
typedef enum {
    sysinfo_proto_AuthorizationList_A = 1,

} sysinfo_proto_AuthorizationList;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SubscribeRequest
#define ZZ_EXPORT_sysinfo_proto_SubscribeRequest
typedef enum {
    sysinfo_proto_SubscribeRequest_Shadow = 1,
    sysinfo_proto_SubscribeRequest_Filter = 2,
    sysinfo_proto_SubscribeRequest_GroupKey = 3,
    sysinfo_proto_SubscribeRequest_GroupShard = 4,
    sysinfo_proto_SubscribeRequest_ShardWeight = 5,

} sysinfo_proto_SubscribeRequest;

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Certificate
#define ZZ_EXPORT_sysinfo_proto_Certificate
typedef enum {
    sysinfo_proto_Certificate_LastValidEpoch = 1,
    sysinfo_proto_Certificate_Identity = 2,
    sysinfo_proto_Certificate_Authority = 3,
    sysinfo_proto_Certificate_Serial = 4,
    sysinfo_proto_Certificate_Claims = 5,

} sysinfo_proto_Certificate;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Location__Fix
#define ZZ_EXPORT_sysinfo_proto_Location__Fix
typedef enum {
    sysinfo_proto_Location__Fix_None = 0,
    sysinfo_proto_Location__Fix_Gps = 1,
    sysinfo_proto_Location__Fix_DGps = 2,
    sysinfo_proto_Location__Fix_Pps = 3,
    sysinfo_proto_Location__Fix_Rtk = 4,
    sysinfo_proto_Location__Fix_FloatRtk = 5,
    sysinfo_proto_Location__Fix_Estimated = 6,
    sysinfo_proto_Location__Fix_Manual = 7,
    sysinfo_proto_Location__Fix_Simulation = 8,

} sysinfo_proto_Location__Fix;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetAddressTypes
#define ZZ_EXPORT_sysinfo_proto_NetAddressTypes
protonerf_FieldType sysinfo_proto_NetAddressTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterShard
#define ZZ_EXPORT_sysinfo_proto_ClusterShard
typedef enum {
    sysinfo_proto_ClusterShard_This = 1,
    sysinfo_proto_ClusterShard_Other = 2,

} sysinfo_proto_ClusterShard;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterShardTypes
#define ZZ_EXPORT_sysinfo_proto_ClusterShardTypes
protonerf_FieldType sysinfo_proto_ClusterShardTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterState
#define ZZ_EXPORT_sysinfo_proto_ClusterState
typedef enum {
    sysinfo_proto_ClusterState_Config = 1,

} sysinfo_proto_ClusterState;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_EmptyTypes
#define ZZ_EXPORT_sysinfo_proto_EmptyTypes
protonerf_FieldType sysinfo_proto_EmptyTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PublishRequestTypes
#define ZZ_EXPORT_sysinfo_proto_PublishRequestTypes
protonerf_FieldType sysinfo_proto_PublishRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Bootloader
#define ZZ_EXPORT_sysinfo_proto_Bootloader
typedef enum {
    sysinfo_proto_Bootloader_ActiveSide = 1,
    sysinfo_proto_Bootloader_BootReason = 2,

} sysinfo_proto_Bootloader;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_BootloaderTypes
#define ZZ_EXPORT_sysinfo_proto_BootloaderTypes
protonerf_FieldType sysinfo_proto_BootloaderTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InnerTraceResponse
#define ZZ_EXPORT_sysinfo_proto_InnerTraceResponse
typedef enum {
    sysinfo_proto_InnerTraceResponse_Invalid = 1,
    sysinfo_proto_InnerTraceResponse_Pong = 2,

} sysinfo_proto_InnerTraceResponse;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceResponse
#define ZZ_EXPORT_sysinfo_proto_TraceResponse
typedef enum {
    sysinfo_proto_TraceResponse_Publishing = 1,
    sysinfo_proto_TraceResponse_Epoch = 2,
    sysinfo_proto_TraceResponse_RxBytes32 = 3,
    sysinfo_proto_TraceResponse_TxBytes32 = 4,
    sysinfo_proto_TraceResponse_LastSeen = 5,
    sysinfo_proto_TraceResponse_FirstSeen = 6,
    sysinfo_proto_TraceResponse_Allocation = 7,
    sysinfo_proto_TraceResponse_Brokerip = 8,
    sysinfo_proto_TraceResponse_PktsSent = 9,
    sysinfo_proto_TraceResponse_PktsLost = 10,
    sysinfo_proto_TraceResponse_Rtt = 11,
    sysinfo_proto_TraceResponse_Alias = 13,

} sysinfo_proto_TraceResponse;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Belltower
#define ZZ_EXPORT_sysinfo_proto_Belltower
typedef enum {
    sysinfo_proto_Belltower_Current = 1,
    sysinfo_proto_Belltower_Previous = 2,

} sysinfo_proto_Belltower;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetRoute
#define ZZ_EXPORT_sysinfo_proto_NetRoute
typedef enum {
    sysinfo_proto_NetRoute_Destination = 1,
    sysinfo_proto_NetRoute_Gateway = 2,
    sysinfo_proto_NetRoute_Source = 3,

} sysinfo_proto_NetRoute;

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_DhcpLeaseTypes
#define ZZ_EXPORT_sysinfo_proto_DhcpLeaseTypes
protonerf_FieldType sysinfo_proto_DhcpLeaseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_CertificateTypes
#define ZZ_EXPORT_sysinfo_proto_CertificateTypes
protonerf_FieldType sysinfo_proto_CertificateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Authorization
#define ZZ_EXPORT_sysinfo_proto_Authorization
typedef enum {
    sysinfo_proto_Authorization_Identity = 1,
    sysinfo_proto_Authorization_Resource = 2,

} sysinfo_proto_Authorization;

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_GenesisCurrent
#define ZZ_EXPORT_sysinfo_proto_GenesisCurrent
typedef enum {
    sysinfo_proto_GenesisCurrent_Sha256 = 1,
    sysinfo_proto_GenesisCurrent_Commit = 2,
    sysinfo_proto_GenesisCurrent_Data = 3,
    sysinfo_proto_GenesisCurrent_Stable = 4,

} sysinfo_proto_GenesisCurrent;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_CertificateRequest
#define ZZ_EXPORT_sysinfo_proto_CertificateRequest
typedef enum {
    sysinfo_proto_CertificateRequest_LastValidEpoch = 1,
    sysinfo_proto_CertificateRequest_Identity = 2,
    sysinfo_proto_CertificateRequest_Claims = 3,

} sysinfo_proto_CertificateRequest;

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_MemTypes
#define ZZ_EXPORT_sysinfo_proto_MemTypes
protonerf_FieldType sysinfo_proto_MemTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Sensor__ValueType
#define ZZ_EXPORT_sysinfo_proto_Sensor__ValueType
typedef enum {
    sysinfo_proto_Sensor__ValueType_None = 0,
    sysinfo_proto_Sensor__ValueType_MilliCelsius = 1,

} sysinfo_proto_Sensor__ValueType;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SysinfoTypes
#define ZZ_EXPORT_sysinfo_proto_SysinfoTypes
protonerf_FieldType sysinfo_proto_SysinfoTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_GenesisUpdate
#define ZZ_EXPORT_sysinfo_proto_GenesisUpdate
typedef enum {
    sysinfo_proto_GenesisUpdate_Sha256 = 1,
    sysinfo_proto_GenesisUpdate_PreviousSha256 = 2,
    sysinfo_proto_GenesisUpdate_Commit = 3,
    sysinfo_proto_GenesisUpdate_Data = 4,

} sysinfo_proto_GenesisUpdate;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetworkGetResult
#define ZZ_EXPORT_sysinfo_proto_NetworkGetResult
typedef enum {
    sysinfo_proto_NetworkGetResult_Address = 2,

} sysinfo_proto_NetworkGetResult;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetworkGetTypes
#define ZZ_EXPORT_sysinfo_proto_NetworkGetTypes
protonerf_FieldType sysinfo_proto_NetworkGetTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetRouteTypes
#define ZZ_EXPORT_sysinfo_proto_NetRouteTypes
protonerf_FieldType sysinfo_proto_NetRouteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClaimAll
#define ZZ_EXPORT_sysinfo_proto_ClaimAll
typedef enum {
    sysinfo_proto_ClaimAll_Shadow = 1,
    sysinfo_proto_ClaimAll_Resources = 2,

} sysinfo_proto_ClaimAll;

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FilterByRole
#define ZZ_EXPORT_sysinfo_proto_FilterByRole
typedef enum {
    sysinfo_proto_FilterByRole_Roles = 1,

} sysinfo_proto_FilterByRole;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FilterByRoleTypes
#define ZZ_EXPORT_sysinfo_proto_FilterByRoleTypes
protonerf_FieldType sysinfo_proto_FilterByRoleTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SensorsTypes
#define ZZ_EXPORT_sysinfo_proto_SensorsTypes
protonerf_FieldType sysinfo_proto_SensorsTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_InnerTraceResponseTypes
#define ZZ_EXPORT_sysinfo_proto_InnerTraceResponseTypes
protonerf_FieldType sysinfo_proto_InnerTraceResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LocationVelocityTypes
#define ZZ_EXPORT_sysinfo_proto_LocationVelocityTypes
protonerf_FieldType sysinfo_proto_LocationVelocityTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetworkGetResultTypes
#define ZZ_EXPORT_sysinfo_proto_NetworkGetResultTypes
protonerf_FieldType sysinfo_proto_NetworkGetResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceRequest
#define ZZ_EXPORT_sysinfo_proto_TraceRequest
typedef enum {
    sysinfo_proto_TraceRequest_Target = 1,

} sysinfo_proto_TraceRequest;

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LocationAccuracityTypes
#define ZZ_EXPORT_sysinfo_proto_LocationAccuracityTypes
protonerf_FieldType sysinfo_proto_LocationAccuracityTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_WifiInterfaceTypes
#define ZZ_EXPORT_sysinfo_proto_WifiInterfaceTypes
protonerf_FieldType sysinfo_proto_WifiInterfaceTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_UnpublishTypes
#define ZZ_EXPORT_sysinfo_proto_UnpublishTypes
protonerf_FieldType sysinfo_proto_UnpublishTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SwitchPortTypes
#define ZZ_EXPORT_sysinfo_proto_SwitchPortTypes
protonerf_FieldType sysinfo_proto_SwitchPortTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Revoker
#define ZZ_EXPORT_sysinfo_proto_Revoker
typedef enum {
    sysinfo_proto_Revoker_Identity = 1,

} sysinfo_proto_Revoker;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_RevokerTypes
#define ZZ_EXPORT_sysinfo_proto_RevokerTypes
protonerf_FieldType sysinfo_proto_RevokerTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_CertificateRequestTypes
#define ZZ_EXPORT_sysinfo_proto_CertificateRequestTypes
protonerf_FieldType sysinfo_proto_CertificateRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetSurveyTypes
#define ZZ_EXPORT_sysinfo_proto_NetSurveyTypes
protonerf_FieldType sysinfo_proto_NetSurveyTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConfigResult
#define ZZ_EXPORT_sysinfo_proto_ConfigResult
typedef enum {
    sysinfo_proto_ConfigResult_Ok = 1,
    sysinfo_proto_ConfigResult_Error = 2,

} sysinfo_proto_ConfigResult;

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_NetdevTypes
#define ZZ_EXPORT_sysinfo_proto_NetdevTypes
protonerf_FieldType sysinfo_proto_NetdevTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_GenesisUpdateTypes
#define ZZ_EXPORT_sysinfo_proto_GenesisUpdateTypes
protonerf_FieldType sysinfo_proto_GenesisUpdateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_MoveInstruction
#define ZZ_EXPORT_sysinfo_proto_MoveInstruction
typedef enum {
    sysinfo_proto_MoveInstruction_Ipaddr = 1,
    sysinfo_proto_MoveInstruction_Xaddr = 2,

} sysinfo_proto_MoveInstruction;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_MoveInstructionTypes
#define ZZ_EXPORT_sysinfo_proto_MoveInstructionTypes
protonerf_FieldType sysinfo_proto_MoveInstructionTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FileSystemTypes
#define ZZ_EXPORT_sysinfo_proto_FileSystemTypes
protonerf_FieldType sysinfo_proto_FileSystemTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterStateTypes
#define ZZ_EXPORT_sysinfo_proto_ClusterStateTypes
protonerf_FieldType sysinfo_proto_ClusterStateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConfigResultTypes
#define ZZ_EXPORT_sysinfo_proto_ConfigResultTypes
protonerf_FieldType sysinfo_proto_ConfigResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceShadowTypes
#define ZZ_EXPORT_sysinfo_proto_TraceShadowTypes
protonerf_FieldType sysinfo_proto_TraceShadowTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthListResult
#define ZZ_EXPORT_sysinfo_proto_AuthListResult
typedef enum {
    sysinfo_proto_AuthListResult_Auth = 1,

} sysinfo_proto_AuthListResult;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Alias
#define ZZ_EXPORT_sysinfo_proto_Alias
typedef enum {
    sysinfo_proto_Alias_Alias = 2,

} sysinfo_proto_Alias;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AliasTypes
#define ZZ_EXPORT_sysinfo_proto_AliasTypes
protonerf_FieldType sysinfo_proto_AliasTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationDel
#define ZZ_EXPORT_sysinfo_proto_AuthorizationDel
typedef enum {
    sysinfo_proto_AuthorizationDel_Identity = 1,

} sysinfo_proto_AuthorizationDel;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationDelTypes
#define ZZ_EXPORT_sysinfo_proto_AuthorizationDelTypes
protonerf_FieldType sysinfo_proto_AuthorizationDelTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ExceptionalRouteTypes
#define ZZ_EXPORT_sysinfo_proto_ExceptionalRouteTypes
protonerf_FieldType sysinfo_proto_ExceptionalRouteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_GenesisCurrentTypes
#define ZZ_EXPORT_sysinfo_proto_GenesisCurrentTypes
protonerf_FieldType sysinfo_proto_GenesisCurrentTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SubscribeChangeTypes
#define ZZ_EXPORT_sysinfo_proto_SubscribeChangeTypes
protonerf_FieldType sysinfo_proto_SubscribeChangeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthListResultTypes
#define ZZ_EXPORT_sysinfo_proto_AuthListResultTypes
protonerf_FieldType sysinfo_proto_AuthListResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationListTypes
#define ZZ_EXPORT_sysinfo_proto_AuthorizationListTypes
protonerf_FieldType sysinfo_proto_AuthorizationListTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SwitchTypes
#define ZZ_EXPORT_sysinfo_proto_SwitchTypes
protonerf_FieldType sysinfo_proto_SwitchTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_LoadTypes
#define ZZ_EXPORT_sysinfo_proto_LoadTypes
protonerf_FieldType sysinfo_proto_LoadTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_DiscoveryResponseTypes
#define ZZ_EXPORT_sysinfo_proto_DiscoveryResponseTypes
protonerf_FieldType sysinfo_proto_DiscoveryResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_WifiStationTypes
#define ZZ_EXPORT_sysinfo_proto_WifiStationTypes
protonerf_FieldType sysinfo_proto_WifiStationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SupersedeTypes
#define ZZ_EXPORT_sysinfo_proto_SupersedeTypes
protonerf_FieldType sysinfo_proto_SupersedeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClusterConfigTypes
#define ZZ_EXPORT_sysinfo_proto_ClusterConfigTypes
protonerf_FieldType sysinfo_proto_ClusterConfigTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceRequestTypes
#define ZZ_EXPORT_sysinfo_proto_TraceRequestTypes
protonerf_FieldType sysinfo_proto_TraceRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConnectRequest__TargetType
#define ZZ_EXPORT_sysinfo_proto_ConnectRequest__TargetType
typedef enum {
    sysinfo_proto_ConnectRequest__TargetType_Identity = 0,
    sysinfo_proto_ConnectRequest__TargetType_Alias = 1,

} sysinfo_proto_ConnectRequest__TargetType;

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_AuthorizationTypes
#define ZZ_EXPORT_sysinfo_proto_AuthorizationTypes
protonerf_FieldType sysinfo_proto_AuthorizationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClaimAllTypes
#define ZZ_EXPORT_sysinfo_proto_ClaimAllTypes
protonerf_FieldType sysinfo_proto_ClaimAllTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ClaimTypes
#define ZZ_EXPORT_sysinfo_proto_ClaimTypes
protonerf_FieldType sysinfo_proto_ClaimTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SatelliteTypes
#define ZZ_EXPORT_sysinfo_proto_SatelliteTypes
protonerf_FieldType sysinfo_proto_SatelliteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ArpTypes
#define ZZ_EXPORT_sysinfo_proto_ArpTypes
protonerf_FieldType sysinfo_proto_ArpTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_SubscribeRequestTypes
#define ZZ_EXPORT_sysinfo_proto_SubscribeRequestTypes
protonerf_FieldType sysinfo_proto_SubscribeRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_Path__Category
#define ZZ_EXPORT_sysinfo_proto_Path__Category
typedef enum {
    sysinfo_proto_Path__Category_Invalid = 0,
    sysinfo_proto_Path__Category_Local = 1,
    sysinfo_proto_Path__Category_Internet = 2,
    sysinfo_proto_Path__Category_BrokerOrigin = 3,

} sysinfo_proto_Path__Category;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConnectResponseTypes
#define ZZ_EXPORT_sysinfo_proto_ConnectResponseTypes
protonerf_FieldType sysinfo_proto_ConnectResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_FirmwareTypes
#define ZZ_EXPORT_sysinfo_proto_FirmwareTypes
protonerf_FieldType sysinfo_proto_FirmwareTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConfirmationTypes
#define ZZ_EXPORT_sysinfo_proto_ConfirmationTypes
protonerf_FieldType sysinfo_proto_ConfirmationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_BelltowerTypes
#define ZZ_EXPORT_sysinfo_proto_BelltowerTypes
protonerf_FieldType sysinfo_proto_BelltowerTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_TraceResponseTypes
#define ZZ_EXPORT_sysinfo_proto_TraceResponseTypes
protonerf_FieldType sysinfo_proto_TraceResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_PublishTypes
#define ZZ_EXPORT_sysinfo_proto_PublishTypes
protonerf_FieldType sysinfo_proto_PublishTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_sysinfo_proto_ConnectRequestTypes
#define ZZ_EXPORT_sysinfo_proto_ConnectRequestTypes
protonerf_FieldType sysinfo_proto_ConnectRequestTypes (uintptr_t const  index);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le64
#define ZZ_FORWARD_byteorder_to_le64
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_protonerf_write_varint
#define ZZ_FORWARD_protonerf_write_varint
#endif
#ifndef ZZ_FORWARD_protonerf_Invalid
#define ZZ_FORWARD_protonerf_Invalid
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_protonerf_encode_f64
#define ZZ_FORWARD_protonerf_encode_f64
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_protonerf_FieldType
#define ZZ_FORWARD_protonerf_FieldType
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes_start
#define ZZ_FORWARD_protonerf_encode_bytes_start
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le64
#define ZZ_EXPORT_byteorder_to_le64
uint64_t  static inline byteorder_to_le64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_protonerf_write_varint
#define ZZ_EXPORT_protonerf_write_varint
static void protonerf_write_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint32_t low, uint32_t high);

#endif
#ifndef ZZ_EXPORT_protonerf_Invalid
#define ZZ_EXPORT_protonerf_Invalid
extern const __attribute__ ((unused)) size_t protonerf_Invalid;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_protonerf_encode_f64
#define ZZ_EXPORT_protonerf_encode_f64
void protonerf_encode_f64 (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, double value);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_FieldType
#define ZZ_EXPORT_protonerf_FieldType
typedef enum {
    protonerf_FieldType_Skip = 0,
    protonerf_FieldType_Int32 = 1,
    protonerf_FieldType_Int64 = 2,
    protonerf_FieldType_Uint32 = 3,
    protonerf_FieldType_Uint64 = 4,
    protonerf_FieldType_Sint32 = 5,
    protonerf_FieldType_Sint64 = 6,
    protonerf_FieldType_Bool = 7,
    protonerf_FieldType_Enum = 8,
    protonerf_FieldType_Fixed64 = 9,
    protonerf_FieldType_Sfixed64 = 10,
    protonerf_FieldType_Double = 11,
    protonerf_FieldType_String = 12,
    protonerf_FieldType_Bytes = 13,
    protonerf_FieldType_Message = 14,
    protonerf_FieldType_Repeated = 15,
    protonerf_FieldType_Fixed32 = 16,
    protonerf_FieldType_Sfixed32 = 17,
    protonerf_FieldType_Float = 18,

} protonerf_FieldType;

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes_start
#define ZZ_EXPORT_protonerf_encode_bytes_start
void protonerf_encode_bytes_start (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_100
#define ZZ_FORWARD_err_Err_100
struct err_Err_100_t;
typedef struct err_Err_100_t err_Err_100;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_time_from_millis
#define ZZ_FORWARD_time_from_millis
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_100
#define ZZ_FORWARD_err_Err_100
struct err_Err_100_t;
typedef struct err_Err_100_t err_Err_100;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_time_from_millis
#define ZZ_EXPORT_time_from_millis
time_Time time_from_millis (uint64_t const  millis);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_100_100
#define ZZ_EXPORT_err_Err_100_100
struct err_Err_100_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [100];
}
;
size_t sizeof_err_Err_100();
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_carrier_router_Direction
#define ZZ_FORWARD_carrier_router_Direction
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_5
#define ZZ_FORWARD_buffer_Buffer_5
struct buffer_Buffer_5_t;
typedef struct buffer_Buffer_5_t buffer_Buffer_5;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_5
#define ZZ_FORWARD_buffer_Buffer_5
struct buffer_Buffer_5_t;
typedef struct buffer_Buffer_5_t buffer_Buffer_5;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_router_Disconnected
#define ZZ_FORWARD_carrier_router_Disconnected
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_carrier_publish_close_publish
#define ZZ_FORWARD_carrier_publish_close_publish
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_time_from_millis
#define ZZ_FORWARD_time_from_millis
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_router_OutOfOptions
#define ZZ_FORWARD_carrier_router_OutOfOptions
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_router_read_routing_key
#define ZZ_FORWARD_carrier_router_read_routing_key
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_byteorder_from_be64
#define ZZ_FORWARD_byteorder_from_be64
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_carrier_publish_stream_connect
#define ZZ_FORWARD_carrier_publish_stream_connect
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_router_read_routing_key
#define ZZ_FORWARD_carrier_router_read_routing_key
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_router_cleanup_dead_broker_route
#define ZZ_FORWARD_carrier_router_cleanup_dead_broker_route
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_responder_accept_insecure
#define ZZ_FORWARD_carrier_responder_accept_insecure
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_publish_stream_to_publish
#define ZZ_FORWARD_carrier_publish_stream_to_publish
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_publish_on_remote_open
#define ZZ_FORWARD_carrier_publish_on_remote_open
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_publish_publish
#define ZZ_FORWARD_carrier_publish_publish
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_carrier_router_Direction
#define ZZ_EXPORT_carrier_router_Direction
typedef enum {
    carrier_router_Direction_Initiator2Responder = 0,
    carrier_router_Direction_Responder2Initiator = 1,

} carrier_router_Direction;

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_5_5
#define ZZ_EXPORT_buffer_Buffer_5_5
struct buffer_Buffer_5_t {
   uintptr_t at ;
   char mem[5] ;
}
;
size_t sizeof_buffer_Buffer_5();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_100_100
#define ZZ_EXPORT_buffer_Buffer_100_100
struct buffer_Buffer_100_t {
   uintptr_t at ;
   char mem[100] ;
}
;
size_t sizeof_buffer_Buffer_100();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_Disconnected
#define ZZ_EXPORT_carrier_router_Disconnected
extern const __attribute__ ((unused)) size_t carrier_router_Disconnected;

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_publish_close_publish
#define ZZ_EXPORT_carrier_publish_close_publish
static void carrier_publish_close_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_time_from_millis
#define ZZ_EXPORT_time_from_millis
time_Time time_from_millis (uint64_t const  millis);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_router_OutOfOptions
#define ZZ_EXPORT_carrier_router_OutOfOptions
extern const __attribute__ ((unused)) size_t carrier_router_OutOfOptions;

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_router_read_routing_key
#define ZZ_EXPORT_carrier_router_read_routing_key
extern uint64_t carrier_router_read_routing_key (uint8_t const *  const  i, carrier_router_Direction*  const  direction);

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be64
#define ZZ_EXPORT_byteorder_from_be64
uint64_t  static inline byteorder_from_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_publish_stream_connect
#define ZZ_EXPORT_carrier_publish_stream_connect
static bool carrier_publish_stream_connect (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_router_read_routing_key
#define ZZ_EXPORT_carrier_router_read_routing_key
extern uint64_t carrier_router_read_routing_key (uint8_t const *  const  i, carrier_router_Direction*  const  direction);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_cleanup_dead_broker_route
#define ZZ_EXPORT_carrier_router_cleanup_dead_broker_route
static void carrier_router_cleanup_dead_broker_route (carrier_channel_Channel*  const  chan, uint64_t const  dead_route);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_responder_accept_insecure
#define ZZ_EXPORT_carrier_responder_accept_insecure
extern void carrier_responder_accept_insecure (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const *  const  store, uint64_t route, uint64_t const  timestamp, slice_mut_slice_MutSlice*  const  frame);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_publish_stream_to_publish
#define ZZ_EXPORT_carrier_publish_stream_to_publish
static bool carrier_publish_stream_to_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_publish_on_remote_open
#define ZZ_EXPORT_carrier_publish_on_remote_open
extern void carrier_publish_on_remote_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_publish_publish
#define ZZ_EXPORT_carrier_publish_publish
void carrier_publish_publish (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_EncryptionError
#define ZZ_FORWARD_carrier_cipher_EncryptionError
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le64
#define ZZ_FORWARD_byteorder_to_le64
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Chacha20Poly1305_32_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Chacha20Poly1305_32_h_
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_EncryptionError
#define ZZ_EXPORT_carrier_cipher_EncryptionError
extern const __attribute__ ((unused)) size_t carrier_cipher_EncryptionError;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le64
#define ZZ_EXPORT_byteorder_to_le64
uint64_t  static inline byteorder_to_le64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Chacha20Poly1305_32_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Chacha20Poly1305_32_h_
#include "../../c/3rdparty_hacl_star_dist_gcc_compatible_Hacl_Chacha20Poly1305_32_h.h"

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_read
#define ZZ_FORWARD_io_unix_impl_unix_read
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_write
#define ZZ_FORWARD_io_unix_impl_unix_write
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_close
#define ZZ_FORWARD_io_unix_impl_unix_close
#endif
#ifndef ZZ_FORWARD_io_unix_unix
#define ZZ_FORWARD_io_unix_unix
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_time_tick
#define ZZ_FORWARD_time_tick
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD_io_unix_impl_timeout_read
#define ZZ_FORWARD_io_unix_impl_timeout_read
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_io_unix_select_fd
#define ZZ_FORWARD_io_unix_select_fd
#endif
#ifndef ZZ_FORWARD__poll_h_
#define ZZ_FORWARD__poll_h_
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD__unistd_h_
#define ZZ_FORWARD__unistd_h_
#endif
#ifndef ZZ_FORWARD__errno_h_
#define ZZ_FORWARD__errno_h_
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_read
#define ZZ_FORWARD_io_unix_impl_unix_read
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_io_unix_stdin
#define ZZ_FORWARD_io_unix_stdin
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_io_unix_impl_make_channel
#define ZZ_FORWARD_io_unix_impl_make_channel
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_io_unix_impl_timer_close
#define ZZ_FORWARD_io_unix_impl_timer_close
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__poll_h_
#define ZZ_FORWARD__poll_h_
#endif
#ifndef ZZ_FORWARD_io_unix_Async
#define ZZ_FORWARD_io_unix_Async
struct io_unix_Async_t;
typedef struct io_unix_Async_t io_unix_Async;
#endif
#ifndef ZZ_FORWARD__fcntl_h_
#define ZZ_FORWARD__fcntl_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_unix_select_fd
#define ZZ_FORWARD_io_unix_select_fd
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_io_unix_impl_wait
#define ZZ_FORWARD_io_unix_impl_wait
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_io_unix_make_read_async
#define ZZ_FORWARD_io_unix_make_read_async
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_io_unix_impl_never
#define ZZ_FORWARD_io_unix_impl_never
#endif
#ifndef ZZ_FORWARD_io_unix_impl_make_timeout
#define ZZ_FORWARD_io_unix_impl_make_timeout
#endif
#ifndef ZZ_FORWARD_io_unix_impl_never
#define ZZ_FORWARD_io_unix_impl_never
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_io_unix_reset
#define ZZ_FORWARD_io_unix_reset
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_io_unix_impl_wake
#define ZZ_FORWARD_io_unix_impl_wake
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_close
#define ZZ_FORWARD_io_unix_impl_unix_close
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_select
#define ZZ_FORWARD_io_unix_impl_unix_select
#endif
#ifndef ZZ_FORWARD_io_unix_make
#define ZZ_FORWARD_io_unix_make
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_write
#define ZZ_FORWARD_io_unix_impl_unix_write
#endif
#ifndef ZZ_FORWARD_io_unix_impl_unix_select
#define ZZ_FORWARD_io_unix_impl_unix_select
#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_read
#define ZZ_EXPORT_io_unix_impl_unix_read
static io_Result io_unix_impl_unix_read (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_write
#define ZZ_EXPORT_io_unix_impl_unix_write
static io_Result io_unix_impl_unix_write (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_close
#define ZZ_EXPORT_io_unix_impl_unix_close
static void io_unix_impl_unix_close (io_Context*  const  ctx);

#endif
#ifndef ZZ_EXPORT_io_unix_unix
#define ZZ_EXPORT_io_unix_unix
io_Io io_unix_unix (int const  fd);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_tick
#define ZZ_EXPORT_time_tick
time_Time time_tick ();

#endif
#ifndef ZZ_EXPORT_io_unix_impl_timeout_read
#define ZZ_EXPORT_io_unix_impl_timeout_read
static io_Result io_unix_impl_timeout_read (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_io_unix_select_fd
#define ZZ_EXPORT_io_unix_select_fd
extern bool io_unix_select_fd (io_unix_Async*  const  self, int const  fd, int const  events);

#endif
#ifndef ZZ_EXPORT__poll_h_
#define ZZ_EXPORT__poll_h_
#include <poll.h>

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT__unistd_h_
#define ZZ_EXPORT__unistd_h_
#include <unistd.h>

#endif
#ifndef ZZ_EXPORT__errno_h_
#define ZZ_EXPORT__errno_h_
#include <errno.h>

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_read
#define ZZ_EXPORT_io_unix_impl_unix_read
static io_Result io_unix_impl_unix_read (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_io_unix_stdin
#define ZZ_EXPORT_io_unix_stdin
io_Io io_unix_stdin ();

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_make_channel
#define ZZ_EXPORT_io_unix_impl_make_channel
static void io_unix_impl_make_channel (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_timer_close
#define ZZ_EXPORT_io_unix_impl_timer_close
static void io_unix_impl_timer_close (io_Context*  const  ctx);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT__poll_h_
#define ZZ_EXPORT__poll_h_

#endif
#ifndef ZZ_EXPORT_io_unix_Async
#define ZZ_EXPORT_io_unix_Async
struct io_unix_Async_t {
   io_Async base ;
   int timeout ;
   uintptr_t count ;
   uintptr_t tail ;
   struct pollfd fds[] ;
}
;
size_t sizeof_io_unix_Async(size_t tail);

#endif
#ifndef ZZ_EXPORT__fcntl_h_
#define ZZ_EXPORT__fcntl_h_
#include <fcntl.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_unix_select_fd
#define ZZ_EXPORT_io_unix_select_fd
extern bool io_unix_select_fd (io_unix_Async*  const  self, int const  fd, int const  events);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_wait
#define ZZ_EXPORT_io_unix_impl_wait
static void io_unix_impl_wait (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_io_unix_make_read_async
#define ZZ_EXPORT_io_unix_make_read_async
bool io_unix_make_read_async (io_Io*  const  i, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_never
#define ZZ_EXPORT_io_unix_impl_never
static io_Result io_unix_impl_never (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_make_timeout
#define ZZ_EXPORT_io_unix_impl_make_timeout
static io_Io io_unix_impl_make_timeout (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_never
#define ZZ_EXPORT_io_unix_impl_never
static io_Result io_unix_impl_never (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_io_unix_reset
#define ZZ_EXPORT_io_unix_reset
static void io_unix_reset (io_unix_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_wake
#define ZZ_EXPORT_io_unix_impl_wake
static void io_unix_impl_wake (io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_close
#define ZZ_EXPORT_io_unix_impl_unix_close
static void io_unix_impl_unix_close (io_Context*  const  ctx);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_select
#define ZZ_EXPORT_io_unix_impl_unix_select
static void io_unix_impl_unix_select (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_io_unix_make
#define ZZ_EXPORT_io_unix_make
void io_unix_make (io_unix_Async*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_write
#define ZZ_EXPORT_io_unix_impl_unix_write
static io_Result io_unix_impl_unix_write (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  l);

#endif
#ifndef ZZ_EXPORT_io_unix_impl_unix_select
#define ZZ_EXPORT_io_unix_impl_unix_select
static void io_unix_impl_unix_select (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_sft_State
#define ZZ_FORWARD_carrier_sft_State
struct carrier_sft_State_t;
typedef struct carrier_sft_State_t carrier_sft_State;
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_mem_eq
#define ZZ_FORWARD_mem_eq
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_stream
#define ZZ_FORWARD_carrier_sft_sft_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_log_info
#define ZZ_FORWARD_log_info
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_open
#define ZZ_FORWARD_carrier_sft_sft_open
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_close
#define ZZ_FORWARD_carrier_sft_sft_close
#endif
#ifndef ZZ_FORWARD_carrier_sft_StupidFileTransfer
#define ZZ_FORWARD_carrier_sft_StupidFileTransfer
#endif
#ifndef ZZ_FORWARD_carrier_sft_register
#define ZZ_FORWARD_carrier_sft_register
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_sft_sft_close
#define ZZ_FORWARD_carrier_sft_sft_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_sft_State
#define ZZ_FORWARD_carrier_sft_State
struct carrier_sft_State_t;
typedef struct carrier_sft_State_t carrier_sft_State;
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_200_200
#define ZZ_EXPORT_buffer_Buffer_200_200
struct buffer_Buffer_200_t {
   uintptr_t at ;
   char mem[200] ;
}
;
size_t sizeof_buffer_Buffer_200();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_mem_eq
#define ZZ_EXPORT_mem_eq
extern bool mem_eq (void const *  const  a, void const *  const  b, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_stream
#define ZZ_EXPORT_carrier_sft_sft_stream
extern bool carrier_sft_sft_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_log_info
#define ZZ_EXPORT_log_info
void log_info (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_open
#define ZZ_EXPORT_carrier_sft_sft_open
static void carrier_sft_sft_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_close
#define ZZ_EXPORT_carrier_sft_sft_close
static void carrier_sft_sft_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sft_register
#define ZZ_EXPORT_carrier_sft_register
void carrier_sft_register (carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_sft_sft_close
#define ZZ_EXPORT_carrier_sft_sft_close
static void carrier_sft_sft_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_sft_State
#define ZZ_EXPORT_carrier_sft_State
struct carrier_sft_State_t {
   FILE*  f ;
   carrier_sha256_Sha256 sha ;
   uint8_t expecthash[    32] ;
}
;
size_t sizeof_carrier_sft_State();

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_identity_nullcheck
#define ZZ_FORWARD_carrier_identity_nullcheck
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_identity_dh
#define ZZ_FORWARD_carrier_identity_dh
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_secret
#define ZZ_FORWARD_carrier_identity_address_from_secret
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_identity_isnull
#define ZZ_FORWARD_carrier_identity_isnull
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_nullcheck
#define ZZ_EXPORT_carrier_identity_nullcheck
void carrier_identity_nullcheck (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_identity_dh
#define ZZ_EXPORT_carrier_identity_dh
void carrier_identity_dh (carrier_identity_Address*  const  out, carrier_identity_Secret const *  const  me, carrier_identity_Address const *  const  them);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_secret
#define ZZ_EXPORT_carrier_identity_address_from_secret
void carrier_identity_address_from_secret (carrier_identity_Address*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_isnull
#define ZZ_EXPORT_carrier_identity_isnull
bool carrier_identity_isnull (uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_RETRY_EACH_BROKER
#define ZZ_FORWARD_carrier_endpoint_RETRY_EACH_BROKER
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_150
#define ZZ_FORWARD_buffer_Buffer_150
struct buffer_Buffer_150_t;
typedef struct buffer_Buffer_150_t buffer_Buffer_150;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_to_str
#define ZZ_FORWARD_carrier_identity_address_to_str
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_responder_accept_insecure
#define ZZ_FORWARD_carrier_responder_accept_insecure
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_PROLOGUE
#define ZZ_FORWARD_carrier_endpoint_PROLOGUE
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_from_store
#define ZZ_FORWARD_carrier_bootstrap_from_store
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_time_from_millis
#define ZZ_FORWARD_time_from_millis
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_endpoint_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_endpoint_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_FAKE_TLS
#define ZZ_FORWARD_carrier_endpoint_FAKE_TLS
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_PORTS
#define ZZ_FORWARD_carrier_endpoint_PORTS
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_InvalidBootstrap
#define ZZ_FORWARD_carrier_endpoint_InvalidBootstrap
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#define ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_RETRY_EACH_BROKER
#define ZZ_EXPORT_carrier_endpoint_RETRY_EACH_BROKER
#define carrier_endpoint_RETRY_EACH_BROKER ((uintptr_t )    5)

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_150_150
#define ZZ_EXPORT_buffer_Buffer_150_150
struct buffer_Buffer_150_t {
   uintptr_t at ;
   char mem[150] ;
}
;
size_t sizeof_buffer_Buffer_150();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_100_100
#define ZZ_EXPORT_buffer_Buffer_100_100
struct buffer_Buffer_100_t {
   uintptr_t at ;
   char mem[100] ;
}
;
size_t sizeof_buffer_Buffer_100();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_to_str
#define ZZ_EXPORT_carrier_identity_address_to_str
uintptr_t carrier_identity_address_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Address const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_responder_accept_insecure
#define ZZ_EXPORT_carrier_responder_accept_insecure
extern void carrier_responder_accept_insecure (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const *  const  store, uint64_t route, uint64_t const  timestamp, slice_mut_slice_MutSlice*  const  frame);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define carrier_endpoint_PROLOGUE ((char  const * )    "carrier has arrived")

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_from_store
#define ZZ_EXPORT_carrier_bootstrap_from_store
bool carrier_bootstrap_from_store (carrier_vault_Broker const *  const  b, net_address_Address*  const  ip4addr, net_address_Address*  const  ip6addr, carrier_identity_Address*  const  xaddr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_time_from_millis
#define ZZ_EXPORT_time_from_millis
time_Time time_from_millis (uint64_t const  millis);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_endpoint_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_endpoint_h_

#line 1 "/home/aep/proj/devguard/carrier/core/src/endpoint.h"
void carrier_vault_esp32_open(carrier_vault_Vault *self, err_Err *e, size_t et);
void carrier_vault_toml_from_home_carriertoml(carrier_vault_Vault *self, err_Err *e, size_t et);

static void os_carrier_endpoint_open(carrier_endpoint_Endpoint *self, err_Err *e, size_t et)
{
#if defined(ESP_PLATFORM)
    carrier_vault_esp32_open(&self->vault, e, et);
#else
    carrier_vault_toml_from_home_carriertoml(&self->vault, e, et);
#endif
}

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_InvalidBootstrap
#define ZZ_EXPORT_carrier_endpoint_InvalidBootstrap
extern const __attribute__ ((unused)) size_t carrier_endpoint_InvalidBootstrap;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define carrier_endpoint_SIGN_PURPOSE ((char  const * )    "carrier handshake hash 1")

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_10
#define ZZ_FORWARD_err_Err_10
struct err_Err_10_t;
typedef struct err_Err_10_t err_Err_10;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_pq_REORDER_THRESHOLD
#define ZZ_FORWARD_carrier_pq_REORDER_THRESHOLD
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_pq_MIN_TLP
#define ZZ_FORWARD_carrier_pq_MIN_TLP
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_pq_KEEPALIVE
#define ZZ_FORWARD_carrier_pq_KEEPALIVE
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_pq_BACKOFF
#define ZZ_FORWARD_carrier_pq_BACKOFF
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_pq_DEAD_TLPS
#define ZZ_FORWARD_carrier_pq_DEAD_TLPS
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_pq_DEAD_PINGS
#define ZZ_FORWARD_carrier_pq_DEAD_PINGS
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_pq_make_frame_size
#define ZZ_FORWARD_carrier_pq_make_frame_size
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_pq_make_frame_size
#define ZZ_FORWARD_carrier_pq_make_frame_size
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_10
#define ZZ_FORWARD_err_Err_10
struct err_Err_10_t;
typedef struct err_Err_10_t err_Err_10;
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_pq_REORDER_THRESHOLD
#define ZZ_EXPORT_carrier_pq_REORDER_THRESHOLD
#define carrier_pq_REORDER_THRESHOLD ((uint64_t )    3)

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_MIN_TLP
#define ZZ_EXPORT_carrier_pq_MIN_TLP
#define carrier_pq_MIN_TLP ((uint64_t )    5)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_pq_KEEPALIVE
#define ZZ_EXPORT_carrier_pq_KEEPALIVE
#define carrier_pq_KEEPALIVE ((uint64_t )    5000)

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_pq_BACKOFF
#define ZZ_EXPORT_carrier_pq_BACKOFF
#define carrier_pq_BACKOFF ((uint64_t )    50)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_DEAD_TLPS
#define ZZ_EXPORT_carrier_pq_DEAD_TLPS
#define carrier_pq_DEAD_TLPS ((uint64_t )    20)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_pq_DEAD_PINGS
#define ZZ_EXPORT_carrier_pq_DEAD_PINGS
#define carrier_pq_DEAD_PINGS ((uint64_t )    5)

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_pq_make_frame_size
#define ZZ_EXPORT_carrier_pq_make_frame_size
static void carrier_pq_make_frame_size (carrier_pq_Frame*  const  frame);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_pq_make_frame_size
#define ZZ_EXPORT_carrier_pq_make_frame_size
static void carrier_pq_make_frame_size (carrier_pq_Frame*  const  frame);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();
#endif
#ifndef ZZ_EXPORT_err_Err_10_10
#define ZZ_EXPORT_err_Err_10_10
struct err_Err_10_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [10];
}
;
size_t sizeof_err_Err_10();

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_1
#define ZZ_FORWARD_err_Err_1
struct err_Err_1_t;
typedef struct err_Err_1_t err_Err_1;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_10
#define ZZ_FORWARD_buffer_Buffer_10
struct buffer_Buffer_10_t;
typedef struct buffer_Buffer_10_t buffer_Buffer_10;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_256
#define ZZ_FORWARD_buffer_Buffer_256
struct buffer_Buffer_256_t;
typedef struct buffer_Buffer_256_t buffer_Buffer_256;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_from_seconds
#define ZZ_FORWARD_time_from_seconds
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_from_store
#define ZZ_FORWARD_carrier_bootstrap_from_store
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_10
#define ZZ_FORWARD_buffer_Buffer_10
struct buffer_Buffer_10_t;
typedef struct buffer_Buffer_10_t buffer_Buffer_10;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1000
#define ZZ_FORWARD_buffer_Buffer_1000
struct buffer_Buffer_1000_t;
typedef struct buffer_Buffer_1000_t buffer_Buffer_1000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_200
#define ZZ_FORWARD_buffer_Buffer_200
struct buffer_Buffer_200_t;
typedef struct buffer_Buffer_200_t buffer_Buffer_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_256
#define ZZ_FORWARD_buffer_Buffer_256
struct buffer_Buffer_256_t;
typedef struct buffer_Buffer_256_t buffer_Buffer_256;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_100
#define ZZ_FORWARD_buffer_Buffer_100
struct buffer_Buffer_100_t;
typedef struct buffer_Buffer_100_t buffer_Buffer_100;
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_parse_record
#define ZZ_FORWARD_carrier_bootstrap_parse_record
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_get_system_dns_servers
#define ZZ_FORWARD_carrier_bootstrap_get_system_dns_servers
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_send_query
#define ZZ_FORWARD_carrier_bootstrap_send_query
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_parse_query
#define ZZ_FORWARD_carrier_bootstrap_parse_query
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_parse_query
#define ZZ_FORWARD_carrier_bootstrap_parse_query
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_sync
#define ZZ_FORWARD_carrier_bootstrap_sync
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_1
#define ZZ_FORWARD_err_Err_1
struct err_Err_1_t;
typedef struct err_Err_1_t err_Err_1;
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_time_from_seconds
#define ZZ_EXPORT_time_from_seconds
time_Time time_from_seconds (uint64_t const  secs);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_from_store
#define ZZ_EXPORT_carrier_bootstrap_from_store
bool carrier_bootstrap_from_store (carrier_vault_Broker const *  const  b, net_address_Address*  const  ip4addr, net_address_Address*  const  ip6addr, carrier_identity_Address*  const  xaddr);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_10_10
#define ZZ_EXPORT_buffer_Buffer_10_10
struct buffer_Buffer_10_t {
   uintptr_t at ;
   char mem[10] ;
}
;
size_t sizeof_buffer_Buffer_10();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1000_1000
#define ZZ_EXPORT_buffer_Buffer_1000_1000
struct buffer_Buffer_1000_t {
   uintptr_t at ;
   char mem[1000] ;
}
;
size_t sizeof_buffer_Buffer_1000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_200_200
#define ZZ_EXPORT_buffer_Buffer_200_200
struct buffer_Buffer_200_t {
   uintptr_t at ;
   char mem[200] ;
}
;
size_t sizeof_buffer_Buffer_200();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_256_256
#define ZZ_EXPORT_buffer_Buffer_256_256
struct buffer_Buffer_256_t {
   uintptr_t at ;
   char mem[256] ;
}
;
size_t sizeof_buffer_Buffer_256();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_100_100
#define ZZ_EXPORT_buffer_Buffer_100_100
struct buffer_Buffer_100_t {
   uintptr_t at ;
   char mem[100] ;
}
;
size_t sizeof_buffer_Buffer_100();

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_parse_record
#define ZZ_EXPORT_carrier_bootstrap_parse_record
extern bool carrier_bootstrap_parse_record (buffer_Buffer const *  const  record, uintptr_t const  st, carrier_vault_Broker*  const  entry);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_get_system_dns_servers
#define ZZ_EXPORT_carrier_bootstrap_get_system_dns_servers
static void carrier_bootstrap_get_system_dns_servers (net_address_Address*  const  dns_servers, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_send_query
#define ZZ_EXPORT_carrier_bootstrap_send_query
static void carrier_bootstrap_send_query (err_Err*  const  e, uintptr_t const  et, buffer_Buffer const *  const  name, uintptr_t const  st, netio_udp_Socket*  const  sock, net_address_Address const *  const  dns_server);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_parse_query
#define ZZ_EXPORT_carrier_bootstrap_parse_query
extern bool carrier_bootstrap_parse_query (buffer_Buffer const *  const  pkt, uintptr_t const  t, carrier_vault_Vault*  const  store);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_parse_query
#define ZZ_EXPORT_carrier_bootstrap_parse_query
extern bool carrier_bootstrap_parse_query (buffer_Buffer const *  const  pkt, uintptr_t const  t, carrier_vault_Vault*  const  store);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_sync
#define ZZ_EXPORT_carrier_bootstrap_sync
void carrier_bootstrap_sync (err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async, time_Time const  timeout);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();
#endif
#ifndef ZZ_EXPORT_err_Err_1_1
#define ZZ_EXPORT_err_Err_1_1
struct err_Err_1_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [1];
}
;
size_t sizeof_err_Err_1();

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_proto_Sysinfo
#define ZZ_FORWARD_carrier_proto_Sysinfo
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationList
#define ZZ_FORWARD_carrier_proto_AuthorizationList
#endif
#ifndef ZZ_FORWARD_carrier_proto_Satellite
#define ZZ_FORWARD_carrier_proto_Satellite
#endif
#ifndef ZZ_FORWARD_carrier_proto_SwitchPort
#define ZZ_FORWARD_carrier_proto_SwitchPort
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectResponse
#define ZZ_FORWARD_carrier_proto_ConnectResponse
#endif
#ifndef ZZ_FORWARD_protonerf_FieldType
#define ZZ_FORWARD_protonerf_FieldType
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectResponseTypes
#define ZZ_FORWARD_carrier_proto_ConnectResponseTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Netdev
#define ZZ_FORWARD_carrier_proto_Netdev
#endif
#ifndef ZZ_FORWARD_carrier_proto_Filter
#define ZZ_FORWARD_carrier_proto_Filter
#endif
#ifndef ZZ_FORWARD_carrier_proto_Uname
#define ZZ_FORWARD_carrier_proto_Uname
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectRequest__TargetType
#define ZZ_FORWARD_carrier_proto_ConnectRequest__TargetType
#endif
#ifndef ZZ_FORWARD_carrier_proto_Load
#define ZZ_FORWARD_carrier_proto_Load
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetAddress
#define ZZ_FORWARD_carrier_proto_NetAddress
#endif
#ifndef ZZ_FORWARD_carrier_proto_Certificate
#define ZZ_FORWARD_carrier_proto_Certificate
#endif
#ifndef ZZ_FORWARD_carrier_proto_CertificateTypes
#define ZZ_FORWARD_carrier_proto_CertificateTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConfigResult
#define ZZ_FORWARD_carrier_proto_ConfigResult
#endif
#ifndef ZZ_FORWARD_carrier_proto_UnameTypes
#define ZZ_FORWARD_carrier_proto_UnameTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Unpublish
#define ZZ_FORWARD_carrier_proto_Unpublish
#endif
#ifndef ZZ_FORWARD_carrier_proto_Location
#define ZZ_FORWARD_carrier_proto_Location
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_proto_WifiInterface
#define ZZ_FORWARD_carrier_proto_WifiInterface
#endif
#ifndef ZZ_FORWARD_carrier_proto_Path
#define ZZ_FORWARD_carrier_proto_Path
#endif
#ifndef ZZ_FORWARD_carrier_proto_GenesisUpdate
#define ZZ_FORWARD_carrier_proto_GenesisUpdate
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetRoute
#define ZZ_FORWARD_carrier_proto_NetRoute
#endif
#ifndef ZZ_FORWARD_carrier_proto_Publish
#define ZZ_FORWARD_carrier_proto_Publish
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishTypes
#define ZZ_FORWARD_carrier_proto_PublishTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthListResult
#define ZZ_FORWARD_carrier_proto_AuthListResult
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceResponse
#define ZZ_FORWARD_carrier_proto_TraceResponse
#endif
#ifndef ZZ_FORWARD_carrier_proto_Authorization
#define ZZ_FORWARD_carrier_proto_Authorization
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationTypes
#define ZZ_FORWARD_carrier_proto_AuthorizationTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationGetTypes
#define ZZ_FORWARD_carrier_proto_AuthorizationGetTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_FileSystem
#define ZZ_FORWARD_carrier_proto_FileSystem
#endif
#ifndef ZZ_FORWARD_carrier_proto_DiscoveryResponse
#define ZZ_FORWARD_carrier_proto_DiscoveryResponse
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_proto_WifiStation
#define ZZ_FORWARD_carrier_proto_WifiStation
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_proto_Alias
#define ZZ_FORWARD_carrier_proto_Alias
#endif
#ifndef ZZ_FORWARD_carrier_proto_Belltower
#define ZZ_FORWARD_carrier_proto_Belltower
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectRequest
#define ZZ_FORWARD_carrier_proto_ConnectRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectRequest
#define ZZ_FORWARD_carrier_proto_PeerConnectRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeChange
#define ZZ_FORWARD_carrier_proto_SubscribeChange
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterState
#define ZZ_FORWARD_carrier_proto_ClusterState
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_proto_Claim
#define ZZ_FORWARD_carrier_proto_Claim
#endif
#ifndef ZZ_FORWARD_carrier_proto_ExceptionalRoute
#define ZZ_FORWARD_carrier_proto_ExceptionalRoute
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_proto_Firmware
#define ZZ_FORWARD_carrier_proto_Firmware
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetdevTypes
#define ZZ_FORWARD_carrier_proto_NetdevTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectRequestTypes
#define ZZ_FORWARD_carrier_proto_ConnectRequestTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Arp
#define ZZ_FORWARD_carrier_proto_Arp
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishChange
#define ZZ_FORWARD_carrier_proto_PublishChange
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishChangeTypes
#define ZZ_FORWARD_carrier_proto_PublishChangeTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceRequest
#define ZZ_FORWARD_carrier_proto_TraceRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceRequestTypes
#define ZZ_FORWARD_carrier_proto_TraceRequestTypes
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_proto_DhcpLease
#define ZZ_FORWARD_carrier_proto_DhcpLease
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_proto_Sensor
#define ZZ_FORWARD_carrier_proto_Sensor
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClaimOne
#define ZZ_FORWARD_carrier_proto_ClaimOne
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceShadow
#define ZZ_FORWARD_carrier_proto_TraceShadow
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClaimAll
#define ZZ_FORWARD_carrier_proto_ClaimAll
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkJoin
#define ZZ_FORWARD_carrier_proto_NetworkJoin
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_proto_SupersedeTypes
#define ZZ_FORWARD_carrier_proto_SupersedeTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_InnerTraceResponse
#define ZZ_FORWARD_carrier_proto_InnerTraceResponse
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterShard
#define ZZ_FORWARD_carrier_proto_ClusterShard
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_proto_InteractiveAuth
#define ZZ_FORWARD_carrier_proto_InteractiveAuth
#endif
#ifndef ZZ_FORWARD_carrier_proto_PathTypes
#define ZZ_FORWARD_carrier_proto_PathTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Switch
#define ZZ_FORWARD_carrier_proto_Switch
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeRequest
#define ZZ_FORWARD_carrier_proto_SubscribeRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_GenesisUpdateTypes
#define ZZ_FORWARD_carrier_proto_GenesisUpdateTypes
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_proto_UnpublishTypes
#define ZZ_FORWARD_carrier_proto_UnpublishTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_InnerTraceRequest
#define ZZ_FORWARD_carrier_proto_InnerTraceRequest
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_proto_GenesisCurrent
#define ZZ_FORWARD_carrier_proto_GenesisCurrent
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_NoneTypes
#define ZZ_FORWARD_carrier_proto_NoneTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterStateTypes
#define ZZ_FORWARD_carrier_proto_ClusterStateTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationAdd
#define ZZ_FORWARD_carrier_proto_AuthorizationAdd
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationAddTypes
#define ZZ_FORWARD_carrier_proto_AuthorizationAddTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_LocationAccuracity
#define ZZ_FORWARD_carrier_proto_LocationAccuracity
#endif
#ifndef ZZ_FORWARD_carrier_proto_Arp__HwType
#define ZZ_FORWARD_carrier_proto_Arp__HwType
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkJoinTypes
#define ZZ_FORWARD_carrier_proto_NetworkJoinTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishRequest
#define ZZ_FORWARD_carrier_proto_PublishRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishRequestTypes
#define ZZ_FORWARD_carrier_proto_PublishRequestTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_CertificateRequest
#define ZZ_FORWARD_carrier_proto_CertificateRequest
#endif
#ifndef ZZ_FORWARD_carrier_proto_Confirmation
#define ZZ_FORWARD_carrier_proto_Confirmation
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectResponse
#define ZZ_FORWARD_carrier_proto_PeerConnectResponse
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectResponseTypes
#define ZZ_FORWARD_carrier_proto_PeerConnectResponseTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Bootloader
#define ZZ_FORWARD_carrier_proto_Bootloader
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterConfig
#define ZZ_FORWARD_carrier_proto_ClusterConfig
#endif
#ifndef ZZ_FORWARD_carrier_proto_DiscoveryResponseTypes
#define ZZ_FORWARD_carrier_proto_DiscoveryResponseTypes
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConfigResultTypes
#define ZZ_FORWARD_carrier_proto_ConfigResultTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_FileSystemTypes
#define ZZ_FORWARD_carrier_proto_FileSystemTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetSurvey
#define ZZ_FORWARD_carrier_proto_NetSurvey
#endif
#ifndef ZZ_FORWARD_carrier_proto_SensorTypes
#define ZZ_FORWARD_carrier_proto_SensorTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeChangeTypes
#define ZZ_FORWARD_carrier_proto_SubscribeChangeTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceShadowTypes
#define ZZ_FORWARD_carrier_proto_TraceShadowTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_SysinfoTypes
#define ZZ_FORWARD_carrier_proto_SysinfoTypes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_proto_FirmwareTypes
#define ZZ_FORWARD_carrier_proto_FirmwareTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConfirmationTypes
#define ZZ_FORWARD_carrier_proto_ConfirmationTypes
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_proto_WifiInterfaceTypes
#define ZZ_FORWARD_carrier_proto_WifiInterfaceTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectRequestTypes
#define ZZ_FORWARD_carrier_proto_PeerConnectRequestTypes
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_proto_FilterByRole
#define ZZ_FORWARD_carrier_proto_FilterByRole
#endif
#ifndef ZZ_FORWARD_carrier_proto_FilterByRoleTypes
#define ZZ_FORWARD_carrier_proto_FilterByRoleTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_InnerTraceResponseTypes
#define ZZ_FORWARD_carrier_proto_InnerTraceResponseTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_SwitchPortTypes
#define ZZ_FORWARD_carrier_proto_SwitchPortTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_MoveInstruction
#define ZZ_FORWARD_carrier_proto_MoveInstruction
#endif
#ifndef ZZ_FORWARD_carrier_proto_MoveInstructionTypes
#define ZZ_FORWARD_carrier_proto_MoveInstructionTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_LocationVelocity
#define ZZ_FORWARD_carrier_proto_LocationVelocity
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClaimOneTypes
#define ZZ_FORWARD_carrier_proto_ClaimOneTypes
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_proto_Revoker
#define ZZ_FORWARD_carrier_proto_Revoker
#endif
#ifndef ZZ_FORWARD_carrier_proto_RevokerTypes
#define ZZ_FORWARD_carrier_proto_RevokerTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_proto_Netdev__Duplex
#define ZZ_FORWARD_carrier_proto_Netdev__Duplex
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationListTypes
#define ZZ_FORWARD_carrier_proto_AuthorizationListTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterConfigTypes
#define ZZ_FORWARD_carrier_proto_ClusterConfigTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkGetResult
#define ZZ_FORWARD_carrier_proto_NetworkGetResult
#endif
#ifndef ZZ_FORWARD_carrier_proto_LocationVelocityTypes
#define ZZ_FORWARD_carrier_proto_LocationVelocityTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ProtoHeader
#define ZZ_FORWARD_carrier_proto_ProtoHeader
#endif
#ifndef ZZ_FORWARD_carrier_proto_Sensor__ValueType
#define ZZ_FORWARD_carrier_proto_Sensor__ValueType
#endif
#ifndef ZZ_FORWARD_carrier_proto_SatelliteTypes
#define ZZ_FORWARD_carrier_proto_SatelliteTypes
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_proto_Mem
#define ZZ_FORWARD_carrier_proto_Mem
#endif
#ifndef ZZ_FORWARD_carrier_proto_MemTypes
#define ZZ_FORWARD_carrier_proto_MemTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Satellite__Constellation
#define ZZ_FORWARD_carrier_proto_Satellite__Constellation
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_proto_LocationTypes
#define ZZ_FORWARD_carrier_proto_LocationTypes
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_TraceResponseTypes
#define ZZ_FORWARD_carrier_proto_TraceResponseTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthListResultTypes
#define ZZ_FORWARD_carrier_proto_AuthListResultTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Sensors
#define ZZ_FORWARD_carrier_proto_Sensors
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkGetResultTypes
#define ZZ_FORWARD_carrier_proto_NetworkGetResultTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Location__Fix
#define ZZ_FORWARD_carrier_proto_Location__Fix
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_proto_BootloaderTypes
#define ZZ_FORWARD_carrier_proto_BootloaderTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetRouteTypes
#define ZZ_FORWARD_carrier_proto_NetRouteTypes
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_proto_InteractiveAuthTypes
#define ZZ_FORWARD_carrier_proto_InteractiveAuthTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_SensorsTypes
#define ZZ_FORWARD_carrier_proto_SensorsTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClusterShardTypes
#define ZZ_FORWARD_carrier_proto_ClusterShardTypes
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_proto_DhcpLeaseTypes
#define ZZ_FORWARD_carrier_proto_DhcpLeaseTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ArpTypes
#define ZZ_FORWARD_carrier_proto_ArpTypes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationDel
#define ZZ_FORWARD_carrier_proto_AuthorizationDel
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_proto_SwitchTypes
#define ZZ_FORWARD_carrier_proto_SwitchTypes
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetAddressTypes
#define ZZ_FORWARD_carrier_proto_NetAddressTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_Path__Category
#define ZZ_FORWARD_carrier_proto_Path__Category
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkGetTypes
#define ZZ_FORWARD_carrier_proto_NetworkGetTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_BelltowerTypes
#define ZZ_FORWARD_carrier_proto_BelltowerTypes
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_proto_ExceptionalRouteTypes
#define ZZ_FORWARD_carrier_proto_ExceptionalRouteTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_LoadTypes
#define ZZ_FORWARD_carrier_proto_LoadTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_CertificateRequestTypes
#define ZZ_FORWARD_carrier_proto_CertificateRequestTypes
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_proto_SubscribeRequestTypes
#define ZZ_FORWARD_carrier_proto_SubscribeRequestTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_FilterTypes
#define ZZ_FORWARD_carrier_proto_FilterTypes
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_proto_LocationAccuracityTypes
#define ZZ_FORWARD_carrier_proto_LocationAccuracityTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_EmptyTypes
#define ZZ_FORWARD_carrier_proto_EmptyTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_WifiStationTypes
#define ZZ_FORWARD_carrier_proto_WifiStationTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationDelTypes
#define ZZ_FORWARD_carrier_proto_AuthorizationDelTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetSurveyTypes
#define ZZ_FORWARD_carrier_proto_NetSurveyTypes
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClaimAllTypes
#define ZZ_FORWARD_carrier_proto_ClaimAllTypes
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_proto_GenesisCurrentTypes
#define ZZ_FORWARD_carrier_proto_GenesisCurrentTypes
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_proto_ClaimTypes
#define ZZ_FORWARD_carrier_proto_ClaimTypes
#endif
#ifndef ZZ_FORWARD_carrier_proto_AliasTypes
#define ZZ_FORWARD_carrier_proto_AliasTypes
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_InnerTraceRequestTypes
#define ZZ_FORWARD_carrier_proto_InnerTraceRequestTypes
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_proto_ProtoHeaderTypes
#define ZZ_FORWARD_carrier_proto_ProtoHeaderTypes
#endif
#ifndef ZZ_EXPORT_carrier_proto_Sysinfo
#define ZZ_EXPORT_carrier_proto_Sysinfo
typedef enum {
    carrier_proto_Sysinfo_Uname = 1,
    carrier_proto_Sysinfo_Mem = 2,
    carrier_proto_Sysinfo_Load = 3,
    carrier_proto_Sysinfo_Firmware = 4,
    carrier_proto_Sysinfo_Fs = 5,
    carrier_proto_Sysinfo_Net = 6,
    carrier_proto_Sysinfo_Switch = 7,
    carrier_proto_Sysinfo_BoardId = 8,
    carrier_proto_Sysinfo_CarrierBuildId = 9,
    carrier_proto_Sysinfo_Belltower = 10,
    carrier_proto_Sysinfo_Bootloader = 11,

} carrier_proto_Sysinfo;

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationList
#define ZZ_EXPORT_carrier_proto_AuthorizationList
typedef enum {
    carrier_proto_AuthorizationList_A = 1,

} carrier_proto_AuthorizationList;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Satellite
#define ZZ_EXPORT_carrier_proto_Satellite
typedef enum {
    carrier_proto_Satellite_Constellation = 1,
    carrier_proto_Satellite_Prn = 2,
    carrier_proto_Satellite_Elevation = 3,
    carrier_proto_Satellite_Azimuth = 4,
    carrier_proto_Satellite_Snr = 5,
    carrier_proto_Satellite_Fix = 6,

} carrier_proto_Satellite;

#endif
#ifndef ZZ_EXPORT_carrier_proto_SwitchPort
#define ZZ_EXPORT_carrier_proto_SwitchPort
typedef enum {
    carrier_proto_SwitchPort_Port = 1,
    carrier_proto_SwitchPort_Link = 2,
    carrier_proto_SwitchPort_Speed = 3,
    carrier_proto_SwitchPort_Network = 4,
    carrier_proto_SwitchPort_Device = 5,
    carrier_proto_SwitchPort_None = 6,

} carrier_proto_SwitchPort;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectResponse
#define ZZ_EXPORT_carrier_proto_ConnectResponse
typedef enum {
    carrier_proto_ConnectResponse_Ok = 1,
    carrier_proto_ConnectResponse_Handshake = 2,
    carrier_proto_ConnectResponse_Route = 3,
    carrier_proto_ConnectResponse_Paths = 4,
    carrier_proto_ConnectResponse_Error = 5,

} carrier_proto_ConnectResponse;

#endif
#ifndef ZZ_EXPORT_protonerf_FieldType
#define ZZ_EXPORT_protonerf_FieldType
typedef enum {
    protonerf_FieldType_Skip = 0,
    protonerf_FieldType_Int32 = 1,
    protonerf_FieldType_Int64 = 2,
    protonerf_FieldType_Uint32 = 3,
    protonerf_FieldType_Uint64 = 4,
    protonerf_FieldType_Sint32 = 5,
    protonerf_FieldType_Sint64 = 6,
    protonerf_FieldType_Bool = 7,
    protonerf_FieldType_Enum = 8,
    protonerf_FieldType_Fixed64 = 9,
    protonerf_FieldType_Sfixed64 = 10,
    protonerf_FieldType_Double = 11,
    protonerf_FieldType_String = 12,
    protonerf_FieldType_Bytes = 13,
    protonerf_FieldType_Message = 14,
    protonerf_FieldType_Repeated = 15,
    protonerf_FieldType_Fixed32 = 16,
    protonerf_FieldType_Sfixed32 = 17,
    protonerf_FieldType_Float = 18,

} protonerf_FieldType;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectResponseTypes
#define ZZ_EXPORT_carrier_proto_ConnectResponseTypes
protonerf_FieldType carrier_proto_ConnectResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Netdev
#define ZZ_EXPORT_carrier_proto_Netdev
typedef enum {
    carrier_proto_Netdev_Name = 1,
    carrier_proto_Netdev_RxPkt = 2,
    carrier_proto_Netdev_RxErr = 3,
    carrier_proto_Netdev_TxPkt = 4,
    carrier_proto_Netdev_TxErr = 5,
    carrier_proto_Netdev_Up = 6,
    carrier_proto_Netdev_Macaddr = 7,
    carrier_proto_Netdev_Mtu = 8,
    carrier_proto_Netdev_Addrs = 9,
    carrier_proto_Netdev_Link = 10,
    carrier_proto_Netdev_LinkChanges = 11,
    carrier_proto_Netdev_LinkSpeed = 12,
    carrier_proto_Netdev_LinkDuplex = 13,

} carrier_proto_Netdev;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Filter
#define ZZ_EXPORT_carrier_proto_Filter
typedef enum {
    carrier_proto_Filter_Role = 1,

} carrier_proto_Filter;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Uname
#define ZZ_EXPORT_carrier_proto_Uname
typedef enum {
    carrier_proto_Uname_Sysname = 1,
    carrier_proto_Uname_Nodename = 2,
    carrier_proto_Uname_Release = 3,
    carrier_proto_Uname_Version = 4,
    carrier_proto_Uname_Machine = 5,

} carrier_proto_Uname;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectRequest__TargetType
#define ZZ_EXPORT_carrier_proto_ConnectRequest__TargetType
typedef enum {
    carrier_proto_ConnectRequest__TargetType_Identity = 0,
    carrier_proto_ConnectRequest__TargetType_Alias = 1,

} carrier_proto_ConnectRequest__TargetType;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Load
#define ZZ_EXPORT_carrier_proto_Load
typedef enum {
    carrier_proto_Load_Avg1 = 1,
    carrier_proto_Load_Avg5 = 2,
    carrier_proto_Load_Avg15 = 3,
    carrier_proto_Load_Clock = 4,
    carrier_proto_Load_Uptime = 5,
    carrier_proto_Load_Idletime = 6,
    carrier_proto_Load_ProcActive = 7,
    carrier_proto_Load_ProcTotal = 8,
    carrier_proto_Load_Cores = 9,
    carrier_proto_Load_Threads = 10,

} carrier_proto_Load;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetAddress
#define ZZ_EXPORT_carrier_proto_NetAddress
typedef enum {
    carrier_proto_NetAddress_Addr = 1,
    carrier_proto_NetAddress_Mask = 2,
    carrier_proto_NetAddress_Broadcast = 3,

} carrier_proto_NetAddress;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Certificate
#define ZZ_EXPORT_carrier_proto_Certificate
typedef enum {
    carrier_proto_Certificate_LastValidEpoch = 1,
    carrier_proto_Certificate_Identity = 2,
    carrier_proto_Certificate_Authority = 3,
    carrier_proto_Certificate_Serial = 4,
    carrier_proto_Certificate_Claims = 5,

} carrier_proto_Certificate;

#endif
#ifndef ZZ_EXPORT_carrier_proto_CertificateTypes
#define ZZ_EXPORT_carrier_proto_CertificateTypes
protonerf_FieldType carrier_proto_CertificateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConfigResult
#define ZZ_EXPORT_carrier_proto_ConfigResult
typedef enum {
    carrier_proto_ConfigResult_Ok = 1,
    carrier_proto_ConfigResult_Error = 2,

} carrier_proto_ConfigResult;

#endif
#ifndef ZZ_EXPORT_carrier_proto_UnameTypes
#define ZZ_EXPORT_carrier_proto_UnameTypes
protonerf_FieldType carrier_proto_UnameTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Unpublish
#define ZZ_EXPORT_carrier_proto_Unpublish
typedef enum {
    carrier_proto_Unpublish_Identity = 1,

} carrier_proto_Unpublish;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Location
#define ZZ_EXPORT_carrier_proto_Location
typedef enum {
    carrier_proto_Location_Latitude = 1,
    carrier_proto_Location_Longitude = 2,
    carrier_proto_Location_Altitude = 3,
    carrier_proto_Location_Fix = 4,
    carrier_proto_Location_Accuracity = 5,
    carrier_proto_Location_Satellites = 6,
    carrier_proto_Location_Velocity = 7,

} carrier_proto_Location;

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_WifiInterface
#define ZZ_EXPORT_carrier_proto_WifiInterface
typedef enum {
    carrier_proto_WifiInterface_Name = 1,
    carrier_proto_WifiInterface_Typ = 2,
    carrier_proto_WifiInterface_Phy = 3,
    carrier_proto_WifiInterface_Ssid = 4,
    carrier_proto_WifiInterface_Channel = 5,
    carrier_proto_WifiInterface_Txpower = 6,
    carrier_proto_WifiInterface_Stations = 7,

} carrier_proto_WifiInterface;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Path
#define ZZ_EXPORT_carrier_proto_Path
typedef enum {
    carrier_proto_Path_Ipaddr = 1,
    carrier_proto_Path_Category = 2,

} carrier_proto_Path;

#endif
#ifndef ZZ_EXPORT_carrier_proto_GenesisUpdate
#define ZZ_EXPORT_carrier_proto_GenesisUpdate
typedef enum {
    carrier_proto_GenesisUpdate_Sha256 = 1,
    carrier_proto_GenesisUpdate_PreviousSha256 = 2,
    carrier_proto_GenesisUpdate_Commit = 3,
    carrier_proto_GenesisUpdate_Data = 4,

} carrier_proto_GenesisUpdate;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetRoute
#define ZZ_EXPORT_carrier_proto_NetRoute
typedef enum {
    carrier_proto_NetRoute_Destination = 1,
    carrier_proto_NetRoute_Gateway = 2,
    carrier_proto_NetRoute_Source = 3,

} carrier_proto_NetRoute;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Publish
#define ZZ_EXPORT_carrier_proto_Publish
typedef enum {
    carrier_proto_Publish_Identity = 1,
    carrier_proto_Publish_Xaddr = 2,

} carrier_proto_Publish;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishTypes
#define ZZ_EXPORT_carrier_proto_PublishTypes
protonerf_FieldType carrier_proto_PublishTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthListResult
#define ZZ_EXPORT_carrier_proto_AuthListResult
typedef enum {
    carrier_proto_AuthListResult_Auth = 1,

} carrier_proto_AuthListResult;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceResponse
#define ZZ_EXPORT_carrier_proto_TraceResponse
typedef enum {
    carrier_proto_TraceResponse_Publishing = 1,
    carrier_proto_TraceResponse_Epoch = 2,
    carrier_proto_TraceResponse_RxBytes32 = 3,
    carrier_proto_TraceResponse_TxBytes32 = 4,
    carrier_proto_TraceResponse_LastSeen = 5,
    carrier_proto_TraceResponse_FirstSeen = 6,
    carrier_proto_TraceResponse_Allocation = 7,
    carrier_proto_TraceResponse_Brokerip = 8,
    carrier_proto_TraceResponse_PktsSent = 9,
    carrier_proto_TraceResponse_PktsLost = 10,
    carrier_proto_TraceResponse_Rtt = 11,
    carrier_proto_TraceResponse_Alias = 13,

} carrier_proto_TraceResponse;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Authorization
#define ZZ_EXPORT_carrier_proto_Authorization
typedef enum {
    carrier_proto_Authorization_Identity = 1,
    carrier_proto_Authorization_Resource = 2,

} carrier_proto_Authorization;

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationTypes
#define ZZ_EXPORT_carrier_proto_AuthorizationTypes
protonerf_FieldType carrier_proto_AuthorizationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationGetTypes
#define ZZ_EXPORT_carrier_proto_AuthorizationGetTypes
protonerf_FieldType carrier_proto_AuthorizationGetTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_FileSystem
#define ZZ_EXPORT_carrier_proto_FileSystem
typedef enum {
    carrier_proto_FileSystem_Path = 1,
    carrier_proto_FileSystem_Blocksize = 2,
    carrier_proto_FileSystem_Total = 3,
    carrier_proto_FileSystem_Free = 4,

} carrier_proto_FileSystem;

#endif
#ifndef ZZ_EXPORT_carrier_proto_DiscoveryResponse
#define ZZ_EXPORT_carrier_proto_DiscoveryResponse
typedef enum {
    carrier_proto_DiscoveryResponse_CarrierRevision = 1,
    carrier_proto_DiscoveryResponse_CarrierBuildId = 2,
    carrier_proto_DiscoveryResponse_Application = 3,
    carrier_proto_DiscoveryResponse_ApplicationVersion = 4,
    carrier_proto_DiscoveryResponse_Paths = 5,

} carrier_proto_DiscoveryResponse;

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_WifiStation
#define ZZ_EXPORT_carrier_proto_WifiStation
typedef enum {
    carrier_proto_WifiStation_Address = 1,
    carrier_proto_WifiStation_Inactive = 2,
    carrier_proto_WifiStation_RxBytes = 3,
    carrier_proto_WifiStation_RxPackets = 4,
    carrier_proto_WifiStation_TxBytes = 5,
    carrier_proto_WifiStation_TxPackets = 6,
    carrier_proto_WifiStation_TxRetries = 7,
    carrier_proto_WifiStation_TxFailed = 8,
    carrier_proto_WifiStation_BeaconLoss = 9,
    carrier_proto_WifiStation_BeaconRx = 10,
    carrier_proto_WifiStation_RxDropMisc = 11,
    carrier_proto_WifiStation_Signal = 12,
    carrier_proto_WifiStation_SignalAvg = 13,
    carrier_proto_WifiStation_BeaconSignalAvg = 14,
    carrier_proto_WifiStation_TxBitrate = 15,
    carrier_proto_WifiStation_RxBitrate = 16,
    carrier_proto_WifiStation_RxDuration = 17,
    carrier_proto_WifiStation_Expected = 18,
    carrier_proto_WifiStation_Authorized = 19,
    carrier_proto_WifiStation_Authenticated = 20,
    carrier_proto_WifiStation_Associated = 21,
    carrier_proto_WifiStation_Preamble = 22,
    carrier_proto_WifiStation_Wmm = 23,
    carrier_proto_WifiStation_Mfp = 24,
    carrier_proto_WifiStation_Tdls = 25,
    carrier_proto_WifiStation_Dtim = 26,
    carrier_proto_WifiStation_BeaconInterval = 27,
    carrier_proto_WifiStation_ShortPreamble = 28,
    carrier_proto_WifiStation_ShortSlotTime = 29,
    carrier_proto_WifiStation_ConnectedTime = 30,

} carrier_proto_WifiStation;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Alias
#define ZZ_EXPORT_carrier_proto_Alias
typedef enum {
    carrier_proto_Alias_Alias = 2,

} carrier_proto_Alias;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Belltower
#define ZZ_EXPORT_carrier_proto_Belltower
typedef enum {
    carrier_proto_Belltower_Current = 1,
    carrier_proto_Belltower_Previous = 2,

} carrier_proto_Belltower;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectRequest
#define ZZ_EXPORT_carrier_proto_ConnectRequest
typedef enum {
    carrier_proto_ConnectRequest_Target = 1,
    carrier_proto_ConnectRequest_Timestamp = 2,
    carrier_proto_ConnectRequest_Handshake = 3,
    carrier_proto_ConnectRequest_Paths = 4,
    carrier_proto_ConnectRequest_Principal = 5,
    carrier_proto_ConnectRequest_Timeout = 6,
    carrier_proto_ConnectRequest_TargetType = 7,

} carrier_proto_ConnectRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectRequest
#define ZZ_EXPORT_carrier_proto_PeerConnectRequest
typedef enum {
    carrier_proto_PeerConnectRequest_Identity = 1,
    carrier_proto_PeerConnectRequest_Timestamp = 2,
    carrier_proto_PeerConnectRequest_Handshake = 3,
    carrier_proto_PeerConnectRequest_Route = 4,
    carrier_proto_PeerConnectRequest_Paths = 5,

} carrier_proto_PeerConnectRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeChange
#define ZZ_EXPORT_carrier_proto_SubscribeChange
typedef enum {
    carrier_proto_SubscribeChange_Publish = 1,
    carrier_proto_SubscribeChange_Unpublish = 2,
    carrier_proto_SubscribeChange_Supersede = 3,

} carrier_proto_SubscribeChange;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterState
#define ZZ_EXPORT_carrier_proto_ClusterState
typedef enum {
    carrier_proto_ClusterState_Config = 1,

} carrier_proto_ClusterState;

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Claim
#define ZZ_EXPORT_carrier_proto_Claim
typedef enum {
    carrier_proto_Claim_Opt = 1,
    carrier_proto_Claim_One = 2,
    carrier_proto_Claim_All = 3,
    carrier_proto_Claim_Revoker = 4,

} carrier_proto_Claim;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ExceptionalRoute
#define ZZ_EXPORT_carrier_proto_ExceptionalRoute
typedef enum {
    carrier_proto_ExceptionalRoute_Identity = 1,
    carrier_proto_ExceptionalRoute_This = 2,
    carrier_proto_ExceptionalRoute_Other = 3,
    carrier_proto_ExceptionalRoute_Blocked = 4,

} carrier_proto_ExceptionalRoute;

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_carrier_proto_Firmware
#define ZZ_EXPORT_carrier_proto_Firmware
typedef enum {
    carrier_proto_Firmware_Board = 1,
    carrier_proto_Firmware_Distro = 2,
    carrier_proto_Firmware_Release = 3,
    carrier_proto_Firmware_Revision = 4,
    carrier_proto_Firmware_Builder = 5,
    carrier_proto_Firmware_Finger = 6,
    carrier_proto_Firmware_AndroidApiLevel = 7,

} carrier_proto_Firmware;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetdevTypes
#define ZZ_EXPORT_carrier_proto_NetdevTypes
protonerf_FieldType carrier_proto_NetdevTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectRequestTypes
#define ZZ_EXPORT_carrier_proto_ConnectRequestTypes
protonerf_FieldType carrier_proto_ConnectRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Arp
#define ZZ_EXPORT_carrier_proto_Arp
typedef enum {
    carrier_proto_Arp_Ip = 1,
    carrier_proto_Arp_Hw = 2,
    carrier_proto_Arp_Mac = 3,
    carrier_proto_Arp_Dev = 4,
    carrier_proto_Arp_Value = 5,
    carrier_proto_Arp_Null = 6,

} carrier_proto_Arp;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishChange
#define ZZ_EXPORT_carrier_proto_PublishChange
typedef enum {
    carrier_proto_PublishChange_Supersede = 1,
    carrier_proto_PublishChange_Alias = 2,

} carrier_proto_PublishChange;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishChangeTypes
#define ZZ_EXPORT_carrier_proto_PublishChangeTypes
protonerf_FieldType carrier_proto_PublishChangeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceRequest
#define ZZ_EXPORT_carrier_proto_TraceRequest
typedef enum {
    carrier_proto_TraceRequest_Target = 1,

} carrier_proto_TraceRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceRequestTypes
#define ZZ_EXPORT_carrier_proto_TraceRequestTypes
protonerf_FieldType carrier_proto_TraceRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_proto_DhcpLease
#define ZZ_EXPORT_carrier_proto_DhcpLease
typedef enum {
    carrier_proto_DhcpLease_Ts = 1,
    carrier_proto_DhcpLease_Mac = 2,
    carrier_proto_DhcpLease_Ip = 3,
    carrier_proto_DhcpLease_Name = 4,

} carrier_proto_DhcpLease;

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Sensor
#define ZZ_EXPORT_carrier_proto_Sensor
typedef enum {
    carrier_proto_Sensor_Name = 1,
    carrier_proto_Sensor_Vtype = 2,
    carrier_proto_Sensor_Value = 3,

} carrier_proto_Sensor;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClaimOne
#define ZZ_EXPORT_carrier_proto_ClaimOne
typedef enum {
    carrier_proto_ClaimOne_Target = 1,
    carrier_proto_ClaimOne_Resources = 2,

} carrier_proto_ClaimOne;

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceShadow
#define ZZ_EXPORT_carrier_proto_TraceShadow
typedef enum {
    carrier_proto_TraceShadow_Xaddress = 1,
    carrier_proto_TraceShadow_PublisherCount = 2,
    carrier_proto_TraceShadow_PublisherSoftLimit = 3,
    carrier_proto_TraceShadow_PublisherHardLimit = 4,
    carrier_proto_TraceShadow_TrafficEpoch64 = 5,
    carrier_proto_TraceShadow_TrafficLimit64 = 6,

} carrier_proto_TraceShadow;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClaimAll
#define ZZ_EXPORT_carrier_proto_ClaimAll
typedef enum {
    carrier_proto_ClaimAll_Shadow = 1,
    carrier_proto_ClaimAll_Resources = 2,

} carrier_proto_ClaimAll;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkJoin
#define ZZ_EXPORT_carrier_proto_NetworkJoin
typedef enum {
    carrier_proto_NetworkJoin_Secret = 1,

} carrier_proto_NetworkJoin;

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SupersedeTypes
#define ZZ_EXPORT_carrier_proto_SupersedeTypes
protonerf_FieldType carrier_proto_SupersedeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InnerTraceResponse
#define ZZ_EXPORT_carrier_proto_InnerTraceResponse
typedef enum {
    carrier_proto_InnerTraceResponse_Invalid = 1,
    carrier_proto_InnerTraceResponse_Pong = 2,

} carrier_proto_InnerTraceResponse;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterShard
#define ZZ_EXPORT_carrier_proto_ClusterShard
typedef enum {
    carrier_proto_ClusterShard_This = 1,
    carrier_proto_ClusterShard_Other = 2,

} carrier_proto_ClusterShard;

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InteractiveAuth
#define ZZ_EXPORT_carrier_proto_InteractiveAuth
typedef enum {
    carrier_proto_InteractiveAuth_Otp = 1,

} carrier_proto_InteractiveAuth;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PathTypes
#define ZZ_EXPORT_carrier_proto_PathTypes
protonerf_FieldType carrier_proto_PathTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Switch
#define ZZ_EXPORT_carrier_proto_Switch
typedef enum {
    carrier_proto_Switch_Name = 1,
    carrier_proto_Switch_Ports = 2,

} carrier_proto_Switch;

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeRequest
#define ZZ_EXPORT_carrier_proto_SubscribeRequest
typedef enum {
    carrier_proto_SubscribeRequest_Shadow = 1,
    carrier_proto_SubscribeRequest_Filter = 2,
    carrier_proto_SubscribeRequest_GroupKey = 3,
    carrier_proto_SubscribeRequest_GroupShard = 4,
    carrier_proto_SubscribeRequest_ShardWeight = 5,

} carrier_proto_SubscribeRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_GenesisUpdateTypes
#define ZZ_EXPORT_carrier_proto_GenesisUpdateTypes
protonerf_FieldType carrier_proto_GenesisUpdateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_proto_UnpublishTypes
#define ZZ_EXPORT_carrier_proto_UnpublishTypes
protonerf_FieldType carrier_proto_UnpublishTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InnerTraceRequest
#define ZZ_EXPORT_carrier_proto_InnerTraceRequest
typedef enum {
    carrier_proto_InnerTraceRequest_Invalid = 1,
    carrier_proto_InnerTraceRequest_Ping = 2,

} carrier_proto_InnerTraceRequest;

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_proto_GenesisCurrent
#define ZZ_EXPORT_carrier_proto_GenesisCurrent
typedef enum {
    carrier_proto_GenesisCurrent_Sha256 = 1,
    carrier_proto_GenesisCurrent_Commit = 2,
    carrier_proto_GenesisCurrent_Data = 3,
    carrier_proto_GenesisCurrent_Stable = 4,

} carrier_proto_GenesisCurrent;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NoneTypes
#define ZZ_EXPORT_carrier_proto_NoneTypes
protonerf_FieldType carrier_proto_NoneTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterStateTypes
#define ZZ_EXPORT_carrier_proto_ClusterStateTypes
protonerf_FieldType carrier_proto_ClusterStateTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationAdd
#define ZZ_EXPORT_carrier_proto_AuthorizationAdd
typedef enum {
    carrier_proto_AuthorizationAdd_Identity = 1,
    carrier_proto_AuthorizationAdd_Path = 2,

} carrier_proto_AuthorizationAdd;

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationAddTypes
#define ZZ_EXPORT_carrier_proto_AuthorizationAddTypes
protonerf_FieldType carrier_proto_AuthorizationAddTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_LocationAccuracity
#define ZZ_EXPORT_carrier_proto_LocationAccuracity
typedef enum {
    carrier_proto_LocationAccuracity_Hdop = 1,
    carrier_proto_LocationAccuracity_Vdop = 2,
    carrier_proto_LocationAccuracity_Pdop = 3,

} carrier_proto_LocationAccuracity;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Arp__HwType
#define ZZ_EXPORT_carrier_proto_Arp__HwType
typedef enum {
    carrier_proto_Arp__HwType_Unknown = 0,
    carrier_proto_Arp__HwType_Ethernet = 1,

} carrier_proto_Arp__HwType;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkJoinTypes
#define ZZ_EXPORT_carrier_proto_NetworkJoinTypes
protonerf_FieldType carrier_proto_NetworkJoinTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishRequest
#define ZZ_EXPORT_carrier_proto_PublishRequest
typedef enum {
    carrier_proto_PublishRequest_Unused = 1,
    carrier_proto_PublishRequest_Network = 2,
    carrier_proto_PublishRequest_ReceiveAlias = 3,

} carrier_proto_PublishRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishRequestTypes
#define ZZ_EXPORT_carrier_proto_PublishRequestTypes
protonerf_FieldType carrier_proto_PublishRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_CertificateRequest
#define ZZ_EXPORT_carrier_proto_CertificateRequest
typedef enum {
    carrier_proto_CertificateRequest_LastValidEpoch = 1,
    carrier_proto_CertificateRequest_Identity = 2,
    carrier_proto_CertificateRequest_Claims = 3,

} carrier_proto_CertificateRequest;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Confirmation
#define ZZ_EXPORT_carrier_proto_Confirmation
typedef enum {
    carrier_proto_Confirmation_Ok = 1,
    carrier_proto_Confirmation_Error = 2,

} carrier_proto_Confirmation;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectResponse
#define ZZ_EXPORT_carrier_proto_PeerConnectResponse
typedef enum {
    carrier_proto_PeerConnectResponse_Ok = 1,
    carrier_proto_PeerConnectResponse_Handshake = 2,
    carrier_proto_PeerConnectResponse_Paths = 3,
    carrier_proto_PeerConnectResponse_Error = 4,

} carrier_proto_PeerConnectResponse;

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectResponseTypes
#define ZZ_EXPORT_carrier_proto_PeerConnectResponseTypes
protonerf_FieldType carrier_proto_PeerConnectResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Bootloader
#define ZZ_EXPORT_carrier_proto_Bootloader
typedef enum {
    carrier_proto_Bootloader_ActiveSide = 1,
    carrier_proto_Bootloader_BootReason = 2,

} carrier_proto_Bootloader;

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterConfig
#define ZZ_EXPORT_carrier_proto_ClusterConfig
typedef enum {
    carrier_proto_ClusterConfig_Shards = 1,
    carrier_proto_ClusterConfig_ExceptionalRoutes = 2,
    carrier_proto_ClusterConfig_Epoch = 3,
    carrier_proto_ClusterConfig_DefaultShadowPublisherLimit = 4,
    carrier_proto_ClusterConfig_DefaultShadowTrafficLimit32 = 5,

} carrier_proto_ClusterConfig;

#endif
#ifndef ZZ_EXPORT_carrier_proto_DiscoveryResponseTypes
#define ZZ_EXPORT_carrier_proto_DiscoveryResponseTypes
protonerf_FieldType carrier_proto_DiscoveryResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConfigResultTypes
#define ZZ_EXPORT_carrier_proto_ConfigResultTypes
protonerf_FieldType carrier_proto_ConfigResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_FileSystemTypes
#define ZZ_EXPORT_carrier_proto_FileSystemTypes
protonerf_FieldType carrier_proto_FileSystemTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetSurvey
#define ZZ_EXPORT_carrier_proto_NetSurvey
typedef enum {
    carrier_proto_NetSurvey_Wifi = 1,
    carrier_proto_NetSurvey_Dhcp = 2,
    carrier_proto_NetSurvey_Arp = 3,
    carrier_proto_NetSurvey_Routes = 4,

} carrier_proto_NetSurvey;

#endif
#ifndef ZZ_EXPORT_carrier_proto_SensorTypes
#define ZZ_EXPORT_carrier_proto_SensorTypes
protonerf_FieldType carrier_proto_SensorTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeChangeTypes
#define ZZ_EXPORT_carrier_proto_SubscribeChangeTypes
protonerf_FieldType carrier_proto_SubscribeChangeTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceShadowTypes
#define ZZ_EXPORT_carrier_proto_TraceShadowTypes
protonerf_FieldType carrier_proto_TraceShadowTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SysinfoTypes
#define ZZ_EXPORT_carrier_proto_SysinfoTypes
protonerf_FieldType carrier_proto_SysinfoTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_proto_FirmwareTypes
#define ZZ_EXPORT_carrier_proto_FirmwareTypes
protonerf_FieldType carrier_proto_FirmwareTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConfirmationTypes
#define ZZ_EXPORT_carrier_proto_ConfirmationTypes
protonerf_FieldType carrier_proto_ConfirmationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_WifiInterfaceTypes
#define ZZ_EXPORT_carrier_proto_WifiInterfaceTypes
protonerf_FieldType carrier_proto_WifiInterfaceTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectRequestTypes
#define ZZ_EXPORT_carrier_proto_PeerConnectRequestTypes
protonerf_FieldType carrier_proto_PeerConnectRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_proto_FilterByRole
#define ZZ_EXPORT_carrier_proto_FilterByRole
typedef enum {
    carrier_proto_FilterByRole_Roles = 1,

} carrier_proto_FilterByRole;

#endif
#ifndef ZZ_EXPORT_carrier_proto_FilterByRoleTypes
#define ZZ_EXPORT_carrier_proto_FilterByRoleTypes
protonerf_FieldType carrier_proto_FilterByRoleTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InnerTraceResponseTypes
#define ZZ_EXPORT_carrier_proto_InnerTraceResponseTypes
protonerf_FieldType carrier_proto_InnerTraceResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SwitchPortTypes
#define ZZ_EXPORT_carrier_proto_SwitchPortTypes
protonerf_FieldType carrier_proto_SwitchPortTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_MoveInstruction
#define ZZ_EXPORT_carrier_proto_MoveInstruction
typedef enum {
    carrier_proto_MoveInstruction_Ipaddr = 1,
    carrier_proto_MoveInstruction_Xaddr = 2,

} carrier_proto_MoveInstruction;

#endif
#ifndef ZZ_EXPORT_carrier_proto_MoveInstructionTypes
#define ZZ_EXPORT_carrier_proto_MoveInstructionTypes
protonerf_FieldType carrier_proto_MoveInstructionTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_LocationVelocity
#define ZZ_EXPORT_carrier_proto_LocationVelocity
typedef enum {
    carrier_proto_LocationVelocity_Course = 1,
    carrier_proto_LocationVelocity_Speed = 2,

} carrier_proto_LocationVelocity;

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClaimOneTypes
#define ZZ_EXPORT_carrier_proto_ClaimOneTypes
protonerf_FieldType carrier_proto_ClaimOneTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Revoker
#define ZZ_EXPORT_carrier_proto_Revoker
typedef enum {
    carrier_proto_Revoker_Identity = 1,

} carrier_proto_Revoker;

#endif
#ifndef ZZ_EXPORT_carrier_proto_RevokerTypes
#define ZZ_EXPORT_carrier_proto_RevokerTypes
protonerf_FieldType carrier_proto_RevokerTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Netdev__Duplex
#define ZZ_EXPORT_carrier_proto_Netdev__Duplex
typedef enum {
    carrier_proto_Netdev__Duplex_Invalid = 0,
    carrier_proto_Netdev__Duplex_Half = 1,
    carrier_proto_Netdev__Duplex_Full = 2,

} carrier_proto_Netdev__Duplex;

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationListTypes
#define ZZ_EXPORT_carrier_proto_AuthorizationListTypes
protonerf_FieldType carrier_proto_AuthorizationListTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterConfigTypes
#define ZZ_EXPORT_carrier_proto_ClusterConfigTypes
protonerf_FieldType carrier_proto_ClusterConfigTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkGetResult
#define ZZ_EXPORT_carrier_proto_NetworkGetResult
typedef enum {
    carrier_proto_NetworkGetResult_Address = 2,

} carrier_proto_NetworkGetResult;

#endif
#ifndef ZZ_EXPORT_carrier_proto_LocationVelocityTypes
#define ZZ_EXPORT_carrier_proto_LocationVelocityTypes
protonerf_FieldType carrier_proto_LocationVelocityTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ProtoHeader
#define ZZ_EXPORT_carrier_proto_ProtoHeader
typedef enum {
    carrier_proto_ProtoHeader_Len = 1,

} carrier_proto_ProtoHeader;

#endif
#ifndef ZZ_EXPORT_carrier_proto_Sensor__ValueType
#define ZZ_EXPORT_carrier_proto_Sensor__ValueType
typedef enum {
    carrier_proto_Sensor__ValueType_None = 0,
    carrier_proto_Sensor__ValueType_MilliCelsius = 1,

} carrier_proto_Sensor__ValueType;

#endif
#ifndef ZZ_EXPORT_carrier_proto_SatelliteTypes
#define ZZ_EXPORT_carrier_proto_SatelliteTypes
protonerf_FieldType carrier_proto_SatelliteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Mem
#define ZZ_EXPORT_carrier_proto_Mem
typedef enum {
    carrier_proto_Mem_Total = 1,
    carrier_proto_Mem_Free = 2,
    carrier_proto_Mem_Available = 3,

} carrier_proto_Mem;

#endif
#ifndef ZZ_EXPORT_carrier_proto_MemTypes
#define ZZ_EXPORT_carrier_proto_MemTypes
protonerf_FieldType carrier_proto_MemTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Satellite__Constellation
#define ZZ_EXPORT_carrier_proto_Satellite__Constellation
typedef enum {
    carrier_proto_Satellite__Constellation_Unknown = 0,
    carrier_proto_Satellite__Constellation_Galileo = 1,
    carrier_proto_Satellite__Constellation_Gps = 2,
    carrier_proto_Satellite__Constellation_Glonass = 3,

} carrier_proto_Satellite__Constellation;

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_proto_LocationTypes
#define ZZ_EXPORT_carrier_proto_LocationTypes
protonerf_FieldType carrier_proto_LocationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_proto_TraceResponseTypes
#define ZZ_EXPORT_carrier_proto_TraceResponseTypes
protonerf_FieldType carrier_proto_TraceResponseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthListResultTypes
#define ZZ_EXPORT_carrier_proto_AuthListResultTypes
protonerf_FieldType carrier_proto_AuthListResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Sensors
#define ZZ_EXPORT_carrier_proto_Sensors
typedef enum {
    carrier_proto_Sensors_Sensors = 1,

} carrier_proto_Sensors;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkGetResultTypes
#define ZZ_EXPORT_carrier_proto_NetworkGetResultTypes
protonerf_FieldType carrier_proto_NetworkGetResultTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Location__Fix
#define ZZ_EXPORT_carrier_proto_Location__Fix
typedef enum {
    carrier_proto_Location__Fix_None = 0,
    carrier_proto_Location__Fix_Gps = 1,
    carrier_proto_Location__Fix_DGps = 2,
    carrier_proto_Location__Fix_Pps = 3,
    carrier_proto_Location__Fix_Rtk = 4,
    carrier_proto_Location__Fix_FloatRtk = 5,
    carrier_proto_Location__Fix_Estimated = 6,
    carrier_proto_Location__Fix_Manual = 7,
    carrier_proto_Location__Fix_Simulation = 8,

} carrier_proto_Location__Fix;

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_proto_BootloaderTypes
#define ZZ_EXPORT_carrier_proto_BootloaderTypes
protonerf_FieldType carrier_proto_BootloaderTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetRouteTypes
#define ZZ_EXPORT_carrier_proto_NetRouteTypes
protonerf_FieldType carrier_proto_NetRouteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InteractiveAuthTypes
#define ZZ_EXPORT_carrier_proto_InteractiveAuthTypes
protonerf_FieldType carrier_proto_InteractiveAuthTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SensorsTypes
#define ZZ_EXPORT_carrier_proto_SensorsTypes
protonerf_FieldType carrier_proto_SensorsTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClusterShardTypes
#define ZZ_EXPORT_carrier_proto_ClusterShardTypes
protonerf_FieldType carrier_proto_ClusterShardTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_proto_DhcpLeaseTypes
#define ZZ_EXPORT_carrier_proto_DhcpLeaseTypes
protonerf_FieldType carrier_proto_DhcpLeaseTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ArpTypes
#define ZZ_EXPORT_carrier_proto_ArpTypes
protonerf_FieldType carrier_proto_ArpTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationDel
#define ZZ_EXPORT_carrier_proto_AuthorizationDel
typedef enum {
    carrier_proto_AuthorizationDel_Identity = 1,

} carrier_proto_AuthorizationDel;

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SwitchTypes
#define ZZ_EXPORT_carrier_proto_SwitchTypes
protonerf_FieldType carrier_proto_SwitchTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetAddressTypes
#define ZZ_EXPORT_carrier_proto_NetAddressTypes
protonerf_FieldType carrier_proto_NetAddressTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Path__Category
#define ZZ_EXPORT_carrier_proto_Path__Category
typedef enum {
    carrier_proto_Path__Category_Invalid = 0,
    carrier_proto_Path__Category_Local = 1,
    carrier_proto_Path__Category_Internet = 2,
    carrier_proto_Path__Category_BrokerOrigin = 3,

} carrier_proto_Path__Category;

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkGetTypes
#define ZZ_EXPORT_carrier_proto_NetworkGetTypes
protonerf_FieldType carrier_proto_NetworkGetTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_BelltowerTypes
#define ZZ_EXPORT_carrier_proto_BelltowerTypes
protonerf_FieldType carrier_proto_BelltowerTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ExceptionalRouteTypes
#define ZZ_EXPORT_carrier_proto_ExceptionalRouteTypes
protonerf_FieldType carrier_proto_ExceptionalRouteTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_LoadTypes
#define ZZ_EXPORT_carrier_proto_LoadTypes
protonerf_FieldType carrier_proto_LoadTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_CertificateRequestTypes
#define ZZ_EXPORT_carrier_proto_CertificateRequestTypes
protonerf_FieldType carrier_proto_CertificateRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_proto_SubscribeRequestTypes
#define ZZ_EXPORT_carrier_proto_SubscribeRequestTypes
protonerf_FieldType carrier_proto_SubscribeRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_FilterTypes
#define ZZ_EXPORT_carrier_proto_FilterTypes
protonerf_FieldType carrier_proto_FilterTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_proto_LocationAccuracityTypes
#define ZZ_EXPORT_carrier_proto_LocationAccuracityTypes
protonerf_FieldType carrier_proto_LocationAccuracityTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_EmptyTypes
#define ZZ_EXPORT_carrier_proto_EmptyTypes
protonerf_FieldType carrier_proto_EmptyTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_WifiStationTypes
#define ZZ_EXPORT_carrier_proto_WifiStationTypes
protonerf_FieldType carrier_proto_WifiStationTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationDelTypes
#define ZZ_EXPORT_carrier_proto_AuthorizationDelTypes
protonerf_FieldType carrier_proto_AuthorizationDelTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetSurveyTypes
#define ZZ_EXPORT_carrier_proto_NetSurveyTypes
protonerf_FieldType carrier_proto_NetSurveyTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClaimAllTypes
#define ZZ_EXPORT_carrier_proto_ClaimAllTypes
protonerf_FieldType carrier_proto_ClaimAllTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_proto_GenesisCurrentTypes
#define ZZ_EXPORT_carrier_proto_GenesisCurrentTypes
protonerf_FieldType carrier_proto_GenesisCurrentTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ClaimTypes
#define ZZ_EXPORT_carrier_proto_ClaimTypes
protonerf_FieldType carrier_proto_ClaimTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AliasTypes
#define ZZ_EXPORT_carrier_proto_AliasTypes
protonerf_FieldType carrier_proto_AliasTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_proto_InnerTraceRequestTypes
#define ZZ_EXPORT_carrier_proto_InnerTraceRequestTypes
protonerf_FieldType carrier_proto_InnerTraceRequestTypes (uintptr_t const  index);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ProtoHeaderTypes
#define ZZ_EXPORT_carrier_proto_ProtoHeaderTypes
protonerf_FieldType carrier_proto_ProtoHeaderTypes (uintptr_t const  index);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_hpack_decoder_callback
#define ZZ_FORWARD_hpack_decoder_callback
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_hpack_decoder_STATIC_VALS
#define ZZ_FORWARD_hpack_decoder_STATIC_VALS
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Repr
#define ZZ_FORWARD_hpack_decoder_Repr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_hpack_decoder_get_repr
#define ZZ_FORWARD_hpack_decoder_get_repr
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_hpack_decoder_STATIC_KEYS
#define ZZ_FORWARD_hpack_decoder_STATIC_KEYS
#endif
#ifndef ZZ_FORWARD_err_NotImplemented
#define ZZ_FORWARD_err_NotImplemented
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Invalid
#define ZZ_FORWARD_hpack_decoder_Invalid
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_hpack_decoder_get_repr
#define ZZ_FORWARD_hpack_decoder_get_repr
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_callback
#define ZZ_EXPORT_hpack_decoder_callback
#if !defined(ZZ_HAS_DEFINED_CLOSURE_hpack_decoder_callback)
#define ZZ_HAS_DEFINED_CLOSURE_hpack_decoder_callback 1
typedef struct {
    void *ctx;
    void (*fn) (err_Err*  const  e, uintptr_t const  et, void*  const  user, slice_slice_Slice const *  const  key, slice_slice_Slice const *  const  val, void * _ctx);
} hpack_decoder_callback;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_hpack_decoder_callback)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Repr
#define ZZ_EXPORT_hpack_decoder_Repr
typedef enum {
    hpack_decoder_Repr_Indexed = 0,
    hpack_decoder_Repr_LiteralWithIncrementalIndexing = 1,
    hpack_decoder_Repr_SizeUpdate = 2,
    hpack_decoder_Repr_LiteralNeverIndexed = 3,
    hpack_decoder_Repr_LiteralWithoutIndexing = 4,

} hpack_decoder_Repr;

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_get_repr
#define ZZ_EXPORT_hpack_decoder_get_repr
static hpack_decoder_Repr hpack_decoder_get_repr (uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_NotImplemented
#define ZZ_EXPORT_err_NotImplemented
extern const __attribute__ ((unused)) size_t err_NotImplemented;

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Invalid
#define ZZ_EXPORT_hpack_decoder_Invalid
extern const __attribute__ ((unused)) size_t hpack_decoder_Invalid;

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_get_repr
#define ZZ_EXPORT_hpack_decoder_get_repr
static hpack_decoder_Repr hpack_decoder_get_repr (uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_err_SystemError
#define ZZ_FORWARD_err_SystemError
#endif
#ifndef ZZ_FORWARD__errno_h_
#define ZZ_FORWARD__errno_h_
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_rand_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_rand_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_rand_rand
#define ZZ_FORWARD_carrier_rand_rand
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_SystemError
#define ZZ_EXPORT_err_SystemError
extern const __attribute__ ((unused)) size_t err_SystemError;

#endif
#ifndef ZZ_EXPORT__errno_h_
#define ZZ_EXPORT__errno_h_
#include <errno.h>

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_rand_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_rand_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/src/rand_os.h"
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>


#if defined(__linux__) || defined(__APPLE__)
static void os_rand(err_Err*  const  e, uintptr_t const  et, uint8_t*  bytes, uintptr_t size)
{
    int const  fd  =     (int)(    open(    "/dev/urandom",    O_RDONLY    ));
    if (fd < 0){
        err_fail_with_errno(e, et, __FILE__, __FUNCTION__, __LINE__, "cannot open /dev/urandom");
        return ;
    }

    for (;;){
        int const  l  =     (int)(    read(    fd,    bytes,    size    ));
        if (l <    0  ) {
            if (((int)(errno) ==    (int)(    EINTR)  )){
                continue;
            }

            err_fail_with_errno(e, et, __FILE__, __FUNCTION__, __LINE__, "cannot read /dev/urandom");
            close(fd);
            return;
        }

        if (l >= size) {
            close(fd);
            return ;
        }

        size  -= l;
        bytes += l;
    }
    close(fd);
}
#elif defined(ESP_PLATFORM)
#include "esp_system.h"
static void os_rand(err_Err*  const  e, uintptr_t const  et, uint8_t*  bytes, uintptr_t size)
{
    esp_fill_random(bytes, size);
}
#endif

#endif
#ifndef ZZ_EXPORT_carrier_rand_rand
#define ZZ_EXPORT_carrier_rand_rand
extern void carrier_rand_rand (err_Err*  const  e, uintptr_t const  et, uint8_t*  bytes, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_crc8_crc8_slow
#define ZZ_FORWARD_carrier_crc8_crc8_slow
#endif
#ifndef ZZ_FORWARD_carrier_crc8_crc8_table
#define ZZ_FORWARD_carrier_crc8_crc8_table
#endif
#ifndef ZZ_FORWARD_carrier_crc8_crc8
#define ZZ_FORWARD_carrier_crc8_crc8
#endif
#ifndef ZZ_FORWARD_carrier_crc8_broken_crc8
#define ZZ_FORWARD_carrier_crc8_broken_crc8
#endif
#ifndef ZZ_EXPORT_carrier_crc8_crc8_slow
#define ZZ_EXPORT_carrier_crc8_crc8_slow
extern uint8_t carrier_crc8_crc8_slow (uint8_t crc, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_crc8_crc8
#define ZZ_EXPORT_carrier_crc8_crc8
uint8_t carrier_crc8_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_crc8_broken_crc8
#define ZZ_EXPORT_carrier_crc8_broken_crc8
uint8_t carrier_crc8_broken_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  length);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_toml_ParseError
#define ZZ_FORWARD_toml_ParseError
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_toml_ParseError
#define ZZ_EXPORT_toml_ParseError
extern const __attribute__ ((unused)) size_t toml_ParseError;

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_identity_sign
#define ZZ_FORWARD_carrier_identity_sign
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_secret
#define ZZ_FORWARD_carrier_identity_identity_from_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD__memory_h_
#define ZZ_FORWARD__memory_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_real
#define ZZ_FORWARD_time_real
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_NotImplemented
#define ZZ_FORWARD_err_NotImplemented
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_secret
#define ZZ_FORWARD_carrier_identity_address_from_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_sign
#define ZZ_EXPORT_carrier_identity_sign
void carrier_identity_sign (carrier_identity_Secret const *  const  key, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_secret
#define ZZ_EXPORT_carrier_identity_identity_from_secret
void carrier_identity_identity_from_secret (carrier_identity_Identity*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT__memory_h_
#define ZZ_EXPORT__memory_h_
#include <memory.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_time_real
#define ZZ_EXPORT_time_real
time_Time time_real ();

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_NotImplemented
#define ZZ_EXPORT_err_NotImplemented
extern const __attribute__ ((unused)) size_t err_NotImplemented;

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_secret
#define ZZ_EXPORT_carrier_identity_address_from_secret
void carrier_identity_address_from_secret (carrier_identity_Address*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_fs_src_native_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_fs_src_native_h_
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_fs_get_homedir
#define ZZ_FORWARD_fs_get_homedir
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_fs_src_native_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_fs_src_native_h_

#line 1 "/home/aep/proj/devguard/carrier/core/modules/fs/src/native.h"

#if defined(__linux__) || defined(__APPLE__)


#include <unistd.h>
#include <sys/types.h>
#include <pwd.h>
#include <string.h>


static size_t os_get_homedir(char *to, size_t to_len)
{
    struct passwd *pw = getpwuid(getuid());
    if (pw == 0) {
        return 0;
    }
    const char *homedir = pw->pw_dir;

    size_t ll = strlen(homedir);

    if (ll > to_len) {
        memcpy(to, homedir, to_len);
        return to_len;
    } else {
        memcpy(to, homedir, ll);
        return ll;
    }
}


#else
static size_t os_get_homedir(char *to, size_t to_len)
{
    *to = '/';
    return 1;
}
#endif





#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_fs_get_homedir
#define ZZ_EXPORT_fs_get_homedir
void fs_get_homedir (err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_symbols_nameof_checked
#define ZZ_FORWARD_symbols_nameof_checked
#endif
#ifndef ZZ_FORWARD_symbols_nameof
#define ZZ_FORWARD_symbols_nameof
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_SystemError
#define ZZ_FORWARD_err_SystemError
#endif
#ifndef ZZ_FORWARD__errno_h_
#define ZZ_FORWARD__errno_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_err_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_err_src_os_h_
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_err_assert2
#define ZZ_FORWARD_err_assert2
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_NotImplemented
#define ZZ_FORWARD_err_NotImplemented
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_err_panic
#define ZZ_FORWARD_err_panic
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_symbols_nameof_checked
#define ZZ_EXPORT_symbols_nameof_checked
char  const * symbols_nameof_checked (uintptr_t const  s);

#endif
#ifndef ZZ_EXPORT_symbols_nameof
#define ZZ_EXPORT_symbols_nameof
char  const * symbols_nameof (uintptr_t const  s);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_SystemError
#define ZZ_EXPORT_err_SystemError
extern const __attribute__ ((unused)) size_t err_SystemError;

#endif
#ifndef ZZ_EXPORT__errno_h_
#define ZZ_EXPORT__errno_h_
#include <errno.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_err_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_err_src_os_h_

#line 1 "/home/aep/proj/zz/modules/err/src/os.h"
#include <stdlib.h>
#if defined(_WIN32)
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif


#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_assert2
#define ZZ_EXPORT_err_assert2
void err_assert2 (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_NotImplemented
#define ZZ_EXPORT_err_NotImplemented
extern const __attribute__ ((unused)) size_t err_NotImplemented;

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_panic
#define ZZ_EXPORT_err_panic
void err_panic (char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Hash_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Hash_h_
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_sha256_BLOCKLEN
#define ZZ_FORWARD_carrier_sha256_BLOCKLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_blocklen
#define ZZ_FORWARD_carrier_sha256_blocklen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_hmac
#define ZZ_FORWARD_carrier_sha256_hmac
#endif
#ifndef ZZ_FORWARD_carrier_sha256_hkdf
#define ZZ_FORWARD_carrier_sha256_hkdf
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_sha256_hashlen
#define ZZ_FORWARD_carrier_sha256_hashlen
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_hmac
#define ZZ_FORWARD_carrier_sha256_hmac
#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Hash_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Hash_h_
#include "../../c/3rdparty_hacl_star_dist_gcc_compatible_Hacl_Hash_h.h"

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_BLOCKLEN
#define ZZ_EXPORT_carrier_sha256_BLOCKLEN
#define carrier_sha256_BLOCKLEN ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_blocklen
#define ZZ_EXPORT_carrier_sha256_blocklen
uintptr_t carrier_sha256_blocklen ();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_hmac
#define ZZ_EXPORT_carrier_sha256_hmac
extern void carrier_sha256_hmac (uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  data, uintptr_t const  datalen, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_hkdf
#define ZZ_EXPORT_carrier_sha256_hkdf
extern void carrier_sha256_hkdf (uint8_t const *  const  chaining_key, uint8_t const *  const  input_key_material, uintptr_t const  input_key_material_len, uint8_t*  const  out1, uint8_t*  const  out2, uint8_t*  const  out3);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_hashlen
#define ZZ_EXPORT_carrier_sha256_hashlen
uintptr_t carrier_sha256_hashlen ();

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_hmac
#define ZZ_EXPORT_carrier_sha256_hmac
extern void carrier_sha256_hmac (uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  data, uintptr_t const  datalen, uint8_t*  const  out);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_8
#define ZZ_FORWARD_buffer_Buffer_8
struct buffer_Buffer_8_t;
typedef struct buffer_Buffer_8_t buffer_Buffer_8;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_io_NotImplemented
#define ZZ_FORWARD_io_NotImplemented
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_io_poll_fn
#define ZZ_FORWARD_io_poll_fn
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_8
#define ZZ_FORWARD_buffer_Buffer_8
struct buffer_Buffer_8_t;
typedef struct buffer_Buffer_8_t buffer_Buffer_8;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_io_Timeout
#define ZZ_FORWARD_io_Timeout
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_NotImplemented
#define ZZ_EXPORT_io_NotImplemented
extern const __attribute__ ((unused)) size_t io_NotImplemented;

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_poll_fn
#define ZZ_EXPORT_io_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_poll_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (void*  const  user, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} io_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_poll_fn)

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_8_8
#define ZZ_EXPORT_buffer_Buffer_8_8
struct buffer_Buffer_8_t {
   uintptr_t at ;
   char mem[8] ;
}
;
size_t sizeof_buffer_Buffer_8();

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_io_Timeout
#define ZZ_EXPORT_io_Timeout
extern const __attribute__ ((unused)) size_t io_Timeout;

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#define ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_revision_revision
#define ZZ_FORWARD_carrier_revision_revision
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_identity_nullcheck
#define ZZ_FORWARD_carrier_identity_nullcheck
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_parse_record
#define ZZ_FORWARD_carrier_bootstrap_parse_record
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_crc8_broken_crc8
#define ZZ_FORWARD_carrier_crc8_broken_crc8
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_PROLOGUE
#define ZZ_FORWARD_carrier_endpoint_PROLOGUE
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#define ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_router_Direction
#define ZZ_FORWARD_carrier_router_Direction
#endif
#ifndef ZZ_FORWARD_carrier_router_read_routing_key
#define ZZ_FORWARD_carrier_router_read_routing_key
#endif
#ifndef ZZ_FORWARD_byteorder_from_be64
#define ZZ_FORWARD_byteorder_from_be64
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_carrier_identity_verify
#define ZZ_FORWARD_carrier_identity_verify
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str
#define ZZ_FORWARD_carrier_identity_identity_to_str
#endif
#ifndef ZZ_FORWARD_time_tick
#define ZZ_FORWARD_time_tick
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define carrier_endpoint_SIGN_PURPOSE ((char  const * )    "carrier handshake hash 1")

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_revision_revision
#define ZZ_EXPORT_carrier_revision_revision
uint32_t  static inline carrier_revision_revision ();

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_nullcheck
#define ZZ_EXPORT_carrier_identity_nullcheck
void carrier_identity_nullcheck (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_parse_record
#define ZZ_EXPORT_carrier_bootstrap_parse_record
extern bool carrier_bootstrap_parse_record (buffer_Buffer const *  const  record, uintptr_t const  st, carrier_vault_Broker*  const  entry);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_crc8_broken_crc8
#define ZZ_EXPORT_carrier_crc8_broken_crc8
uint8_t carrier_crc8_broken_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  length);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define carrier_endpoint_PROLOGUE ((char  const * )    "carrier has arrived")

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_channel_transfer_from_symmetric
#define ZZ_EXPORT_carrier_channel_transfer_from_symmetric
extern carrier_channel_Transfer carrier_channel_transfer_from_symmetric (carrier_symmetric_SymmetricState const *  const  symm, uint8_t const  version, uint64_t const  route, bool const  responder);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_router_Direction
#define ZZ_EXPORT_carrier_router_Direction
typedef enum {
    carrier_router_Direction_Initiator2Responder = 0,
    carrier_router_Direction_Responder2Initiator = 1,

} carrier_router_Direction;

#endif
#ifndef ZZ_EXPORT_carrier_router_read_routing_key
#define ZZ_EXPORT_carrier_router_read_routing_key
extern uint64_t carrier_router_read_routing_key (uint8_t const *  const  i, carrier_router_Direction*  const  direction);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be64
#define ZZ_EXPORT_byteorder_from_be64
uint64_t  static inline byteorder_from_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_verify
#define ZZ_EXPORT_carrier_identity_verify
bool carrier_identity_verify (carrier_identity_Identity const *  const  pk, carrier_identity_Signature const *  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str
#define ZZ_EXPORT_carrier_identity_identity_to_str
uintptr_t carrier_identity_identity_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_time_tick
#define ZZ_EXPORT_time_tick
time_Time time_tick ();

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le64
#define ZZ_FORWARD_byteorder_to_le64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le16
#define ZZ_FORWARD_byteorder_to_le16
#endif
#ifndef ZZ_FORWARD_byteorder_from_le16
#define ZZ_FORWARD_byteorder_from_le16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_byteorder_from_be32
#define ZZ_FORWARD_byteorder_from_be32
#endif
#ifndef ZZ_FORWARD_byteorder_from_be64
#define ZZ_FORWARD_byteorder_from_be64
#endif
#ifndef ZZ_FORWARD_byteorder_to_le32
#define ZZ_FORWARD_byteorder_to_le32
#endif
#ifndef ZZ_FORWARD_byteorder_from_le64
#define ZZ_FORWARD_byteorder_from_le64
#endif
#ifndef ZZ_FORWARD_byteorder_from_le32
#define ZZ_FORWARD_byteorder_from_le32
#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le64
#define ZZ_EXPORT_byteorder_to_le64
uint64_t  static inline byteorder_to_le64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le16
#define ZZ_EXPORT_byteorder_to_le16
uint16_t  static inline byteorder_to_le16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_le16
#define ZZ_EXPORT_byteorder_from_le16
uint16_t  static inline byteorder_from_le16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be32
#define ZZ_EXPORT_byteorder_from_be32
uint32_t  static inline byteorder_from_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be64
#define ZZ_EXPORT_byteorder_from_be64
uint64_t  static inline byteorder_from_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_le32
#define ZZ_EXPORT_byteorder_to_le32
uint32_t  static inline byteorder_to_le32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_le64
#define ZZ_EXPORT_byteorder_from_le64
uint64_t  static inline byteorder_from_le64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_le32
#define ZZ_EXPORT_byteorder_from_le32
uint32_t  static inline byteorder_from_le32 (uint32_t const  x);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_128
#define ZZ_FORWARD_buffer_Buffer_128
struct buffer_Buffer_128_t;
typedef struct buffer_Buffer_128_t buffer_Buffer_128;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_proto_DiscoveryResponse
#define ZZ_FORWARD_carrier_proto_DiscoveryResponse
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_revision_build_id
#define ZZ_FORWARD_carrier_revision_build_id
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_err_assert
#define ZZ_FORWARD_err_assert
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD_carrier_revision_revision
#define ZZ_FORWARD_carrier_revision_revision
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_tick
#define ZZ_FORWARD_time_tick
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_byteorder_from_be32
#define ZZ_FORWARD_byteorder_from_be32
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_128
#define ZZ_FORWARD_buffer_Buffer_128
struct buffer_Buffer_128_t;
typedef struct buffer_Buffer_128_t buffer_Buffer_128;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_byteorder_swap16
#define ZZ_FORWARD_byteorder_swap16
#endif
#ifndef ZZ_FORWARD_byteorder_to_be16
#define ZZ_FORWARD_byteorder_to_be16
#endif
#ifndef ZZ_FORWARD_byteorder_from_be16
#define ZZ_FORWARD_byteorder_from_be16
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_byteorder_from_be64
#define ZZ_FORWARD_byteorder_from_be64
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#define ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_crc8_broken_crc8
#define ZZ_FORWARD_carrier_crc8_broken_crc8
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_time_from_millis
#define ZZ_FORWARD_time_from_millis
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_channel_disconnect
#define ZZ_FORWARD_carrier_channel_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_channel_disconnect
#define ZZ_FORWARD_carrier_channel_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_proto_DiscoveryResponse
#define ZZ_EXPORT_carrier_proto_DiscoveryResponse
typedef enum {
    carrier_proto_DiscoveryResponse_CarrierRevision = 1,
    carrier_proto_DiscoveryResponse_CarrierBuildId = 2,
    carrier_proto_DiscoveryResponse_Application = 3,
    carrier_proto_DiscoveryResponse_ApplicationVersion = 4,
    carrier_proto_DiscoveryResponse_Paths = 5,

} carrier_proto_DiscoveryResponse;

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_revision_build_id
#define ZZ_EXPORT_carrier_revision_build_id
char  const * carrier_revision_build_id ();

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_assert
#define ZZ_EXPORT_err_assert
void err_assert (bool const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT_carrier_revision_revision
#define ZZ_EXPORT_carrier_revision_revision
uint32_t  static inline carrier_revision_revision ();

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_time_tick
#define ZZ_EXPORT_time_tick
time_Time time_tick ();

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_byteorder_from_be32
#define ZZ_EXPORT_byteorder_from_be32
uint32_t  static inline byteorder_from_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_128_128
#define ZZ_EXPORT_buffer_Buffer_128_128
struct buffer_Buffer_128_t {
   uintptr_t at ;
   char mem[128] ;
}
;
size_t sizeof_buffer_Buffer_128();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_byteorder_swap16
#define ZZ_EXPORT_byteorder_swap16
uint16_t  static inline byteorder_swap16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be16
#define ZZ_EXPORT_byteorder_to_be16
uint16_t  static inline byteorder_to_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_from_be16
#define ZZ_EXPORT_byteorder_from_be16
uint16_t  static inline byteorder_from_be16 (uint16_t const  x);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_byteorder_from_be64
#define ZZ_EXPORT_byteorder_from_be64
uint64_t  static inline byteorder_from_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_channel_transfer_from_symmetric
#define ZZ_EXPORT_carrier_channel_transfer_from_symmetric
extern carrier_channel_Transfer carrier_channel_transfer_from_symmetric (carrier_symmetric_SymmetricState const *  const  symm, uint8_t const  version, uint64_t const  route, bool const  responder);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_crc8_broken_crc8
#define ZZ_EXPORT_carrier_crc8_broken_crc8
uint8_t carrier_crc8_broken_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  length);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_time_from_millis
#define ZZ_EXPORT_time_from_millis
time_Time time_from_millis (uint64_t const  millis);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disconnect
#define ZZ_EXPORT_carrier_channel_disconnect
static void carrier_channel_disconnect (carrier_channel_Channel*  const  this, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disconnect
#define ZZ_EXPORT_carrier_channel_disconnect
static void carrier_channel_disconnect (carrier_channel_Channel*  const  this, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_symbols_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_symbols_src_lib_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_symbols_nameof
#define ZZ_FORWARD_symbols_nameof
#endif
#ifndef ZZ_FORWARD_symbols_nameof_checked
#define ZZ_FORWARD_symbols_nameof_checked
#endif
#ifndef ZZ_FORWARD_symbols_nameof
#define ZZ_FORWARD_symbols_nameof
#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_symbols_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_symbols_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/symbols/src/lib.h"
#include <stdlib.h>

extern size_t __attribute__ ((unused)) __zz_symbol_names_len;
extern const char * __attribute__ ((unused)) __zz_symbol_names[];


#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_symbols_nameof
#define ZZ_EXPORT_symbols_nameof
char  const * symbols_nameof (uintptr_t const  s);

#endif
#ifndef ZZ_EXPORT_symbols_nameof_checked
#define ZZ_EXPORT_symbols_nameof_checked
char  const * symbols_nameof_checked (uintptr_t const  s);

#endif
#ifndef ZZ_EXPORT_symbols_nameof
#define ZZ_EXPORT_symbols_nameof
char  const * symbols_nameof (uintptr_t const  s);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode_integer
#define ZZ_FORWARD_hpack_encoder_encode_integer
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_NotImplemented
#define ZZ_FORWARD_err_NotImplemented
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode_integer
#define ZZ_FORWARD_hpack_encoder_encode_integer
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode_integer
#define ZZ_EXPORT_hpack_encoder_encode_integer
extern void hpack_encoder_encode_integer (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uintptr_t const  value, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_NotImplemented
#define ZZ_EXPORT_err_NotImplemented
extern const __attribute__ ((unused)) size_t err_NotImplemented;

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode_integer
#define ZZ_EXPORT_hpack_encoder_encode_integer
extern void hpack_encoder_encode_integer (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uintptr_t const  value, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_100
#define ZZ_FORWARD_err_Err_100
struct err_Err_100_t;
typedef struct err_Err_100_t err_Err_100;
#endif
#ifndef ZZ_FORWARD_err_Err_1000
#define ZZ_FORWARD_err_Err_1000
struct err_Err_1000_t;
typedef struct err_Err_1000_t err_Err_1000;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_256
#define ZZ_FORWARD_buffer_Buffer_256
struct buffer_Buffer_256_t;
typedef struct buffer_Buffer_256_t buffer_Buffer_256;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_256
#define ZZ_FORWARD_buffer_Buffer_256
struct buffer_Buffer_256_t;
typedef struct buffer_Buffer_256_t buffer_Buffer_256;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_add_del_stream
#define ZZ_FORWARD_carrier_config_auth_add_del_stream
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_add_stream
#define ZZ_FORWARD_carrier_config_auth_add_stream
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_get_cb
#define ZZ_FORWARD_carrier_config_auth_get_cb
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_get
#define ZZ_FORWARD_carrier_config_auth_get
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthorizationAdd
#define ZZ_FORWARD_carrier_proto_AuthorizationAdd
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str
#define ZZ_FORWARD_carrier_identity_identity_to_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_config_return_err
#define ZZ_FORWARD_carrier_config_return_err
#endif
#ifndef ZZ_FORWARD_carrier_identity_isnull
#define ZZ_FORWARD_carrier_identity_isnull
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConfigResult
#define ZZ_FORWARD_carrier_proto_ConfigResult
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_add_del_stream
#define ZZ_FORWARD_carrier_config_auth_add_del_stream
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_del_stream
#define ZZ_FORWARD_carrier_config_auth_del_stream
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_config_open_then_stream
#define ZZ_FORWARD_carrier_config_open_then_stream
#endif
#ifndef ZZ_FORWARD_carrier_config_net_join_stream
#define ZZ_FORWARD_carrier_config_net_join_stream
#endif
#ifndef ZZ_FORWARD_carrier_config_NetJoinConfig
#define ZZ_FORWARD_carrier_config_NetJoinConfig
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_config_AuthAddConfig
#define ZZ_FORWARD_carrier_config_AuthAddConfig
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkJoin
#define ZZ_FORWARD_carrier_proto_NetworkJoin
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_carrier_config_net_join_stream
#define ZZ_FORWARD_carrier_config_net_join_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_Err_100
#define ZZ_FORWARD_err_Err_100
struct err_Err_100_t;
typedef struct err_Err_100_t err_Err_100;
#endif
#ifndef ZZ_FORWARD_err_Err_1000
#define ZZ_FORWARD_err_Err_1000
struct err_Err_1000_t;
typedef struct err_Err_1000_t err_Err_1000;
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_config_AuthDelConfig
#define ZZ_FORWARD_carrier_config_AuthDelConfig
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_proto_NetworkGetResult
#define ZZ_FORWARD_carrier_proto_NetworkGetResult
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_to_str
#define ZZ_FORWARD_carrier_identity_address_to_str
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_config_net_get
#define ZZ_FORWARD_carrier_config_net_get
#endif
#ifndef ZZ_FORWARD_carrier_config_NetGetConfig
#define ZZ_FORWARD_carrier_config_NetGetConfig
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_config_AuthGetConfig
#define ZZ_FORWARD_carrier_config_AuthGetConfig
#endif
#ifndef ZZ_FORWARD_carrier_config_register
#define ZZ_FORWARD_carrier_config_register
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_carrier_config_net_get
#define ZZ_FORWARD_carrier_config_net_get
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_proto_AuthListResult
#define ZZ_FORWARD_carrier_proto_AuthListResult
#endif
#ifndef ZZ_FORWARD_carrier_config_auth_get_cb
#define ZZ_FORWARD_carrier_config_auth_get_cb
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_carrier_config_return_err
#define ZZ_FORWARD_carrier_config_return_err
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_config_open_then_stream
#define ZZ_FORWARD_carrier_config_open_then_stream
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_256_256
#define ZZ_EXPORT_buffer_Buffer_256_256
struct buffer_Buffer_256_t {
   uintptr_t at ;
   char mem[256] ;
}
;
size_t sizeof_buffer_Buffer_256();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_add_del_stream
#define ZZ_EXPORT_carrier_config_auth_add_del_stream
static bool carrier_config_auth_add_del_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg, int const  impl);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_add_stream
#define ZZ_EXPORT_carrier_config_auth_add_stream
static bool carrier_config_auth_add_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_get_cb
#define ZZ_EXPORT_carrier_config_auth_get_cb
static void carrier_config_auth_get_cb (void*  const  u, carrier_identity_Identity const *  const  id, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_get
#define ZZ_EXPORT_carrier_config_auth_get
static void carrier_config_auth_get (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthorizationAdd
#define ZZ_EXPORT_carrier_proto_AuthorizationAdd
typedef enum {
    carrier_proto_AuthorizationAdd_Identity = 1,
    carrier_proto_AuthorizationAdd_Path = 2,

} carrier_proto_AuthorizationAdd;

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str
#define ZZ_EXPORT_carrier_identity_identity_to_str
uintptr_t carrier_identity_identity_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_config_return_err
#define ZZ_EXPORT_carrier_config_return_err
static bool carrier_config_return_err (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_isnull
#define ZZ_EXPORT_carrier_identity_isnull
bool carrier_identity_isnull (uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConfigResult
#define ZZ_EXPORT_carrier_proto_ConfigResult
typedef enum {
    carrier_proto_ConfigResult_Ok = 1,
    carrier_proto_ConfigResult_Error = 2,

} carrier_proto_ConfigResult;

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_add_del_stream
#define ZZ_EXPORT_carrier_config_auth_add_del_stream
static bool carrier_config_auth_add_del_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg, int const  impl);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_del_stream
#define ZZ_EXPORT_carrier_config_auth_del_stream
static bool carrier_config_auth_del_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_config_open_then_stream
#define ZZ_EXPORT_carrier_config_open_then_stream
static void carrier_config_open_then_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_carrier_config_net_join_stream
#define ZZ_EXPORT_carrier_config_net_join_stream
static bool carrier_config_net_join_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkJoin
#define ZZ_EXPORT_carrier_proto_NetworkJoin
typedef enum {
    carrier_proto_NetworkJoin_Secret = 1,

} carrier_proto_NetworkJoin;

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_config_net_join_stream
#define ZZ_EXPORT_carrier_config_net_join_stream
static bool carrier_config_net_join_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();
#endif
#ifndef ZZ_EXPORT_err_Err_100_100
#define ZZ_EXPORT_err_Err_100_100
struct err_Err_100_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [100];
}
;
size_t sizeof_err_Err_100();
#endif
#ifndef ZZ_EXPORT_err_Err_1000_1000
#define ZZ_EXPORT_err_Err_1000_1000
struct err_Err_1000_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [1000];
}
;
size_t sizeof_err_Err_1000();

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_proto_NetworkGetResult
#define ZZ_EXPORT_carrier_proto_NetworkGetResult
typedef enum {
    carrier_proto_NetworkGetResult_Address = 2,

} carrier_proto_NetworkGetResult;

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_to_str
#define ZZ_EXPORT_carrier_identity_address_to_str
uintptr_t carrier_identity_address_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Address const *  const  from);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_config_net_get
#define ZZ_EXPORT_carrier_config_net_get
static void carrier_config_net_get (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_config_register
#define ZZ_EXPORT_carrier_config_register
void carrier_config_register (carrier_endpoint_Endpoint*  const  ep);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_config_net_get
#define ZZ_EXPORT_carrier_config_net_get
static void carrier_config_net_get (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_proto_AuthListResult
#define ZZ_EXPORT_carrier_proto_AuthListResult
typedef enum {
    carrier_proto_AuthListResult_Auth = 1,

} carrier_proto_AuthListResult;

#endif
#ifndef ZZ_EXPORT_carrier_config_auth_get_cb
#define ZZ_EXPORT_carrier_config_auth_get_cb
static void carrier_config_auth_get_cb (void*  const  u, carrier_identity_Identity const *  const  id, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_config_return_err
#define ZZ_EXPORT_carrier_config_return_err
static bool carrier_config_return_err (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_carrier_config_open_then_stream
#define ZZ_EXPORT_carrier_config_open_then_stream
static void carrier_config_open_then_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_carrier_proto_Path
#define ZZ_FORWARD_carrier_proto_Path
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_carrier_proto_Path
#define ZZ_EXPORT_carrier_proto_Path
typedef enum {
    carrier_proto_Path_Ipaddr = 1,
    carrier_proto_Path_Category = 2,

} carrier_proto_Path;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_netio_unix_socket
#define ZZ_FORWARD_netio_unix_socket
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_netio_unix_so_nosigpipe
#define ZZ_FORWARD_netio_unix_so_nosigpipe
#endif
#ifndef ZZ_FORWARD_netio_unix_make_async
#define ZZ_FORWARD_netio_unix_make_async
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_netio_unix_so_nosigpipe
#define ZZ_FORWARD_netio_unix_so_nosigpipe
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_netio_unix_alen
#define ZZ_FORWARD_netio_unix_alen
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/modules/netio/src/os.h"
#if defined(__linux__)
    #define ZZ_NETIO_UNIX 1
#elif defined(__APPLE__)
    #define ZZ_NETIO_UNIX 1
    #define ZZ_NETIO_OSX 1
#endif


#if ZZ_NETIO_UNIX
#include <errno.h>
#include <unistd.h>
#include <fcntl.h>
#endif

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_netio_unix_socket
#define ZZ_EXPORT_netio_unix_socket
extern int netio_unix_socket (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et, int const  typ);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_netio_unix_so_nosigpipe
#define ZZ_EXPORT_netio_unix_so_nosigpipe
static void netio_unix_so_nosigpipe (int const  fd);

#endif
#ifndef ZZ_EXPORT_netio_unix_make_async
#define ZZ_EXPORT_netio_unix_make_async
extern void netio_unix_make_async (int const  fd, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_netio_unix_so_nosigpipe
#define ZZ_EXPORT_netio_unix_so_nosigpipe
static void netio_unix_so_nosigpipe (int const  fd);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_netio_unix_alen
#define ZZ_EXPORT_netio_unix_alen
extern uintptr_t netio_unix_alen (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_mem_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_mem_src_lib_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_mem_set
#define ZZ_FORWARD_mem_set
#endif
#ifndef ZZ_FORWARD_mem_move
#define ZZ_FORWARD_mem_move
#endif
#ifndef ZZ_FORWARD_mem_eq
#define ZZ_FORWARD_mem_eq
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_mem_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_mem_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/mem/src/lib.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_mem_set
#define ZZ_EXPORT_mem_set
extern void mem_set (void*  const  dst, uint8_t const  c, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_mem_move
#define ZZ_EXPORT_mem_move
extern void mem_move (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_mem_eq
#define ZZ_EXPORT_mem_eq
extern bool mem_eq (void const *  const  a, void const *  const  b, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_base32_ALPHABET
#define ZZ_FORWARD_base32_ALPHABET
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_base32_encode_base32_block
#define ZZ_FORWARD_base32_encode_base32_block
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_base32_encode
#define ZZ_FORWARD_base32_encode
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_base32_decode
#define ZZ_FORWARD_base32_decode
#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_base32_ALPHABET
#define ZZ_EXPORT_base32_ALPHABET
#define base32_ALPHABET ((char  const * )    "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567")

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_base32_encode_base32_block
#define ZZ_EXPORT_base32_encode_base32_block
static void base32_encode_base32_block (uint8_t const *  const  from, char*  const  to);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_base32_encode
#define ZZ_EXPORT_base32_encode
uintptr_t base32_encode (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  src, uintptr_t const  inlen, char*  const  out, uintptr_t const  outlen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_base32_decode
#define ZZ_EXPORT_base32_decode
uintptr_t base32_decode (err_Err*  const  e, uintptr_t const  et, char const *  const  src, uintptr_t const  inlen, uint8_t*  const  out, uintptr_t const  outlen);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_netio_unix_socket
#define ZZ_FORWARD_netio_unix_socket
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_netio_unix_make_async
#define ZZ_FORWARD_netio_unix_make_async
#endif
#ifndef ZZ_FORWARD_netio_unix_alen
#define ZZ_FORWARD_netio_unix_alen
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_modules_netio_src_os_h_

#line 1 "/home/aep/proj/devguard/carrier/core/modules/netio/src/os.h"
#if defined(__linux__)
    #define ZZ_NETIO_UNIX 1
#elif defined(__APPLE__)
    #define ZZ_NETIO_UNIX 1
    #define ZZ_NETIO_OSX 1
#endif


#if ZZ_NETIO_UNIX
#include <errno.h>
#include <unistd.h>
#include <fcntl.h>
#endif

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_netio_unix_socket
#define ZZ_EXPORT_netio_unix_socket
extern int netio_unix_socket (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et, int const  typ);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_netio_unix_make_async
#define ZZ_EXPORT_netio_unix_make_async
extern void netio_unix_make_async (int const  fd, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_unix_alen
#define ZZ_EXPORT_netio_unix_alen
extern uintptr_t netio_unix_alen (net_address_Address const *  const  addr, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD__stdint_h_
#define ZZ_FORWARD__stdint_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_BASEPOINT
#define ZZ_FORWARD_carrier_identity_BASEPOINT
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Ed25519_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Ed25519_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_identity_verify
#define ZZ_FORWARD_carrier_identity_verify
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_carrier_identity_to_str_bc58
#define ZZ_FORWARD_carrier_identity_to_str_bc58
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str_bc58
#define ZZ_FORWARD_carrier_identity_identity_to_str_bc58
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_identity_nullcheck
#define ZZ_FORWARD_carrier_identity_nullcheck
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_sign
#define ZZ_FORWARD_carrier_identity_sign
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str
#define ZZ_FORWARD_carrier_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_to_str
#define ZZ_FORWARD_carrier_identity_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_to_str
#define ZZ_FORWARD_carrier_identity_alias_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_to_str_bc58
#define ZZ_FORWARD_carrier_identity_secret_to_str_bc58
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_crc8_crc8
#define ZZ_FORWARD_carrier_crc8_crc8
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_to_str
#define ZZ_FORWARD_carrier_identity_signature_to_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_to_str_bc58
#define ZZ_FORWARD_carrier_identity_address_to_str_bc58
#endif
#ifndef ZZ_FORWARD_carrier_identity_Invalid
#define ZZ_FORWARD_carrier_identity_Invalid
#endif
#ifndef ZZ_FORWARD_carrier_crc8_broken_crc8
#define ZZ_FORWARD_carrier_crc8_broken_crc8
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_base58_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_src_base58_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_to_str_bc58
#define ZZ_FORWARD_carrier_identity_to_str_bc58
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_secret
#define ZZ_FORWARD_carrier_identity_identity_from_secret
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_rand_rand
#define ZZ_FORWARD_carrier_rand_rand
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str
#define ZZ_FORWARD_carrier_identity_identity_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_carrier_identity_isnull
#define ZZ_FORWARD_carrier_identity_isnull
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str_base32
#define ZZ_FORWARD_carrier_identity_from_str_base32
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str_base58
#define ZZ_FORWARD_carrier_identity_from_str_base58
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str
#define ZZ_FORWARD_carrier_identity_from_str
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_base32_decode
#define ZZ_FORWARD_base32_decode
#endif
#ifndef ZZ_FORWARD_carrier_identity_type_string
#define ZZ_FORWARD_carrier_identity_type_string
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str_base32
#define ZZ_FORWARD_carrier_identity_from_str_base32
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_to_str
#define ZZ_FORWARD_carrier_identity_secretkit_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_to_str
#define ZZ_FORWARD_carrier_identity_secret_to_str
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Curve25519_51_h_
#define ZZ_FORWARD___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Curve25519_51_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_dh
#define ZZ_FORWARD_carrier_identity_dh
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_type_string
#define ZZ_FORWARD_carrier_identity_type_string
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_nullcheck
#define ZZ_FORWARD_carrier_identity_nullcheck
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_err_OutOfTail
#define ZZ_FORWARD_err_OutOfTail
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_identity_from_str_base58
#define ZZ_FORWARD_carrier_identity_from_str_base58
#endif
#ifndef ZZ_FORWARD_base32_encode
#define ZZ_FORWARD_base32_encode
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_to_str
#define ZZ_FORWARD_carrier_identity_address_to_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_secret
#define ZZ_FORWARD_carrier_identity_address_from_secret
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_identity_to_str
#define ZZ_FORWARD_carrier_identity_to_str
#endif
#ifndef ZZ_EXPORT__stdint_h_
#define ZZ_EXPORT__stdint_h_
#include <stdint.h>

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Ed25519_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Ed25519_h_
#include "../../c/3rdparty_hacl_star_dist_gcc_compatible_Hacl_Ed25519_h.h"

#endif
#ifndef ZZ_EXPORT_carrier_identity_verify
#define ZZ_EXPORT_carrier_identity_verify
bool carrier_identity_verify (carrier_identity_Identity const *  const  pk, carrier_identity_Signature const *  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_carrier_identity_to_str_bc58
#define ZZ_EXPORT_carrier_identity_to_str_bc58
static uintptr_t carrier_identity_to_str_bc58 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, char*  to, uintptr_t l, uint8_t const  version, uint8_t const  typ, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str_bc58
#define ZZ_EXPORT_carrier_identity_identity_to_str_bc58
uintptr_t carrier_identity_identity_to_str_bc58 (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_identity_nullcheck
#define ZZ_EXPORT_carrier_identity_nullcheck
void carrier_identity_nullcheck (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_sign
#define ZZ_EXPORT_carrier_identity_sign
void carrier_identity_sign (carrier_identity_Secret const *  const  key, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str
#define ZZ_EXPORT_carrier_identity_from_str
static void carrier_identity_from_str (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_to_str
#define ZZ_EXPORT_carrier_identity_to_str
static uintptr_t carrier_identity_to_str (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, char*  to, uintptr_t l, uint8_t const  version, uint8_t const  typ, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_to_str
#define ZZ_EXPORT_carrier_identity_alias_to_str
uintptr_t carrier_identity_alias_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Alias const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_to_str_bc58
#define ZZ_EXPORT_carrier_identity_secret_to_str_bc58
uintptr_t carrier_identity_secret_to_str_bc58 (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Secret const *  const  from);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_crc8_crc8
#define ZZ_EXPORT_carrier_crc8_crc8
uint8_t carrier_crc8_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_to_str
#define ZZ_EXPORT_carrier_identity_signature_to_str
uintptr_t carrier_identity_signature_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Signature const *  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_to_str_bc58
#define ZZ_EXPORT_carrier_identity_address_to_str_bc58
uintptr_t carrier_identity_address_to_str_bc58 (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Address const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Invalid
#define ZZ_EXPORT_carrier_identity_Invalid
extern const __attribute__ ((unused)) size_t carrier_identity_Invalid;

#endif
#ifndef ZZ_EXPORT_carrier_crc8_broken_crc8
#define ZZ_EXPORT_carrier_crc8_broken_crc8
uint8_t carrier_crc8_broken_crc8 (uint8_t crc, uint8_t const *  data, uintptr_t const  length);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_base58_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_src_base58_h_

#line 1 "/home/aep/proj/devguard/carrier/core/src/base58.h"
#ifndef LIBBASE58_H
#define LIBBASE58_H

#include <stdbool.h>
#include <stddef.h>

static bool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz);
static bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);
//static bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz);
//static int b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz);
//static bool (*b58_sha256_impl)(void *, const void *, size_t);

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>


static const int8_t b58digits_map[] = {
	-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,
	-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,
	-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,
	-1, 0, 1, 2, 3, 4, 5, 6,  7, 8,-1,-1,-1,-1,-1,-1,
	-1, 9,10,11,12,13,14,15, 16,-1,17,18,19,20,21,-1,
	22,23,24,25,26,27,28,29, 30,31,32,-1,-1,-1,-1,-1,
	-1,33,34,35,36,37,38,39, 40,41,42,43,-1,44,45,46,
	47,48,49,50,51,52,53,54, 55,56,57,-1,-1,-1,-1,-1,
};

typedef uint64_t b58_maxint_t;
typedef uint32_t b58_almostmaxint_t;
#define b58_almostmaxint_bits (sizeof(b58_almostmaxint_t) * 8)
static const b58_almostmaxint_t b58_almostmaxint_mask = ((((b58_maxint_t)1) << b58_almostmaxint_bits) - 1);

static bool b58tobin(void *bin, size_t *binszp, const char *b58, size_t b58sz)
{
	size_t binsz = *binszp;
	const unsigned char *b58u = (void*)b58;
	unsigned char *binu = bin;
	size_t outisz = (binsz + sizeof(b58_almostmaxint_t) - 1) / sizeof(b58_almostmaxint_t);
	b58_almostmaxint_t outi[outisz];
	b58_maxint_t t;
	b58_almostmaxint_t c;
	size_t i, j;
	uint8_t bytesleft = binsz % sizeof(b58_almostmaxint_t);
	b58_almostmaxint_t zeromask = bytesleft ? (b58_almostmaxint_mask << (bytesleft * 8)) : 0;
	unsigned zerocount = 0;
	
	if (!b58sz)
		b58sz = strlen(b58);
	
	for (i = 0; i < outisz; ++i) {
		outi[i] = 0;
	}
	
	// Leading zeros, just count
	for (i = 0; i < b58sz && b58u[i] == '1'; ++i)
		++zerocount;
	
	for ( ; i < b58sz; ++i)
	{
		if (b58u[i] & 0x80)
			// High-bit set on invalid digit
			return false;
		if (b58digits_map[b58u[i]] == -1)
			// Invalid base58 digit
			return false;
		c = (unsigned)b58digits_map[b58u[i]];
		for (j = outisz; j--; )
		{
			t = ((b58_maxint_t)outi[j]) * 58 + c;
			c = t >> b58_almostmaxint_bits;
			outi[j] = t & b58_almostmaxint_mask;
		}
		if (c)
			// Output number too big (carry to the next int32)
			return false;
		if (outi[0] & zeromask)
			// Output number too big (last int32 filled too far)
			return false;
	}
	
	j = 0;
	if (bytesleft) {
		for (i = bytesleft; i > 0; --i) {
			*(binu++) = (outi[0] >> (8 * (i - 1))) & 0xff;
		}
		++j;
	}
	
	for (; j < outisz; ++j)
	{
		for (i = sizeof(*outi); i > 0; --i) {
			*(binu++) = (outi[j] >> (8 * (i - 1))) & 0xff;
		}
	}
	
	// Count canonical base58 byte count
	binu = bin;
	for (i = 0; i < binsz; ++i)
	{
		if (binu[i])
			break;
		--*binszp;
	}
	*binszp += zerocount;
	
	return true;
}

#if 0
static bool (*b58_sha256_impl)(void *, const void *, size_t) = NULL;

static bool my_dblsha256(void *hash, const void *data, size_t datasz)
{
	uint8_t buf[0x20];
	return b58_sha256_impl(buf, data, datasz) && b58_sha256_impl(hash, buf, sizeof(buf));
}

static int b58check(const void *bin, size_t binsz, const char *base58str, size_t b58sz)
{
	unsigned char buf[32];
	const uint8_t *binc = bin;
	unsigned i;
	if (binsz < 4)
		return -4;
	if (!my_dblsha256(buf, bin, binsz - 4))
		return -2;
	if (memcmp(&binc[binsz - 4], buf, 4))
		return -1;
	
	// Check number of zeros is correct AFTER verifying checksum (to avoid possibility of accessing base58str beyond the end)
	for (i = 0; binc[i] == '\0' && base58str[i] == '1'; ++i)
	{}  // Just finding the end of zeros, nothing to do in loop
	if (binc[i] == '\0' || base58str[i] == '1')
		return -3;
	
	return binc[0];
}
#endif

static const char b58digits_ordered[] = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

static bool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)
{
	const uint8_t *bin = data;
	int carry;
	size_t i, j, high, zcount = 0;
	size_t size;
	
	while (zcount < binsz && !bin[zcount])
		++zcount;
	
	size = (binsz - zcount) * 138 / 100 + 1;
	uint8_t buf[size];
	memset(buf, 0, size);
	
	for (i = zcount, high = size - 1; i < binsz; ++i, high = j)
	{
		for (carry = bin[i], j = size - 1; (j > high) || carry; --j)
		{
			carry += 256 * buf[j];
			buf[j] = carry % 58;
			carry /= 58;
			if (!j) {
				// Otherwise j wraps to maxint which is > high
				break;
			}
		}
	}
	
	for (j = 0; j < size && !buf[j]; ++j);
	
	if (*b58sz <= zcount + size - j)
	{
		*b58sz = zcount + size - j + 1;
		return false;
	}
	
	if (zcount)
		memset(b58, '1', zcount);
	for (i = zcount; j < size; ++i, ++j)
		b58[i] = b58digits_ordered[buf[j]];
	b58[i] = '\0';
	*b58sz = i + 1;
	
	return true;
}


#if 0
static bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz)
{
	uint8_t buf[1 + datasz + 0x20];
	uint8_t *hash = &buf[1 + datasz];
	
	buf[0] = ver;
	memcpy(&buf[1], data, datasz);
	if (!my_dblsha256(hash, buf, datasz + 1))
	{
		*b58c_sz = 0;
		return false;
	}
	
	return b58enc(b58c, b58c_sz, buf, 1 + datasz + 4);
}
#endif

#endif

#endif
#ifndef ZZ_EXPORT_carrier_identity_to_str_bc58
#define ZZ_EXPORT_carrier_identity_to_str_bc58
static uintptr_t carrier_identity_to_str_bc58 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, char*  to, uintptr_t l, uint8_t const  version, uint8_t const  typ, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_secret
#define ZZ_EXPORT_carrier_identity_identity_from_secret
void carrier_identity_identity_from_secret (carrier_identity_Identity*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_rand_rand
#define ZZ_EXPORT_carrier_rand_rand
extern void carrier_rand_rand (err_Err*  const  e, uintptr_t const  et, uint8_t*  bytes, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str
#define ZZ_EXPORT_carrier_identity_identity_to_str
uintptr_t carrier_identity_identity_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_isnull
#define ZZ_EXPORT_carrier_identity_isnull
bool carrier_identity_isnull (uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str_base32
#define ZZ_EXPORT_carrier_identity_from_str_base32
static void carrier_identity_from_str_base32 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str_base58
#define ZZ_EXPORT_carrier_identity_from_str_base58
static void carrier_identity_from_str_base58 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str
#define ZZ_EXPORT_carrier_identity_from_str
static void carrier_identity_from_str (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_base32_decode
#define ZZ_EXPORT_base32_decode
uintptr_t base32_decode (err_Err*  const  e, uintptr_t const  et, char const *  const  src, uintptr_t const  inlen, uint8_t*  const  out, uintptr_t const  outlen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_type_string
#define ZZ_EXPORT_carrier_identity_type_string
static char  const * carrier_identity_type_string (uint8_t const  typ);

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str_base32
#define ZZ_EXPORT_carrier_identity_from_str_base32
static void carrier_identity_from_str_base32 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_to_str
#define ZZ_EXPORT_carrier_identity_secretkit_to_str
uintptr_t carrier_identity_secretkit_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_SecretKit const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_to_str
#define ZZ_EXPORT_carrier_identity_secret_to_str
uintptr_t carrier_identity_secret_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Secret const *  const  from);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Curve25519_51_h_
#define ZZ_EXPORT___home_aep_proj_devguard_carrier_core_3rdparty_hacl_star_dist_gcc_compatible_Hacl_Curve25519_51_h_
#include "../../c/3rdparty_hacl_star_dist_gcc_compatible_Hacl_Curve25519_51_h.h"

#endif
#ifndef ZZ_EXPORT_carrier_identity_dh
#define ZZ_EXPORT_carrier_identity_dh
void carrier_identity_dh (carrier_identity_Address*  const  out, carrier_identity_Secret const *  const  me, carrier_identity_Address const *  const  them);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_type_string
#define ZZ_EXPORT_carrier_identity_type_string
static char  const * carrier_identity_type_string (uint8_t const  typ);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_identity_nullcheck
#define ZZ_EXPORT_carrier_identity_nullcheck
void carrier_identity_nullcheck (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_OutOfTail
#define ZZ_EXPORT_err_OutOfTail
extern const __attribute__ ((unused)) size_t err_OutOfTail;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_identity_from_str_base58
#define ZZ_EXPORT_carrier_identity_from_str_base58
static void carrier_identity_from_str_base58 (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, char const *  const  from, uintptr_t const  l, uint8_t const  expect_type);

#endif
#ifndef ZZ_EXPORT_base32_encode
#define ZZ_EXPORT_base32_encode
uintptr_t base32_encode (err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  src, uintptr_t const  inlen, char*  const  out, uintptr_t const  outlen);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_to_str
#define ZZ_EXPORT_carrier_identity_address_to_str
uintptr_t carrier_identity_address_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Address const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_secret
#define ZZ_EXPORT_carrier_identity_address_from_secret
void carrier_identity_address_from_secret (carrier_identity_Address*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_identity_to_str
#define ZZ_EXPORT_carrier_identity_to_str
static uintptr_t carrier_identity_to_str (uintptr_t const  size, err_Err*  const  e, uintptr_t const  et, char*  to, uintptr_t l, uint8_t const  version, uint8_t const  typ, uint8_t const *  const  k);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_stream
#define ZZ_FORWARD_carrier_connect_on_stream
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_close
#define ZZ_FORWARD_carrier_connect_on_close
#endif
#ifndef ZZ_FORWARD_carrier_connect_ConnectStream
#define ZZ_FORWARD_carrier_connect_ConnectStream
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_carrier_connect_disconnect_t
#define ZZ_FORWARD_carrier_connect_disconnect_t
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_connect_connect_t
#define ZZ_FORWARD_carrier_connect_connect_t
#endif
#ifndef ZZ_FORWARD_carrier_connect_Connect
#define ZZ_FORWARD_carrier_connect_Connect
struct carrier_connect_Connect_t;
typedef struct carrier_connect_Connect_t carrier_connect_Connect;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD__stdlib_h_
#define ZZ_FORWARD__stdlib_h_
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectRequest
#define ZZ_FORWARD_carrier_proto_ConnectRequest
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_proto_ConnectResponse
#define ZZ_FORWARD_carrier_proto_ConnectResponse
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_err_InvalidArgument
#define ZZ_FORWARD_err_InvalidArgument
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_stream
#define ZZ_FORWARD_carrier_connect_on_stream
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_connect_on_close
#define ZZ_FORWARD_carrier_connect_on_close
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_connect_start
#define ZZ_FORWARD_carrier_connect_start
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_stream
#define ZZ_EXPORT_carrier_connect_on_stream
static bool carrier_connect_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_close
#define ZZ_EXPORT_carrier_connect_on_close
static void carrier_connect_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();

#endif
#ifndef ZZ_EXPORT_carrier_connect_disconnect_t
#define ZZ_EXPORT_carrier_connect_disconnect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_endpoint_Endpoint*  const  ep, void * _ctx);
} carrier_connect_disconnect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_disconnect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_connect_t
#define ZZ_EXPORT_carrier_connect_connect_t
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_connect_Connect*  const  con, carrier_channel_Channel*  const  chan, void * _ctx);
} carrier_connect_connect_t;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_connect_connect_t)

#endif
#ifndef ZZ_EXPORT_carrier_connect_Connect
#define ZZ_EXPORT_carrier_connect_Connect
struct carrier_connect_Connect_t {
   carrier_identity_Identity target ;
   carrier_identity_Identity principal ;
   carrier_initiator_Initiator initiator ;
   uint64_t initiator_time ;
   buffer_Buffer_1024 initiator_pkt ;
   carrier_connect_disconnect_t on_disconnect ;
   carrier_connect_connect_t on_connect ;
   buffer_Buffer_1024 remoteError ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_carrier_connect_Connect();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT__stdlib_h_
#define ZZ_EXPORT__stdlib_h_
#include <stdlib.h>

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectRequest
#define ZZ_EXPORT_carrier_proto_ConnectRequest
typedef enum {
    carrier_proto_ConnectRequest_Target = 1,
    carrier_proto_ConnectRequest_Timestamp = 2,
    carrier_proto_ConnectRequest_Handshake = 3,
    carrier_proto_ConnectRequest_Paths = 4,
    carrier_proto_ConnectRequest_Principal = 5,
    carrier_proto_ConnectRequest_Timeout = 6,
    carrier_proto_ConnectRequest_TargetType = 7,

} carrier_proto_ConnectRequest;

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_proto_ConnectResponse
#define ZZ_EXPORT_carrier_proto_ConnectResponse
typedef enum {
    carrier_proto_ConnectResponse_Ok = 1,
    carrier_proto_ConnectResponse_Handshake = 2,
    carrier_proto_ConnectResponse_Route = 3,
    carrier_proto_ConnectResponse_Paths = 4,
    carrier_proto_ConnectResponse_Error = 5,

} carrier_proto_ConnectResponse;

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_err_InvalidArgument
#define ZZ_EXPORT_err_InvalidArgument
extern const __attribute__ ((unused)) size_t err_InvalidArgument;

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_stream
#define ZZ_EXPORT_carrier_connect_on_stream
static bool carrier_connect_on_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_connect_on_close
#define ZZ_EXPORT_carrier_connect_on_close
static void carrier_connect_on_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_connect_start
#define ZZ_EXPORT_carrier_connect_start
void carrier_connect_start (carrier_connect_Connect*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_endpoint_Endpoint*  const  ep, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_buffer_src_native_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_buffer_src_native_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_mem_eq
#define ZZ_FORWARD_mem_eq
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_mem_set
#define ZZ_FORWARD_mem_set
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_cstr_eq
#define ZZ_FORWARD_buffer_cstr_eq
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_buffer_src_native_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_buffer_src_native_h_

#line 1 "/home/aep/proj/zz/modules/buffer/src/native.h"
#if defined(__ANDROID__)

    #define HAVE_STDARG_H 1
    #define HAVE_STDDEF_H 1
    #define HAVE_STDINT_H 1
    #define HAVE_FLOAT_H  1
    #define HAVE_INTTYPES_H 1
    #include <stdio.h>
    #define xN_fgets        fgets
    #define xN_vsnprintf    rpl_vsnprintf
	#define DO_RPL_IMPL 1

//#elif defined(__XTENSA__)
//
//    #define HAVE_STDARG_H 1
//    #define HAVE_STDDEF_H 1
//    #define HAVE_STDINT_H 1
//    #define HAVE_FLOAT_H  1
//    #define HAVE_INTTYPES_H 1
//    #define xN_fgets(a,b,c) 0
//    #define xN_vsnprintf rpl_vsnprintf
//	#define DO_RPL_IMPL 1

#else

    #include <stdio.h>
    #define xN_fgets        fgets
    #define xN_vsnprintf    vsnprintf

#endif



#if DO_RPL_IMPL


/*
 *
 * https://raw.githubusercontent.com/weiss/c99-snprintf/master/snprintf.c
 *
 * Copyright (c) 1995 Patrick Powell.
 *
 * This code is based on code written by Patrick Powell <papowell@astart.com>.
 * It may be used for any purpose as long as this notice remains intact on all
 * source code distributions.
 */

/*
 * Copyright (c) 2008 Holger Weiss.
 *
 * This version of the code is maintained by Holger Weiss <holger@jhweiss.de>.
 * My changes to the code may freely be used, modified and/or redistributed for
 * any purpose.  It would be nice if additions and fixes to this file (including
 * trivial code cleanups) would be sent back in order to let me include them in
 * the version available at <http://www.jhweiss.de/software/snprintf.html>.
 * However, this is not a requirement for using or redistributing (possibly
 * modified) versions of this file, nor is leaving this notice intact mandatory.
 */

/*
 * History
 *
 * 2008-01-20 Holger Weiss <holger@jhweiss.de> for C99-snprintf 1.1:
 *
 * 	Fixed the detection of infinite floating point values on IRIX (and
 * 	possibly other systems) and applied another few minor cleanups.
 *
 * 2008-01-06 Holger Weiss <holger@jhweiss.de> for C99-snprintf 1.0:
 *
 * 	Added a lot of new features, fixed many bugs, and incorporated various
 * 	improvements done by Andrew Tridgell <tridge@samba.org>, Russ Allbery
 * 	<rra@stanford.edu>, Hrvoje Niksic <hniksic@xemacs.org>, Damien Miller
 * 	<djm@mindrot.org>, and others for the Samba, INN, Wget, and OpenSSH
 * 	projects.  The additions include: support the "e", "E", "g", "G", and
 * 	"F" conversion specifiers (and use conversion style "f" or "F" for the
 * 	still unsupported "a" and "A" specifiers); support the "hh", "ll", "j",
 * 	"t", and "z" length modifiers; support the "#" flag and the (non-C99)
 * 	"'" flag; use localeconv(3) (if available) to get both the current
 * 	locale's decimal point character and the separator between groups of
 * 	digits; fix the handling of various corner cases of field width and
 * 	precision specifications; fix various floating point conversion bugs;
 * 	handle infinite and NaN floating point values; don't attempt to write to
 * 	the output buffer (which may be NULL) if a size of zero was specified;
 * 	check for integer overflow of the field width, precision, and return
 * 	values and during the floating point conversion; use the OUTCHAR() macro
 * 	instead of a function for better performance; provide asprintf(3) and
 * 	vasprintf(3) functions; add new test cases.  The replacement functions
 * 	have been renamed to use an "rpl_" prefix, the function calls in the
 * 	main project (and in this file) must be redefined accordingly for each
 * 	replacement function which is needed (by using Autoconf or other means).
 * 	Various other minor improvements have been applied and the coding style
 * 	was cleaned up for consistency.
 *
 * 2007-07-23 Holger Weiss <holger@jhweiss.de> for Mutt 1.5.13:
 *
 * 	C99 compliant snprintf(3) and vsnprintf(3) functions return the number
 * 	of characters that would have been written to a sufficiently sized
 * 	buffer (excluding the '\0').  The original code simply returned the
 * 	length of the resulting output string, so that's been fixed.
 *
 * 1998-03-05 Michael Elkins <me@mutt.org> for Mutt 0.90.8:
 *
 * 	The original code assumed that both snprintf(3) and vsnprintf(3) were
 * 	missing.  Some systems only have snprintf(3) but not vsnprintf(3), so
 * 	the code is now broken down under HAVE_SNPRINTF and HAVE_VSNPRINTF.
 *
 * 1998-01-27 Thomas Roessler <roessler@does-not-exist.org> for Mutt 0.89i:
 *
 * 	The PGP code was using unsigned hexadecimal formats.  Unfortunately,
 * 	unsigned formats simply didn't work.
 *
 * 1997-10-22 Brandon Long <blong@fiction.net> for Mutt 0.87.1:
 *
 * 	Ok, added some minimal floating point support, which means this probably
 * 	requires libm on most operating systems.  Don't yet support the exponent
 * 	(e,E) and sigfig (g,G).  Also, fmtint() was pretty badly broken, it just
 * 	wasn't being exercised in ways which showed it, so that's been fixed.
 * 	Also, formatted the code to Mutt conventions, and removed dead code left
 * 	over from the original.  Also, there is now a builtin-test, run with:
 * 	gcc -DTEST_SNPRINTF -o snprintf snprintf.c -lm && ./snprintf
 *
 * 2996-09-15 Brandon Long <blong@fiction.net> for Mutt 0.43:
 *
 * 	This was ugly.  It is still ugly.  I opted out of floating point
 * 	numbers, but the formatter understands just about everything from the
 * 	normal C string format, at least as far as I can tell from the Solaris
 * 	2.5 printf(3S) man page.
 */

/*
 * ToDo
 *
 * - Add wide character support.
 * - Add support for "%a" and "%A" conversions.
 * - Create test routines which predefine the expected results.  Our test cases
 *   usually expose bugs in system implementations rather than in ours :-)
 */

/*
 * Usage
 *
 * 1) The following preprocessor macros should be defined to 1 if the feature or
 *    file in question is available on the target system (by using Autoconf or
 *    other means), though basic functionality should be available as long as
 *    HAVE_STDARG_H and HAVE_STDLIB_H are defined correctly:
 *
 *    	HAVE_VSNPRINTF
 *    	HAVE_SNPRINTF
 *    	HAVE_VASPRINTF
 *    	HAVE_ASPRINTF
 *    	HAVE_STDARG_H
 *    	HAVE_STDDEF_H
 *    	HAVE_STDINT_H
 *    	HAVE_STDLIB_H
 *    	HAVE_FLOAT_H
 *    	HAVE_INTTYPES_H
 *    	HAVE_LOCALE_H
 *    	HAVE_LOCALECONV
 *    	HAVE_LCONV_DECIMAL_POINT
 *    	HAVE_LCONV_THOUSANDS_SEP
 *    	HAVE_LONG_DOUBLE
 *    	HAVE_LONG_LONG_INT
 *    	HAVE_UNSIGNED_LONG_LONG_INT
 *    	HAVE_INTMAX_T
 *    	HAVE_UINTMAX_T
 *    	HAVE_UINTPTR_T
 *    	HAVE_PTRDIFF_T
 *    	HAVE_VA_COPY
 *    	HAVE___VA_COPY
 *
 * 2) The calls to the functions which should be replaced must be redefined
 *    throughout the project files (by using Autoconf or other means):
 *
 *    	#define vsnprintf rpl_vsnprintf
 *    	#define snprintf rpl_snprintf
 *    	#define vasprintf rpl_vasprintf
 *    	#define asprintf rpl_asprintf
 *
 * 3) The required replacement functions should be declared in some header file
 *    included throughout the project files:
 *
 *    	#if HAVE_CONFIG_H
 *    	#include <config.h>
 *    	#endif
 *    	#if HAVE_STDARG_H
 *    	#include <stdarg.h>
 *    	#if !HAVE_VSNPRINTF
 *    	int rpl_vsnprintf(char *, size_t, const char *, va_list);
 *    	#endif
 *    	#if !HAVE_SNPRINTF
 *    	int rpl_snprintf(char *, size_t, const char *, ...);
 *    	#endif
 *    	#if !HAVE_VASPRINTF
 *    	int rpl_vasprintf(char **, const char *, va_list);
 *    	#endif
 *    	#if !HAVE_ASPRINTF
 *    	int rpl_asprintf(char **, const char *, ...);
 *    	#endif
 *    	#endif
 *
 * Autoconf macros for handling step 1 and step 2 are available at
 * <http://www.jhweiss.de/software/snprintf.html>.
 */

#include <stdio.h>	/* For NULL, size_t, vsnprintf(3), and vasprintf(3). */
#include <stdarg.h>

#include <errno.h>	/* For ERANGE and myerrno. */
#include <limits.h>	/* For *_MAX. */
#if HAVE_FLOAT_H
#include <float.h>	/* For *DBL_{MIN,MAX}_10_EXP. */
#endif	/* HAVE_FLOAT_H */
#if HAVE_INTTYPES_H
#include <inttypes.h>	/* For intmax_t (if not defined in <stdint.h>). */
#endif	/* HAVE_INTTYPES_H */
#if HAVE_LOCALE_H
#include <locale.h>	/* For localeconv(3). */
#endif	/* HAVE_LOCALE_H */
#if HAVE_STDDEF_H
#include <stddef.h>	/* For ptrdiff_t. */
#endif	/* HAVE_STDDEF_H */
#if HAVE_STDINT_H
#include <stdint.h>	/* For intmax_t. */
#endif	/* HAVE_STDINT_H */

/* Support for unsigned long long int.  We may also need ULLONG_MAX. */
#ifndef ULONG_MAX	/* We may need ULONG_MAX as a fallback. */
#ifdef UINT_MAX
#define ULONG_MAX UINT_MAX
#else
#define ULONG_MAX INT_MAX
#endif	/* defined(UINT_MAX) */
#endif	/* !defined(ULONG_MAX) */
#ifdef ULLONG
#undef ULLONG
#endif	/* defined(ULLONG) */
#if HAVE_UNSIGNED_LONG_LONG_INT
#define ULLONG unsigned long long int
#ifndef ULLONG_MAX
#define ULLONG_MAX ULONG_MAX
#endif	/* !defined(ULLONG_MAX) */
#else
#define ULLONG unsigned long int
#ifdef ULLONG_MAX
#undef ULLONG_MAX
#endif	/* defined(ULLONG_MAX) */
#define ULLONG_MAX ULONG_MAX
#endif	/* HAVE_LONG_LONG_INT */

/* Support for uintmax_t.  We also need UINTMAX_MAX. */
#ifdef UINTMAX_T
#undef UINTMAX_T
#endif	/* defined(UINTMAX_T) */
#if HAVE_UINTMAX_T || defined(uintmax_t)
#define UINTMAX_T uintmax_t
#ifndef UINTMAX_MAX
#define UINTMAX_MAX ULLONG_MAX
#endif	/* !defined(UINTMAX_MAX) */
#else
#define UINTMAX_T ULLONG
#ifdef UINTMAX_MAX
#undef UINTMAX_MAX
#endif	/* defined(UINTMAX_MAX) */
#define UINTMAX_MAX ULLONG_MAX
#endif	/* HAVE_UINTMAX_T || defined(uintmax_t) */

/* Support for long double. */
#ifndef LDOUBLE
#if HAVE_LONG_DOUBLE
#define LDOUBLE long double
#define LDOUBLE_MIN_10_EXP LDBL_MIN_10_EXP
#define LDOUBLE_MAX_10_EXP LDBL_MAX_10_EXP
#else
#define LDOUBLE double
#define LDOUBLE_MIN_10_EXP DBL_MIN_10_EXP
#define LDOUBLE_MAX_10_EXP DBL_MAX_10_EXP
#endif	/* HAVE_LONG_DOUBLE */
#endif	/* !defined(LDOUBLE) */

/* Support for long long int. */
#ifndef LLONG
#if HAVE_LONG_LONG_INT
#define LLONG long long int
#else
#define LLONG long int
#endif	/* HAVE_LONG_LONG_INT */
#endif	/* !defined(LLONG) */

/* Support for intmax_t. */
#ifndef INTMAX_T
#if HAVE_INTMAX_T || defined(intmax_t)
#define INTMAX_T intmax_t
#else
#define INTMAX_T LLONG
#endif	/* HAVE_INTMAX_T || defined(intmax_t) */
#endif	/* !defined(INTMAX_T) */

/* Support for uintptr_t. */
#ifndef UINTPTR_T
#if HAVE_UINTPTR_T || defined(uintptr_t)
#define UINTPTR_T uintptr_t
#else
#define UINTPTR_T unsigned long int
#endif	/* HAVE_UINTPTR_T || defined(uintptr_t) */
#endif	/* !defined(UINTPTR_T) */

/* Support for ptrdiff_t. */
#ifndef PTRDIFF_T
#if HAVE_PTRDIFF_T || defined(ptrdiff_t)
#define PTRDIFF_T ptrdiff_t
#else
#define PTRDIFF_T long int
#endif	/* HAVE_PTRDIFF_T || defined(ptrdiff_t) */
#endif	/* !defined(PTRDIFF_T) */

/*
 * We need an unsigned integer type corresponding to ptrdiff_t (cf. C99:
 * 7.19.6.1, 7).  However, we'll simply use PTRDIFF_T and convert it to an
 * unsigned type if necessary.  This should work just fine in practice.
 */
#ifndef UPTRDIFF_T
#define UPTRDIFF_T PTRDIFF_T
#endif	/* !defined(UPTRDIFF_T) */

/*
 * We need a signed integer type corresponding to size_t (cf. C99: 7.19.6.1, 7).
 * However, we'll simply use size_t and convert it to a signed type if
 * necessary.  This should work just fine in practice.
 */
#ifndef SSIZE_T
#define SSIZE_T size_t
#endif	/* !defined(SSIZE_T) */

/* Either ERANGE or E2BIG should be available everywhere. */
#ifndef ERANGE
#define ERANGE E2BIG
#endif	/* !defined(ERANGE) */
#ifndef EOVERFLOW
#define EOVERFLOW ERANGE
#endif	/* !defined(EOVERFLOW) */

/*
 * Buffer size to hold the octal string representation of UINT128_MAX without
 * nul-termination ("3777777777777777777777777777777777777777777").
 */
#ifdef MAX_CONVERT_LENGTH
#undef MAX_CONVERT_LENGTH
#endif	/* defined(MAX_CONVERT_LENGTH) */
#define MAX_CONVERT_LENGTH      43

/* Format read states. */
#define PRINT_S_DEFAULT         0
#define PRINT_S_FLAGS           1
#define PRINT_S_WIDTH           2
#define PRINT_S_DOT             3
#define PRINT_S_PRECISION       4
#define PRINT_S_MOD             5
#define PRINT_S_CONV            6

/* Format flags. */
#define PRINT_F_MINUS           (1 << 0)
#define PRINT_F_PLUS            (1 << 1)
#define PRINT_F_SPACE           (1 << 2)
#define PRINT_F_NUM             (1 << 3)
#define PRINT_F_ZERO            (1 << 4)
#define PRINT_F_QUOTE           (1 << 5)
#define PRINT_F_UP              (1 << 6)
#define PRINT_F_UNSIGNED        (1 << 7)
#define PRINT_F_TYPE_G          (1 << 8)
#define PRINT_F_TYPE_E          (1 << 9)

/* Conversion flags. */
#define PRINT_C_CHAR            1
#define PRINT_C_SHORT           2
#define PRINT_C_LONG            3
#define PRINT_C_LLONG           4
#define PRINT_C_LDOUBLE         5
#define PRINT_C_SIZE            6
#define PRINT_C_PTRDIFF         7
#define PRINT_C_INTMAX          8

#ifndef MAX
#define MAX(x, y) ((x >= y) ? x : y)
#endif	/* !defined(MAX) */
#ifndef CHARTOINT
#define CHARTOINT(ch) (ch - '0')
#endif	/* !defined(CHARTOINT) */
#ifndef ISDIGIT
#define ISDIGIT(ch) ('0' <= (unsigned char)ch && (unsigned char)ch <= '9')
#endif	/* !defined(ISDIGIT) */
#ifndef ISNAN
#define ISNAN(x) (x != x)
#endif	/* !defined(ISNAN) */
#ifndef ISINF
#define ISINF(x) ((x < -1 || x > 1) && x + x == x)
#endif	/* !defined(ISINF) */

#ifdef OUTCHAR
#undef OUTCHAR
#endif	/* defined(OUTCHAR) */
#define OUTCHAR(str, len, size, ch)                                          \
do {                                                                         \
	if (len + 1 < size)                                                  \
		str[len] = ch;                                               \
	(len)++;                                                             \
} while (/* CONSTCOND */ 0)

static void fmtstr(char *, size_t *, size_t, const char *, int, int, int);
static void fmtint(char *, size_t *, size_t, INTMAX_T, int, int, int, int);
static void fmtflt(char *, size_t *, size_t, LDOUBLE, int, int, int, int *);
static void printsep(char *, size_t *, size_t);
static int getnumsep(int);
static int getexponent(LDOUBLE);
static int convert(UINTMAX_T, char *, size_t, int, int);
static UINTMAX_T cast(LDOUBLE);
static UINTMAX_T myround(LDOUBLE);
static LDOUBLE mypow10(int);

static int myerrno;

static int
__attribute__((unused))
rpl_vsnprintf(char *str, size_t size, const char *format, va_list args)
{
	LDOUBLE fvalue;
	INTMAX_T value;
	unsigned char cvalue;
	const char *strvalue;
	INTMAX_T *intmaxptr;
	PTRDIFF_T *ptrdiffptr;
	SSIZE_T *sizeptr;
	LLONG *llongptr;
	long int *longptr;
	int *intptr;
	short int *shortptr;
	signed char *charptr;
	size_t len = 0;
	int overflow = 0;
	int base = 0;
	int cflags = 0;
	int flags = 0;
	int width = 0;
	int precision = -1;
	int state = PRINT_S_DEFAULT;
	char ch = *format++;

	/*
	 * C99 says: "If `n' is zero, nothing is written, and `s' may be a null
	 * pointer." (7.19.6.5, 2)  We're forgiving and allow a NULL pointer
	 * even if a size larger than zero was specified.  At least NetBSD's
	 * snprintf(3) does the same, as well as other versions of this file.
	 * (Though some of these versions will write to a non-NULL buffer even
	 * if a size of zero was specified, which violates the standard.)
	 */
	if (str == NULL && size != 0)
		size = 0;

	while (ch != '\0')
		switch (state) {
		case PRINT_S_DEFAULT:
			if (ch == '%')
				state = PRINT_S_FLAGS;
			else
				OUTCHAR(str, len, size, ch);
			ch = *format++;
			break;
		case PRINT_S_FLAGS:
			switch (ch) {
			case '-':
				flags |= PRINT_F_MINUS;
				ch = *format++;
				break;
			case '+':
				flags |= PRINT_F_PLUS;
				ch = *format++;
				break;
			case ' ':
				flags |= PRINT_F_SPACE;
				ch = *format++;
				break;
			case '#':
				flags |= PRINT_F_NUM;
				ch = *format++;
				break;
			case '0':
				flags |= PRINT_F_ZERO;
				ch = *format++;
				break;
			case '\'':	/* SUSv2 flag (not in C99). */
				flags |= PRINT_F_QUOTE;
				ch = *format++;
				break;
			default:
				state = PRINT_S_WIDTH;
				break;
			}
			break;
		case PRINT_S_WIDTH:
			if (ISDIGIT(ch)) {
				ch = CHARTOINT(ch);
				if (width > (INT_MAX - ch) / 10) {
					overflow = 1;
					goto out;
				}
				width = 10 * width + ch;
				ch = *format++;
			} else if (ch == '*') {
				/*
				 * C99 says: "A negative field width argument is
				 * taken as a `-' flag followed by a positive
				 * field width." (7.19.6.1, 5)
				 */
				if ((width = va_arg(args, int)) < 0) {
					flags |= PRINT_F_MINUS;
					width = -width;
				}
				ch = *format++;
				state = PRINT_S_DOT;
			} else
				state = PRINT_S_DOT;
			break;
		case PRINT_S_DOT:
			if (ch == '.') {
				state = PRINT_S_PRECISION;
				ch = *format++;
			} else
				state = PRINT_S_MOD;
			break;
		case PRINT_S_PRECISION:
			if (precision == -1)
				precision = 0;
			if (ISDIGIT(ch)) {
				ch = CHARTOINT(ch);
				if (precision > (INT_MAX - ch) / 10) {
					overflow = 1;
					goto out;
				}
				precision = 10 * precision + ch;
				ch = *format++;
			} else if (ch == '*') {
				/*
				 * C99 says: "A negative precision argument is
				 * taken as if the precision were omitted."
				 * (7.19.6.1, 5)
				 */
				if ((precision = va_arg(args, int)) < 0)
					precision = -1;
				ch = *format++;
				state = PRINT_S_MOD;
			} else
				state = PRINT_S_MOD;
			break;
		case PRINT_S_MOD:
			switch (ch) {
			case 'h':
				ch = *format++;
				if (ch == 'h') {	/* It's a char. */
					ch = *format++;
					cflags = PRINT_C_CHAR;
				} else
					cflags = PRINT_C_SHORT;
				break;
			case 'l':
				ch = *format++;
				if (ch == 'l') {	/* It's a long long. */
					ch = *format++;
					cflags = PRINT_C_LLONG;
				} else
					cflags = PRINT_C_LONG;
				break;
			case 'L':
				cflags = PRINT_C_LDOUBLE;
				ch = *format++;
				break;
			case 'j':
				cflags = PRINT_C_INTMAX;
				ch = *format++;
				break;
			case 't':
				cflags = PRINT_C_PTRDIFF;
				ch = *format++;
				break;
			case 'z':
				cflags = PRINT_C_SIZE;
				ch = *format++;
				break;
			}
			state = PRINT_S_CONV;
			break;
		case PRINT_S_CONV:
			switch (ch) {
			case 'd':
				/* FALLTHROUGH */
			case 'i':
				switch (cflags) {
				case PRINT_C_CHAR:
					value = (signed char)va_arg(args, int);
					break;
				case PRINT_C_SHORT:
					value = (short int)va_arg(args, int);
					break;
				case PRINT_C_LONG:
					value = va_arg(args, long int);
					break;
				case PRINT_C_LLONG:
					value = va_arg(args, LLONG);
					break;
				case PRINT_C_SIZE:
					value = va_arg(args, SSIZE_T);
					break;
				case PRINT_C_INTMAX:
					value = va_arg(args, INTMAX_T);
					break;
				case PRINT_C_PTRDIFF:
					value = va_arg(args, PTRDIFF_T);
					break;
				default:
					value = va_arg(args, int);
					break;
				}
				fmtint(str, &len, size, value, 10, width,
				    precision, flags);
				break;
			case 'X':
				flags |= PRINT_F_UP;
				/* FALLTHROUGH */
			case 'x':
				base = 16;
				/* FALLTHROUGH */
			case 'o':
				if (base == 0)
					base = 8;
				/* FALLTHROUGH */
			case 'u':
				if (base == 0)
					base = 10;
				flags |= PRINT_F_UNSIGNED;
				switch (cflags) {
				case PRINT_C_CHAR:
					value = (unsigned char)va_arg(args,
					    unsigned int);
					break;
				case PRINT_C_SHORT:
					value = (unsigned short int)va_arg(args,
					    unsigned int);
					break;
				case PRINT_C_LONG:
					value = va_arg(args, unsigned long int);
					break;
				case PRINT_C_LLONG:
					value = va_arg(args, ULLONG);
					break;
				case PRINT_C_SIZE:
					value = va_arg(args, size_t);
					break;
				case PRINT_C_INTMAX:
					value = va_arg(args, UINTMAX_T);
					break;
				case PRINT_C_PTRDIFF:
					value = va_arg(args, UPTRDIFF_T);
					break;
				default:
					value = va_arg(args, unsigned int);
					break;
				}
				fmtint(str, &len, size, value, base, width,
				    precision, flags);
				break;
			case 'A':
				/* Not yet supported, we'll use "%F". */
				/* FALLTHROUGH */
			case 'E':
				if (ch == 'E')
					flags |= PRINT_F_TYPE_E;
				/* FALLTHROUGH */
			case 'G':
				if (ch == 'G')
					flags |= PRINT_F_TYPE_G;
				/* FALLTHROUGH */
			case 'F':
				flags |= PRINT_F_UP;
				/* FALLTHROUGH */
			case 'a':
				/* Not yet supported, we'll use "%f". */
				/* FALLTHROUGH */
			case 'e':
				if (ch == 'e')
					flags |= PRINT_F_TYPE_E;
				/* FALLTHROUGH */
			case 'g':
				if (ch == 'g')
					flags |= PRINT_F_TYPE_G;
				/* FALLTHROUGH */
			case 'f':
				if (cflags == PRINT_C_LDOUBLE)
					fvalue = va_arg(args, LDOUBLE);
				else
					fvalue = va_arg(args, double);
				fmtflt(str, &len, size, fvalue, width,
				    precision, flags, &overflow);
				if (overflow)
					goto out;
				break;
			case 'c':
				cvalue = va_arg(args, int);
				OUTCHAR(str, len, size, cvalue);
				break;
			case 's':
				strvalue = va_arg(args, char *);
				fmtstr(str, &len, size, strvalue, width,
				    precision, flags);
				break;
			case 'p':
				/*
				 * C99 says: "The value of the pointer is
				 * converted to a sequence of printing
				 * characters, in an implementation-defined
				 * manner." (C99: 7.19.6.1, 8)
				 */
				if ((strvalue = va_arg(args, void *)) == NULL)
					/*
					 * We use the glibc format.  BSD prints
					 * "0x0", SysV "0".
					 */
					fmtstr(str, &len, size, "(nil)", width,
					    -1, flags);
				else {
					/*
					 * We use the BSD/glibc format.  SysV
					 * omits the "0x" prefix (which we emit
					 * using the PRINT_F_NUM flag).
					 */
					flags |= PRINT_F_NUM;
					flags |= PRINT_F_UNSIGNED;
					fmtint(str, &len, size,
					    (UINTPTR_T)strvalue, 16, width,
					    precision, flags);
				}
				break;
			case 'n':
				switch (cflags) {
				case PRINT_C_CHAR:
					charptr = va_arg(args, signed char *);
					*charptr = len;
					break;
				case PRINT_C_SHORT:
					shortptr = va_arg(args, short int *);
					*shortptr = len;
					break;
				case PRINT_C_LONG:
					longptr = va_arg(args, long int *);
					*longptr = len;
					break;
				case PRINT_C_LLONG:
					llongptr = va_arg(args, LLONG *);
					*llongptr = len;
					break;
				case PRINT_C_SIZE:
					/*
					 * C99 says that with the "z" length
					 * modifier, "a following `n' conversion
					 * specifier applies to a pointer to a
					 * signed integer type corresponding to
					 * size_t argument." (7.19.6.1, 7)
					 */
					sizeptr = va_arg(args, SSIZE_T *);
					*sizeptr = len;
					break;
				case PRINT_C_INTMAX:
					intmaxptr = va_arg(args, INTMAX_T *);
					*intmaxptr = len;
					break;
				case PRINT_C_PTRDIFF:
					ptrdiffptr = va_arg(args, PTRDIFF_T *);
					*ptrdiffptr = len;
					break;
				default:
					intptr = va_arg(args, int *);
					*intptr = len;
					break;
				}
				break;
			case '%':	/* Print a "%" character verbatim. */
				OUTCHAR(str, len, size, ch);
				break;
			default:	/* Skip other characters. */
				break;
			}
			ch = *format++;
			state = PRINT_S_DEFAULT;
			base = cflags = flags = width = 0;
			precision = -1;
			break;
		}
out:
	if (len < size)
		str[len] = '\0';
	else if (size > 0)
		str[size - 1] = '\0';

	if (overflow || len > INT_MAX) {
		myerrno = EOVERFLOW;
		return -1;
	}
	return (int)len;
}

static void
fmtstr(char *str, size_t *len, size_t size, const char *value, int width,
       int precision, int flags)
{
	int padlen, strln;	/* Amount to pad. */
	int noprecision = (precision == -1);

	if (value == NULL)	/* We're forgiving. */
		value = "(null)";

	/* If a precision was specified, don't read the string past it. */
	for (strln = 0; value[strln] != '\0' &&
	    (noprecision || strln < precision); strln++)
		continue;

	if ((padlen = width - strln) < 0)
		padlen = 0;
	if (flags & PRINT_F_MINUS)	/* Left justify. */
		padlen = -padlen;

	while (padlen > 0) {	/* Leading spaces. */
		OUTCHAR(str, *len, size, ' ');
		padlen--;
	}
	while (*value != '\0' && (noprecision || precision-- > 0)) {
		OUTCHAR(str, *len, size, *value);
		value++;
	}
	while (padlen < 0) {	/* Trailing spaces. */
		OUTCHAR(str, *len, size, ' ');
		padlen++;
	}
}

static void
fmtint(char *str, size_t *len, size_t size, INTMAX_T value, int base, int width,
       int precision, int flags)
{
	UINTMAX_T uvalue;
	char iconvert[MAX_CONVERT_LENGTH];
	char sign = 0;
	char hexprefix = 0;
	int spadlen = 0;	/* Amount to space pad. */
	int zpadlen = 0;	/* Amount to zero pad. */
	int pos;
	int separators = (flags & PRINT_F_QUOTE);
	int noprecision = (precision == -1);

	if (flags & PRINT_F_UNSIGNED)
		uvalue = value;
	else {
		uvalue = (value >= 0) ? value : -value;
		if (value < 0)
			sign = '-';
		else if (flags & PRINT_F_PLUS)	/* Do a sign. */
			sign = '+';
		else if (flags & PRINT_F_SPACE)
			sign = ' ';
	}

	pos = convert(uvalue, iconvert, sizeof(iconvert), base,
	    flags & PRINT_F_UP);

	if (flags & PRINT_F_NUM && uvalue != 0) {
		/*
		 * C99 says: "The result is converted to an `alternative form'.
		 * For `o' conversion, it increases the precision, if and only
		 * if necessary, to force the first digit of the result to be a
		 * zero (if the value and precision are both 0, a single 0 is
		 * printed).  For `x' (or `X') conversion, a nonzero result has
		 * `0x' (or `0X') prefixed to it." (7.19.6.1, 6)
		 */
		switch (base) {
		case 8:
			if (precision <= pos)
				precision = pos + 1;
			break;
		case 16:
			hexprefix = (flags & PRINT_F_UP) ? 'X' : 'x';
			break;
		}
	}

	if (separators)	/* Get the number of group separators we'll print. */
		separators = getnumsep(pos);

	zpadlen = precision - pos - separators;
	spadlen = width                         /* Minimum field width. */
	    - separators                        /* Number of separators. */
	    - MAX(precision, pos)               /* Number of integer digits. */
	    - ((sign != 0) ? 1 : 0)             /* Will we print a sign? */
	    - ((hexprefix != 0) ? 2 : 0);       /* Will we print a prefix? */

	if (zpadlen < 0)
		zpadlen = 0;
	if (spadlen < 0)
		spadlen = 0;

	/*
	 * C99 says: "If the `0' and `-' flags both appear, the `0' flag is
	 * ignored.  For `d', `i', `o', `u', `x', and `X' conversions, if a
	 * precision is specified, the `0' flag is ignored." (7.19.6.1, 6)
	 */
	if (flags & PRINT_F_MINUS)	/* Left justify. */
		spadlen = -spadlen;
	else if (flags & PRINT_F_ZERO && noprecision) {
		zpadlen += spadlen;
		spadlen = 0;
	}
	while (spadlen > 0) {	/* Leading spaces. */
		OUTCHAR(str, *len, size, ' ');
		spadlen--;
	}
	if (sign != 0)	/* Sign. */
		OUTCHAR(str, *len, size, sign);
	if (hexprefix != 0) {	/* A "0x" or "0X" prefix. */
		OUTCHAR(str, *len, size, '0');
		OUTCHAR(str, *len, size, hexprefix);
	}
	while (zpadlen > 0) {	/* Leading zeros. */
		OUTCHAR(str, *len, size, '0');
		zpadlen--;
	}
	while (pos > 0) {	/* The actual digits. */
		pos--;
		OUTCHAR(str, *len, size, iconvert[pos]);
		if (separators > 0 && pos > 0 && pos % 3 == 0)
			printsep(str, len, size);
	}
	while (spadlen < 0) {	/* Trailing spaces. */
		OUTCHAR(str, *len, size, ' ');
		spadlen++;
	}
}

static void
fmtflt(char *str, size_t *len, size_t size, LDOUBLE fvalue, int width,
       int precision, int flags, int *overflow)
{
	LDOUBLE ufvalue;
	UINTMAX_T intpart;
	UINTMAX_T fracpart;
	UINTMAX_T mask;
	const char *infnan = NULL;
	char iconvert[MAX_CONVERT_LENGTH];
	char fconvert[MAX_CONVERT_LENGTH];
	char econvert[5];	/* "e-300" (without nul-termination). */
	char esign = 0;
	char sign = 0;
	int leadfraczeros = 0;
	int exponent = 0;
	int emitpoint = 0;
	int omitzeros = 0;
	int omitcount = 0;
	int padlen = 0;
	int epos = 0;
	int fpos = 0;
	int ipos = 0;
	int separators = (flags & PRINT_F_QUOTE);
	int estyle = (flags & PRINT_F_TYPE_E);
#if HAVE_LOCALECONV && HAVE_LCONV_DECIMAL_POINT
	struct lconv *lc = localeconv();
#endif	/* HAVE_LOCALECONV && HAVE_LCONV_DECIMAL_POINT */

	/*
	 * AIX' man page says the default is 0, but C99 and at least Solaris'
	 * and NetBSD's man pages say the default is 6, and sprintf(3) on AIX
	 * defaults to 6.
	 */
	if (precision == -1)
		precision = 6;

	if (fvalue < 0.0)
		sign = '-';
	else if (flags & PRINT_F_PLUS)	/* Do a sign. */
		sign = '+';
	else if (flags & PRINT_F_SPACE)
		sign = ' ';

	if (ISNAN(fvalue))
		infnan = (flags & PRINT_F_UP) ? "NAN" : "nan";
	else if (ISINF(fvalue))
		infnan = (flags & PRINT_F_UP) ? "INF" : "inf";

	if (infnan != NULL) {
		if (sign != 0)
			iconvert[ipos++] = sign;
		while (*infnan != '\0')
			iconvert[ipos++] = *infnan++;
		fmtstr(str, len, size, iconvert, width, ipos, flags);
		return;
	}

	/* "%e" (or "%E") or "%g" (or "%G") conversion. */
	if (flags & PRINT_F_TYPE_E || flags & PRINT_F_TYPE_G) {
		if (flags & PRINT_F_TYPE_G) {
			/*
			 * If the precision is zero, it is treated as one (cf.
			 * C99: 7.19.6.1, 8).
			 */
			if (precision == 0)
				precision = 1;
			/*
			 * For "%g" (and "%G") conversions, the precision
			 * specifies the number of significant digits, which
			 * includes the digits in the integer part.  The
			 * conversion will or will not be using "e-style" (like
			 * "%e" or "%E" conversions) depending on the precision
			 * and on the exponent.  However, the exponent can be
			 * affected by rounding the converted value, so we'll
			 * leave this decision for later.  Until then, we'll
			 * assume that we're going to do an "e-style" conversion
			 * (in order to get the exponent calculated).  For
			 * "e-style", the precision must be decremented by one.
			 */
			precision--;
			/*
			 * For "%g" (and "%G") conversions, trailing zeros are
			 * removed from the fractional portion of the result
			 * unless the "#" flag was specified.
			 */
			if (!(flags & PRINT_F_NUM))
				omitzeros = 1;
		}
		exponent = getexponent(fvalue);
		estyle = 1;
	}

again:
	/*
	 * Sorry, we only support 9, 19, or 38 digits (that is, the number of
	 * digits of the 32-bit, the 64-bit, or the 128-bit UINTMAX_MAX value
	 * minus one) past the decimal point due to our conversion method.
	 */
	switch (sizeof(UINTMAX_T)) {
	case 16:
		if (precision > 38)
			precision = 38;
		break;
	case 8:
		if (precision > 19)
			precision = 19;
		break;
	default:
		if (precision > 9)
			precision = 9;
		break;
	}

	ufvalue = (fvalue >= 0.0) ? fvalue : -fvalue;
	if (estyle)	/* We want exactly one integer digit. */
		ufvalue /= mypow10(exponent);

	if ((intpart = cast(ufvalue)) == UINTMAX_MAX) {
		*overflow = 1;
		return;
	}

	/*
	 * Factor of ten with the number of digits needed for the fractional
	 * part.  For example, if the precision is 3, the mask will be 1000.
	 */
	mask = mypow10(precision);
	/*
	 * We "cheat" by converting the fractional part to integer by
	 * multiplying by a factor of ten.
	 */
	if ((fracpart = myround(mask * (ufvalue - intpart))) >= mask) {
		/*
		 * For example, ufvalue = 2.99962, intpart = 2, and mask = 1000
		 * (because precision = 3).  Now, myround(1000 * 0.99962) will
		 * return 1000.  So, the integer part must be incremented by one
		 * and the fractional part must be set to zero.
		 */
		intpart++;
		fracpart = 0;
		if (estyle && intpart == 10) {
			/*
			 * The value was rounded up to ten, but we only want one
			 * integer digit if using "e-style".  So, the integer
			 * part must be set to one and the exponent must be
			 * incremented by one.
			 */
			intpart = 1;
			exponent++;
		}
	}

	/*
	 * Now that we know the real exponent, we can check whether or not to
	 * use "e-style" for "%g" (and "%G") conversions.  If we don't need
	 * "e-style", the precision must be adjusted and the integer and
	 * fractional parts must be recalculated from the original value.
	 *
	 * C99 says: "Let P equal the precision if nonzero, 6 if the precision
	 * is omitted, or 1 if the precision is zero.  Then, if a conversion
	 * with style `E' would have an exponent of X:
	 *
	 * - if P > X >= -4, the conversion is with style `f' (or `F') and
	 *   precision P - (X + 1).
	 *
	 * - otherwise, the conversion is with style `e' (or `E') and precision
	 *   P - 1." (7.19.6.1, 8)
	 *
	 * Note that we had decremented the precision by one.
	 */
	if (flags & PRINT_F_TYPE_G && estyle &&
	    precision + 1 > exponent && exponent >= -4) {
		precision -= exponent;
		estyle = 0;
		goto again;
	}

	if (estyle) {
		if (exponent < 0) {
			exponent = -exponent;
			esign = '-';
		} else
			esign = '+';

		/*
		 * Convert the exponent.  The sizeof(econvert) is 5.  So, the
		 * econvert buffer can hold e.g. "e+999" and "e-999".  We don't
		 * support an exponent which contains more than three digits.
		 * Therefore, the following stores are safe.
		 */
		epos = convert(exponent, econvert, 3, 10, 0);
		/*
		 * C99 says: "The exponent always contains at least two digits,
		 * and only as many more digits as necessary to represent the
		 * exponent." (7.19.6.1, 8)
		 */
		if (epos == 1)
			econvert[epos++] = '0';
		econvert[epos++] = esign;
		econvert[epos++] = (flags & PRINT_F_UP) ? 'E' : 'e';
	}

	/* Convert the integer part and the fractional part. */
	ipos = convert(intpart, iconvert, sizeof(iconvert), 10, 0);
	if (fracpart != 0)	/* convert() would return 1 if fracpart == 0. */
		fpos = convert(fracpart, fconvert, sizeof(fconvert), 10, 0);

	leadfraczeros = precision - fpos;

	if (omitzeros) {
		if (fpos > 0)	/* Omit trailing fractional part zeros. */
			while (omitcount < fpos && fconvert[omitcount] == '0')
				omitcount++;
		else {	/* The fractional part is zero, omit it completely. */
			omitcount = precision;
			leadfraczeros = 0;
		}
		precision -= omitcount;
	}

	/*
	 * Print a decimal point if either the fractional part is non-zero
	 * and/or the "#" flag was specified.
	 */
	if (precision > 0 || flags & PRINT_F_NUM)
		emitpoint = 1;
	if (separators)	/* Get the number of group separators we'll print. */
		separators = getnumsep(ipos);

	padlen = width                  /* Minimum field width. */
	    - ipos                      /* Number of integer digits. */
	    - epos                      /* Number of exponent characters. */
	    - precision                 /* Number of fractional digits. */
	    - separators                /* Number of group separators. */
	    - (emitpoint ? 1 : 0)       /* Will we print a decimal point? */
	    - ((sign != 0) ? 1 : 0);    /* Will we print a sign character? */

	if (padlen < 0)
		padlen = 0;

	/*
	 * C99 says: "If the `0' and `-' flags both appear, the `0' flag is
	 * ignored." (7.19.6.1, 6)
	 */
	if (flags & PRINT_F_MINUS)	/* Left justifty. */
		padlen = -padlen;
	else if (flags & PRINT_F_ZERO && padlen > 0) {
		if (sign != 0) {	/* Sign. */
			OUTCHAR(str, *len, size, sign);
			sign = 0;
		}
		while (padlen > 0) {	/* Leading zeros. */
			OUTCHAR(str, *len, size, '0');
			padlen--;
		}
	}
	while (padlen > 0) {	/* Leading spaces. */
		OUTCHAR(str, *len, size, ' ');
		padlen--;
	}
	if (sign != 0)	/* Sign. */
		OUTCHAR(str, *len, size, sign);
	while (ipos > 0) {	/* Integer part. */
		ipos--;
		OUTCHAR(str, *len, size, iconvert[ipos]);
		if (separators > 0 && ipos > 0 && ipos % 3 == 0)
			printsep(str, len, size);
	}
	if (emitpoint) {	/* Decimal point. */
#if HAVE_LOCALECONV && HAVE_LCONV_DECIMAL_POINT
		if (lc->decimal_point != NULL && *lc->decimal_point != '\0')
			OUTCHAR(str, *len, size, *lc->decimal_point);
		else	/* We'll always print some decimal point character. */
#endif	/* HAVE_LOCALECONV && HAVE_LCONV_DECIMAL_POINT */
			OUTCHAR(str, *len, size, '.');
	}
	while (leadfraczeros > 0) {	/* Leading fractional part zeros. */
		OUTCHAR(str, *len, size, '0');
		leadfraczeros--;
	}
	while (fpos > omitcount) {	/* The remaining fractional part. */
		fpos--;
		OUTCHAR(str, *len, size, fconvert[fpos]);
	}
	while (epos > 0) {	/* Exponent. */
		epos--;
		OUTCHAR(str, *len, size, econvert[epos]);
	}
	while (padlen < 0) {	/* Trailing spaces. */
		OUTCHAR(str, *len, size, ' ');
		padlen++;
	}
}

static void
printsep(char *str, size_t *len, size_t size)
{
#if HAVE_LOCALECONV && HAVE_LCONV_THOUSANDS_SEP
	struct lconv *lc = localeconv();
	int i;

	if (lc->thousands_sep != NULL)
		for (i = 0; lc->thousands_sep[i] != '\0'; i++)
			OUTCHAR(str, *len, size, lc->thousands_sep[i]);
	else
#endif	/* HAVE_LOCALECONV && HAVE_LCONV_THOUSANDS_SEP */
		OUTCHAR(str, *len, size, ',');
}

static int
getnumsep(int digits)
{
	int separators = (digits - ((digits % 3 == 0) ? 1 : 0)) / 3;
#if HAVE_LOCALECONV && HAVE_LCONV_THOUSANDS_SEP
	int strln;
	struct lconv *lc = localeconv();

	/* We support an arbitrary separator length (including zero). */
	if (lc->thousands_sep != NULL) {
		for (strln = 0; lc->thousands_sep[strln] != '\0'; strln++)
			continue;
		separators *= strln;
	}
#endif	/* HAVE_LOCALECONV && HAVE_LCONV_THOUSANDS_SEP */
	return separators;
}

static int
getexponent(LDOUBLE value)
{
	LDOUBLE tmp = (value >= 0.0) ? value : -value;
	int exponent = 0;

	/*
	 * We check for LDOUBLE_MAX_10_EXP >= exponent >= LDOUBLE_MIN_10_EXP in
	 * order to work around possible endless loops which could happen (at
	 * least) in the second loop (at least) if we're called with an infinite
	 * value.  However, we checked for infinity before calling this function
	 * using our ISINF() macro, so this might be somewhat paranoid.
	 */
	while (tmp < 1.0 && tmp > 0.0 && --exponent >= LDOUBLE_MIN_10_EXP)
		tmp *= 10;
	while (tmp >= 10.0 && ++exponent <= LDOUBLE_MAX_10_EXP)
		tmp /= 10;

	return exponent;
}

static int
convert(UINTMAX_T value, char *buf, size_t size, int base, int caps)
{
	const char *digits = caps ? "0123456789ABCDEF" : "0123456789abcdef";
	size_t pos = 0;

	/* We return an unterminated buffer with the digits in reverse order. */
	do {
		buf[pos++] = digits[value % base];
		value /= base;
	} while (value != 0 && pos < size);

	return (int)pos;
}

static UINTMAX_T
cast(LDOUBLE value)
{
	UINTMAX_T result;

	/*
	 * We check for ">=" and not for ">" because if UINTMAX_MAX cannot be
	 * represented exactly as an LDOUBLE value (but is less than LDBL_MAX),
	 * it may be increased to the nearest higher representable value for the
	 * comparison (cf. C99: 6.3.1.4, 2).  It might then equal the LDOUBLE
	 * value although converting the latter to UINTMAX_T would overflow.
	 */
	if (value >= UINTMAX_MAX)
		return UINTMAX_MAX;

	result = value;
	/*
	 * At least on NetBSD/sparc64 3.0.2 and 4.99.30, casting long double to
	 * an integer type converts e.g. 1.9 to 2 instead of 1 (which violates
	 * the standard).  Sigh.
	 */
	return (result <= value) ? result : result - 1;
}

static UINTMAX_T
myround(LDOUBLE value)
{
	UINTMAX_T intpart = cast(value);

	return ((value -= intpart) < 0.5) ? intpart : intpart + 1;
}

static LDOUBLE
mypow10(int exponent)
{
	LDOUBLE result = 1;

	while (exponent > 0) {
		result *= 10;
		exponent--;
	}
	while (exponent < 0) {
		result /= 10;
		exponent++;
	}
	return result;
}


#endif // DO_REPL_IMPL

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_mem_eq
#define ZZ_EXPORT_mem_eq
extern bool mem_eq (void const *  const  a, void const *  const  b, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_mem_set
#define ZZ_EXPORT_mem_set
extern void mem_set (void*  const  dst, uint8_t const  c, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_cstr_eq
#define ZZ_EXPORT_buffer_cstr_eq
bool buffer_cstr_eq (char const *  const  a, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_log_LogLevel
#define ZZ_FORWARD_log_LogLevel
#endif
#ifndef ZZ_FORWARD_log_log_level
#define ZZ_FORWARD_log_log_level
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_log_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_log_src_os_h_
#endif
#ifndef ZZ_FORWARD_log_info
#define ZZ_FORWARD_log_info
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_log_debug
#define ZZ_FORWARD_log_debug
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_log_warn
#define ZZ_FORWARD_log_warn
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_buffer_cstr_eq
#define ZZ_FORWARD_buffer_cstr_eq
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_log_s_log_level
#define ZZ_FORWARD_log_s_log_level
#endif
#ifndef ZZ_FORWARD_log_log_level
#define ZZ_FORWARD_log_log_level
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_log_LogLevel
#define ZZ_EXPORT_log_LogLevel
typedef enum {
    log_LogLevel_Invalid = 99999,
    log_LogLevel_None = 0,
    log_LogLevel_Error = 1,
    log_LogLevel_Warn = 2,
    log_LogLevel_Info = 3,
    log_LogLevel_Debug = 4,

} log_LogLevel;

#endif
#ifndef ZZ_EXPORT_log_log_level
#define ZZ_EXPORT_log_log_level
static log_LogLevel log_log_level ();

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_log_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_log_src_os_h_

#line 1 "/home/aep/proj/zz/modules/log/src/os.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>


#if defined(__ANDROID__)
#include <android/log.h>

    #define os_zz_log_error(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        __android_log_vprint( ANDROID_LOG_ERROR, mod, fmt, args); \
        va_end (args);

    #define os_zz_log_debug(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        __android_log_vprint( ANDROID_LOG_DEBUG, mod, fmt, args); \
        va_end (args);

    #define os_zz_log_info(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        __android_log_vprint( ANDROID_LOG_INFO, mod, fmt, args); \
        va_end (args);

    #define os_zz_log_warn(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        __android_log_vprint( ANDROID_LOG_WARN, mod, fmt, args); \
        va_end (args);

#elif defined (ESP_PLATFORM)

    #define getenv(a) 0
    #include "esp_log.h"

    #define os_zz_log_error(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        esp_log_write(ESP_LOG_ERROR, mod, LOG_COLOR_E " (%d) %s: " LOG_RESET_COLOR, esp_log_timestamp(), mod); \
        esp_log_writev(ESP_LOG_ERROR, mod, fmt, args); \
        esp_log_write(ESP_LOG_ERROR, mod, "\n"); \
        va_end (args);

    #define os_zz_log_debug(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        esp_log_write(ESP_LOG_DEBUG, mod, LOG_COLOR_D " (%d) %s: " LOG_RESET_COLOR, esp_log_timestamp(), mod); \
        esp_log_writev(ESP_LOG_DEBUG, mod, fmt, args); \
        esp_log_write(ESP_LOG_DEBUG, mod, "\n"); \
        va_end (args);

    #define os_zz_log_info(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        esp_log_write(ESP_LOG_INFO, mod, LOG_COLOR_I " (%d) %s: " LOG_RESET_COLOR, esp_log_timestamp(), mod); \
        esp_log_writev(ESP_LOG_INFO, mod, fmt, args); \
        esp_log_write(ESP_LOG_INFO, mod, "\n"); \
        va_end (args);

    #define os_zz_log_warn(mod, fmt) \
        va_list args; \
        va_start (args, fmt); \
        esp_log_write(ESP_LOG_WARN, mod, LOG_COLOR_W " (%d) %s: " LOG_RESET_COLOR, esp_log_timestamp(), mod); \
        esp_log_writev(ESP_LOG_WARN, mod, fmt, args); \
        esp_log_write(ESP_LOG_WARN, mod, "\n"); \
        va_end (args);


#else

    #define os_zz_log_error(mod, fmt) \
        fprintf(stderr, "[\x1B[31mERR\x1B[0m] %s ", mod); \
        va_list args; \
        va_start (args, fmt); \
        vfprintf( \
            stderr, \
            fmt, \
            args \
        ); \
        va_end (args); \
        fprintf(stderr, "\n"); \

    #define os_zz_log_warn(mod, fmt) \
        fprintf(stderr, "[\x1B[33mWRN\x1B[0m] %s ", module); \
        va_list args; \
        va_start (args, fmt); \
        vfprintf( \
            stderr, \
            fmt, \
            args \
        ); \
        va_end (args); \
        fprintf(stderr, "\n"); \

    #define os_zz_log_info(mod, fmt) \
        fprintf(stderr, "[\x1B[32mINF\x1B[0m] %s ", module); \
        va_list args; \
        va_start (args, fmt); \
        vfprintf( \
            stderr, \
            fmt, \
            args \
        ); \
        va_end (args); \
        fprintf(stderr, "\n"); \


    #define os_zz_log_debug(mod, fmt) \
        fprintf(stderr, "[\x1B[36mDBG\x1B[0m] %s ", module); \
        va_list args; \
        va_start (args, fmt); \
        vfprintf( \
            stderr, \
            fmt, \
            args \
        ); \
        va_end (args); \
        fprintf(stderr, "\n"); \

#endif


#endif
#ifndef ZZ_EXPORT_log_info
#define ZZ_EXPORT_log_info
void log_info (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_log_debug
#define ZZ_EXPORT_log_debug
void log_debug (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_log_warn
#define ZZ_EXPORT_log_warn
void log_warn (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_cstr_eq
#define ZZ_EXPORT_buffer_cstr_eq
bool buffer_cstr_eq (char const *  const  a, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_log_log_level
#define ZZ_EXPORT_log_log_level
static log_LogLevel log_log_level ();

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_secret
#define ZZ_FORWARD_carrier_identity_address_from_secret
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#define ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_identity_dh
#define ZZ_FORWARD_carrier_identity_dh
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_revision_revision
#define ZZ_FORWARD_carrier_revision_revision
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD__assert_h_
#define ZZ_FORWARD__assert_h_
#endif
#ifndef ZZ_FORWARD_carrier_responder_accept_insecure
#define ZZ_FORWARD_carrier_responder_accept_insecure
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_secret
#define ZZ_EXPORT_carrier_identity_address_from_secret
void carrier_identity_address_from_secret (carrier_identity_Address*  const  pk, carrier_identity_Secret const *  const  sk);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define carrier_endpoint_SIGN_PURPOSE ((char  const * )    "carrier handshake hash 1")

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_dh
#define ZZ_EXPORT_carrier_identity_dh
void carrier_identity_dh (carrier_identity_Address*  const  out, carrier_identity_Secret const *  const  me, carrier_identity_Address const *  const  them);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_revision_revision
#define ZZ_EXPORT_carrier_revision_revision
uint32_t  static inline carrier_revision_revision ();

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT__assert_h_
#define ZZ_EXPORT__assert_h_
#include <assert.h>

#endif
#ifndef ZZ_EXPORT_carrier_responder_accept_insecure
#define ZZ_EXPORT_carrier_responder_accept_insecure
extern void carrier_responder_accept_insecure (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const *  const  store, uint64_t route, uint64_t const  timestamp, slice_mut_slice_MutSlice*  const  frame);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_err_checked
#define ZZ_FORWARD_err_checked
#endif
#ifndef ZZ_FORWARD_buffer_integrity
#define ZZ_FORWARD_buffer_integrity
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_string
#define ZZ_FORWARD_carrier_identity_identity_to_string
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_slice_slice_integrity
#define ZZ_FORWARD_slice_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_slice_make
#define ZZ_FORWARD_slice_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network
#define ZZ_FORWARD_carrier_vault_set_network
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_integrity
#define ZZ_FORWARD_slice_mut_slice_integrity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push
#define ZZ_FORWARD_slice_mut_slice_push
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_cb
#define ZZ_FORWARD_carrier_vault_list_authorizations_cb
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_toml_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_err_backtrace
#define ZZ_FORWARD_err_backtrace
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_close
#define ZZ_FORWARD_carrier_bootstrap_close
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push16
#define ZZ_FORWARD_slice_mut_slice_push16
#endif
#ifndef ZZ_FORWARD_carrier_sha256_HASHLEN
#define ZZ_FORWARD_carrier_sha256_HASHLEN
#endif
#ifndef ZZ_FORWARD_carrier_cipher_CipherState
#define ZZ_FORWARD_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t;
typedef struct carrier_cipher_CipherState_t carrier_cipher_CipherState;
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_SymmetricState
#define ZZ_FORWARD_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t;
typedef struct carrier_symmetric_SymmetricState_t carrier_symmetric_SymmetricState;
#endif
#ifndef ZZ_FORWARD_carrier_vault_close_fn
#define ZZ_FORWARD_carrier_vault_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_fn
#define ZZ_FORWARD_carrier_vault_sign_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_identity_fn
#define ZZ_FORWARD_carrier_vault_get_identity_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_fn
#define ZZ_FORWARD_carrier_vault_get_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_advance_clock_fn
#define ZZ_FORWARD_carrier_vault_advance_clock_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_set_network_fn
#define ZZ_FORWARD_carrier_vault_set_network_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret_fn
#define ZZ_FORWARD_carrier_vault_get_network_secret_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations_fn
#define ZZ_FORWARD_carrier_vault_list_authorizations_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization_fn
#define ZZ_FORWARD_carrier_vault_del_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization_fn
#define ZZ_FORWARD_carrier_vault_add_authorization_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Secret
#define ZZ_FORWARD_carrier_identity_Secret
struct carrier_identity_Secret_t;
typedef struct carrier_identity_Secret_t carrier_identity_Secret;
#endif
#ifndef ZZ_FORWARD_carrier_identity_SecretKit
#define ZZ_FORWARD_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t;
typedef struct carrier_identity_SecretKit_t carrier_identity_SecretKit;
#endif
#ifndef ZZ_FORWARD_carrier_vault_Broker
#define ZZ_FORWARD_carrier_vault_Broker
struct carrier_vault_Broker_t;
typedef struct carrier_vault_Broker_t carrier_vault_Broker;
#endif
#ifndef ZZ_FORWARD_carrier_vault_MAX_BROKERS
#define ZZ_FORWARD_carrier_vault_MAX_BROKERS
#endif
#ifndef ZZ_FORWARD_carrier_vault_Vault
#define ZZ_FORWARD_carrier_vault_Vault
struct carrier_vault_Vault_t;
typedef struct carrier_vault_Vault_t carrier_vault_Vault;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Move
#define ZZ_FORWARD_carrier_initiator_Move
#endif
#ifndef ZZ_FORWARD_carrier_identity_Identity
#define ZZ_FORWARD_carrier_identity_Identity
struct carrier_identity_Identity_t;
typedef struct carrier_identity_Identity_t carrier_identity_Identity;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_io_Context
#define ZZ_FORWARD_io_Context
struct io_Context_t;
typedef struct io_Context_t io_Context;
#endif
#ifndef ZZ_FORWARD_netio_udp_Socket
#define ZZ_FORWARD_netio_udp_Socket
struct netio_udp_Socket_t;
typedef struct netio_udp_Socket_t netio_udp_Socket;
#endif
#ifndef ZZ_FORWARD_net_address_Type
#define ZZ_FORWARD_net_address_Type
#endif
#ifndef ZZ_FORWARD_net_address_Address
#define ZZ_FORWARD_net_address_Address
struct net_address_Address_t;
typedef struct net_address_Address_t net_address_Address;
#endif
#ifndef ZZ_FORWARD_netio_tcp_Socket
#define ZZ_FORWARD_netio_tcp_Socket
struct netio_tcp_Socket_t;
typedef struct netio_tcp_Socket_t netio_tcp_Socket;
#endif
#ifndef ZZ_FORWARD_io_Result
#define ZZ_FORWARD_io_Result
#endif
#ifndef ZZ_FORWARD_io_read_fn
#define ZZ_FORWARD_io_read_fn
#endif
#ifndef ZZ_FORWARD_io_write_fn
#define ZZ_FORWARD_io_write_fn
#endif
#ifndef ZZ_FORWARD_io_close_fn
#define ZZ_FORWARD_io_close_fn
#endif
#ifndef ZZ_FORWARD_io_Io
#define ZZ_FORWARD_io_Io
struct io_Io_t;
typedef struct io_Io_t io_Io;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_State
#define ZZ_FORWARD_carrier_endpoint_State
#endif
#ifndef ZZ_FORWARD_carrier_identity_Address
#define ZZ_FORWARD_carrier_identity_Address
struct carrier_identity_Address_t;
typedef struct carrier_identity_Address_t carrier_identity_Address;
#endif
#ifndef ZZ_FORWARD_carrier_noise_Initiator
#define ZZ_FORWARD_carrier_noise_Initiator
struct carrier_noise_Initiator_t;
typedef struct carrier_noise_Initiator_t carrier_noise_Initiator;
#endif
#ifndef ZZ_FORWARD_carrier_initiator_Initiator
#define ZZ_FORWARD_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t;
typedef struct carrier_initiator_Initiator_t carrier_initiator_Initiator;
#endif
#ifndef ZZ_FORWARD__stddef_h_
#define ZZ_FORWARD__stddef_h_
#endif
#ifndef ZZ_FORWARD_buffer_Buffer
#define ZZ_FORWARD_buffer_Buffer
struct buffer_Buffer_t;
typedef struct buffer_Buffer_t buffer_Buffer;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1500
#define ZZ_FORWARD_buffer_Buffer_1500
struct buffer_Buffer_1500_t;
typedef struct buffer_Buffer_1500_t buffer_Buffer_1500;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_2000
#define ZZ_FORWARD_buffer_Buffer_2000
struct buffer_Buffer_2000_t;
typedef struct buffer_Buffer_2000_t buffer_Buffer_2000;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_20
#define ZZ_FORWARD_buffer_Buffer_20
struct buffer_Buffer_20_t;
typedef struct buffer_Buffer_20_t buffer_Buffer_20;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_300
#define ZZ_FORWARD_buffer_Buffer_300
struct buffer_Buffer_300_t;
typedef struct buffer_Buffer_300_t buffer_Buffer_300;
#endif
#ifndef ZZ_FORWARD_buffer_Buffer_1024
#define ZZ_FORWARD_buffer_Buffer_1024
struct buffer_Buffer_1024_t;
typedef struct buffer_Buffer_1024_t buffer_Buffer_1024;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_ConnectingState
#define ZZ_FORWARD_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t;
typedef struct carrier_endpoint_ConnectingState_t carrier_endpoint_ConnectingState;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_MutSlice
#define ZZ_FORWARD_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t;
typedef struct slice_mut_slice_MutSlice_t slice_mut_slice_MutSlice;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Frame
#define ZZ_FORWARD_carrier_pq_Frame
struct carrier_pq_Frame_t;
typedef struct carrier_pq_Frame_t carrier_pq_Frame;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q
#define ZZ_FORWARD_carrier_pq_Q
struct carrier_pq_Q_t;
typedef struct carrier_pq_Q_t carrier_pq_Q;
#endif
#ifndef ZZ_FORWARD_carrier_pq_Q_64
#define ZZ_FORWARD_carrier_pq_Q_64
struct carrier_pq_Q_64_t;
typedef struct carrier_pq_Q_64_t carrier_pq_Q_64;
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Transport
#define ZZ_FORWARD_carrier_peering_Transport
#endif
#ifndef ZZ_FORWARD_carrier_peering_Class
#define ZZ_FORWARD_carrier_peering_Class
#endif
#ifndef ZZ_FORWARD_carrier_peering_Path
#define ZZ_FORWARD_carrier_peering_Path
struct carrier_peering_Path_t;
typedef struct carrier_peering_Path_t carrier_peering_Path;
#endif
#ifndef ZZ_FORWARD_carrier_peering_Peering
#define ZZ_FORWARD_carrier_peering_Peering
struct carrier_peering_Peering_t;
typedef struct carrier_peering_Peering_t carrier_peering_Peering;
#endif
#ifndef ZZ_FORWARD_carrier_channel_Channel
#define ZZ_FORWARD_carrier_channel_Channel
struct carrier_channel_Channel_t;
typedef struct carrier_channel_Channel_t carrier_channel_Channel;
#endif
#ifndef ZZ_FORWARD_carrier_router_MAX_CHANNELS
#define ZZ_FORWARD_carrier_router_MAX_CHANNELS
#endif
#ifndef ZZ_FORWARD_carrier_router_Router
#define ZZ_FORWARD_carrier_router_Router
struct carrier_router_Router_t;
typedef struct carrier_router_Router_t carrier_router_Router;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_StateM
#define ZZ_FORWARD_carrier_endpoint_StateM
union carrier_endpoint_StateM_t;
typedef union carrier_endpoint_StateM_t carrier_endpoint_StateM;
#endif
#ifndef ZZ_FORWARD_pool_Pool
#define ZZ_FORWARD_pool_Pool
struct pool_Pool_t;
typedef struct pool_Pool_t pool_Pool;
#endif
#ifndef ZZ_FORWARD_pool_Pool_1024
#define ZZ_FORWARD_pool_Pool_1024
struct pool_Pool_1024_t;
typedef struct pool_Pool_1024_t pool_Pool_1024;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_Endpoint
#define ZZ_FORWARD_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t;
typedef struct carrier_endpoint_Endpoint_t carrier_endpoint_Endpoint;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_secretkit
#define ZZ_FORWARD_carrier_endpoint_from_secretkit
#endif
#ifndef ZZ_FORWARD_toml_ParserState
#define ZZ_FORWARD_toml_ParserState
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_toml_ValueType
#define ZZ_FORWARD_toml_ValueType
#endif
#ifndef ZZ_FORWARD_toml_Value
#define ZZ_FORWARD_toml_Value
struct toml_Value_t;
typedef struct toml_Value_t toml_Value;
#endif
#ifndef ZZ_FORWARD_toml_Iter
#define ZZ_FORWARD_toml_Iter
#endif
#ifndef ZZ_FORWARD_toml_Pop
#define ZZ_FORWARD_toml_Pop
#endif
#ifndef ZZ_FORWARD_toml_U
#define ZZ_FORWARD_toml_U
struct toml_U_t;
typedef struct toml_U_t toml_U;
#endif
#ifndef ZZ_FORWARD_toml_ParserStack
#define ZZ_FORWARD_toml_ParserStack
struct toml_ParserStack_t;
typedef struct toml_ParserStack_t toml_ParserStack;
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishChange
#define ZZ_FORWARD_carrier_proto_PublishChange
#endif
#ifndef ZZ_FORWARD_time_Time
#define ZZ_FORWARD_time_Time
struct time_Time_t;
typedef struct time_Time_t time_Time;
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_cstr
#define ZZ_FORWARD_carrier_identity_address_from_cstr
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes_start
#define ZZ_FORWARD_protonerf_encode_bytes_start
#endif
#ifndef ZZ_FORWARD__stdio_h_
#define ZZ_FORWARD__stdio_h_
#endif
#ifndef ZZ_FORWARD_io_Ready
#define ZZ_FORWARD_io_Ready
#endif
#ifndef ZZ_FORWARD_io_select
#define ZZ_FORWARD_io_select
#endif
#ifndef ZZ_FORWARD_err_eprintf
#define ZZ_FORWARD_err_eprintf
#endif
#ifndef ZZ_FORWARD_buffer_copy_bytes
#define ZZ_FORWARD_buffer_copy_bytes
#endif
#ifndef ZZ_FORWARD_io_read_bytes
#define ZZ_FORWARD_io_read_bytes
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_byteorder_src_lib_h_
#endif
#ifndef ZZ_FORWARD_byteorder_swap32
#define ZZ_FORWARD_byteorder_swap32
#endif
#ifndef ZZ_FORWARD_byteorder_swap64
#define ZZ_FORWARD_byteorder_swap64
#endif
#ifndef ZZ_FORWARD_byteorder_to_be64
#define ZZ_FORWARD_byteorder_to_be64
#endif
#ifndef ZZ_FORWARD_carrier_channel_open_with_headers
#define ZZ_FORWARD_carrier_channel_open_with_headers
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv6
#define ZZ_FORWARD_net_address_from_str_ipv6
#endif
#ifndef ZZ_FORWARD_err_fail_with_system_error
#define ZZ_FORWARD_err_fail_with_system_error
#endif
#ifndef ZZ_FORWARD_time_to_millis
#define ZZ_FORWARD_time_to_millis
#endif
#ifndef ZZ_FORWARD_carrier_pq_window
#define ZZ_FORWARD_carrier_pq_window
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_network
#define ZZ_FORWARD_carrier_vault_ik_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_do_poll
#define ZZ_FORWARD_carrier_stream_do_poll
#endif
#ifndef ZZ_FORWARD_byteorder_to_be32
#define ZZ_FORWARD_byteorder_to_be32
#endif
#ifndef ZZ_FORWARD_carrier_channel_cleanup
#define ZZ_FORWARD_carrier_channel_cleanup
#endif
#ifndef ZZ_FORWARD_io_wait_fn
#define ZZ_FORWARD_io_wait_fn
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_carrier_identity_alias_from_str
#define ZZ_FORWARD_carrier_identity_alias_from_str
#endif
#ifndef ZZ_FORWARD_pool_member
#define ZZ_FORWARD_pool_member
#endif
#ifndef ZZ_FORWARD_pool_continuous
#define ZZ_FORWARD_pool_continuous
#endif
#ifndef ZZ_FORWARD_pool_free
#define ZZ_FORWARD_pool_free
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD__string_h_
#define ZZ_FORWARD__string_h_
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_to_str
#define ZZ_FORWARD_carrier_identity_identity_to_str
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_state_connect
#define ZZ_FORWARD_carrier_endpoint_do_state_connect
#endif
#ifndef ZZ_FORWARD_slice_slice_Slice
#define ZZ_FORWARD_slice_slice_Slice
struct slice_slice_Slice_t;
typedef struct slice_slice_Slice_t slice_slice_Slice;
#endif
#ifndef ZZ_FORWARD_netio_tcp_send
#define ZZ_FORWARD_netio_tcp_send
#endif
#ifndef ZZ_FORWARD_buffer_append_bytes
#define ZZ_FORWARD_buffer_append_bytes
#endif
#ifndef ZZ_FORWARD_io_write
#define ZZ_FORWARD_io_write
#endif
#ifndef ZZ_FORWARD_carrier_channel_FrameType
#define ZZ_FORWARD_carrier_channel_FrameType
#endif
#ifndef ZZ_FORWARD_carrier_cipher_init
#define ZZ_FORWARD_carrier_cipher_init
#endif
#ifndef ZZ_FORWARD_io_timeout
#define ZZ_FORWARD_io_timeout
#endif
#ifndef ZZ_FORWARD_carrier_channel_poll
#define ZZ_FORWARD_carrier_channel_poll
#endif
#ifndef ZZ_FORWARD_carrier_pq_ack
#define ZZ_FORWARD_carrier_pq_ack
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_cstr
#define ZZ_FORWARD_carrier_identity_secret_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network
#define ZZ_FORWARD_carrier_vault_toml_i_get_network
#endif
#ifndef ZZ_FORWARD_carrier_router_disconnect
#define ZZ_FORWARD_carrier_router_disconnect
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_generate
#define ZZ_FORWARD_carrier_identity_secretkit_generate
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_set_network
#define ZZ_FORWARD_carrier_vault_ik_i_set_network
#endif
#ifndef ZZ_FORWARD_carrier_stream_cancel
#define ZZ_FORWARD_carrier_stream_cancel
#endif
#ifndef ZZ_FORWARD_carrier_proto_PublishRequest
#define ZZ_FORWARD_carrier_proto_PublishRequest
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt
#define ZZ_FORWARD_carrier_cipher_decrypt
#endif
#ifndef ZZ_FORWARD_net_address_get_port
#define ZZ_FORWARD_net_address_get_port
#endif
#ifndef ZZ_FORWARD_mem_copy
#define ZZ_FORWARD_mem_copy
#endif
#ifndef ZZ_FORWARD_carrier_pq_keepalive
#define ZZ_FORWARD_carrier_pq_keepalive
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapdec
#define ZZ_FORWARD_carrier_pq_wrapdec
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_generate
#define ZZ_FORWARD_carrier_identity_secret_generate
#endif
#ifndef ZZ_FORWARD_net_address_from_buffer
#define ZZ_FORWARD_net_address_from_buffer
#endif
#ifndef ZZ_FORWARD_carrier_channel_Transfer
#define ZZ_FORWARD_carrier_channel_Transfer
struct carrier_channel_Transfer_t;
typedef struct carrier_channel_Transfer_t carrier_channel_Transfer;
#endif
#ifndef ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#define ZZ_FORWARD_carrier_channel_transfer_from_symmetric
#endif
#ifndef ZZ_FORWARD_buffer_cstr
#define ZZ_FORWARD_buffer_cstr
#endif
#ifndef ZZ_FORWARD_buffer_copy_cstr
#define ZZ_FORWARD_buffer_copy_cstr
#endif
#ifndef ZZ_FORWARD_buffer_eq_cstr
#define ZZ_FORWARD_buffer_eq_cstr
#endif
#ifndef ZZ_FORWARD_net_address_set_ip
#define ZZ_FORWARD_net_address_set_ip
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_hash
#define ZZ_FORWARD_carrier_symmetric_mix_hash
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_protonerf_decode
#define ZZ_FORWARD_protonerf_decode
#endif
#ifndef ZZ_FORWARD_protonerf_Value
#define ZZ_FORWARD_protonerf_Value
union protonerf_Value_t;
typedef union protonerf_Value_t protonerf_Value;
#endif
#ifndef ZZ_FORWARD_protonerf_Field
#define ZZ_FORWARD_protonerf_Field
struct protonerf_Field_t;
typedef struct protonerf_Field_t protonerf_Field;
#endif
#ifndef ZZ_FORWARD_err_check
#define ZZ_FORWARD_err_check
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectRequest
#define ZZ_FORWARD_carrier_proto_PeerConnectRequest
#endif
#ifndef ZZ_FORWARD_err_fail
#define ZZ_FORWARD_err_fail
#endif
#ifndef ZZ_FORWARD_carrier_channel_InvalidFrame
#define ZZ_FORWARD_carrier_channel_InvalidFrame
#endif
#ifndef ZZ_FORWARD_log_info
#define ZZ_FORWARD_log_info
#endif
#ifndef ZZ_FORWARD_carrier_noise_Responder
#define ZZ_FORWARD_carrier_noise_Responder
struct carrier_noise_Responder_t;
typedef struct carrier_noise_Responder_t carrier_noise_Responder;
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_PROLOGUE
#define ZZ_FORWARD_carrier_endpoint_PROLOGUE
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#define ZZ_FORWARD_carrier_endpoint_SIGN_PURPOSE
#endif
#ifndef ZZ_FORWARD_buffer_strlen
#define ZZ_FORWARD_buffer_strlen
#endif
#ifndef ZZ_FORWARD_carrier_identity_Signature
#define ZZ_FORWARD_carrier_identity_Signature
struct carrier_identity_Signature_t;
typedef struct carrier_identity_Signature_t carrier_identity_Signature;
#endif
#ifndef ZZ_FORWARD_carrier_identity_verify
#define ZZ_FORWARD_carrier_identity_verify
#endif
#ifndef ZZ_FORWARD_log_error
#define ZZ_FORWARD_log_error
#endif
#ifndef ZZ_FORWARD_protonerf_encode_varint
#define ZZ_FORWARD_protonerf_encode_varint
#endif
#ifndef ZZ_FORWARD_carrier_proto_PeerConnectResponse
#define ZZ_FORWARD_carrier_proto_PeerConnectResponse
#endif
#ifndef ZZ_FORWARD_protonerf_encode_bytes
#define ZZ_FORWARD_protonerf_encode_bytes
#endif
#ifndef ZZ_FORWARD_err_assert_safe
#define ZZ_FORWARD_err_assert_safe
#endif
#ifndef ZZ_FORWARD_carrier_responder_accept_insecure
#define ZZ_FORWARD_carrier_responder_accept_insecure
#endif
#ifndef ZZ_FORWARD_carrier_channel_from_transfer
#define ZZ_FORWARD_carrier_channel_from_transfer
#endif
#ifndef ZZ_FORWARD_hex_dump_slice
#define ZZ_FORWARD_hex_dump_slice
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_integrity
#define ZZ_FORWARD_hpack_decoder_integrity
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode
#define ZZ_FORWARD_hpack_decoder_decode
#endif
#ifndef ZZ_FORWARD_carrier_publish_stream_connect
#define ZZ_FORWARD_carrier_publish_stream_connect
#endif
#ifndef ZZ_FORWARD_net_address_none
#define ZZ_FORWARD_net_address_none
#endif
#ifndef ZZ_FORWARD_carrier_identity_signature_from_str
#define ZZ_FORWARD_carrier_identity_signature_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_netio_udp_recvfrom
#define ZZ_FORWARD_netio_udp_recvfrom
#endif
#ifndef ZZ_FORWARD_carrier_pq_send
#define ZZ_FORWARD_carrier_pq_send
#endif
#ifndef ZZ_FORWARD_netio_tcp_connect
#define ZZ_FORWARD_netio_tcp_connect
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_poll
#define ZZ_FORWARD_carrier_bootstrap_poll
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_connect
#define ZZ_FORWARD_carrier_vault_authorize_connect
#endif
#ifndef ZZ_FORWARD_net_address_from_str_ipv4
#define ZZ_FORWARD_net_address_from_str_ipv4
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_native
#define ZZ_FORWARD_carrier_endpoint_native
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate_insecure
#define ZZ_FORWARD_carrier_noise_initiate_insecure
#endif
#ifndef ZZ_FORWARD_carrier_proto_Alias
#define ZZ_FORWARD_carrier_proto_Alias
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_as_mut_slice
#define ZZ_FORWARD_buffer_as_mut_slice
#endif
#ifndef ZZ_FORWARD_hpack_decoder_next
#define ZZ_FORWARD_hpack_decoder_next
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_complete
#define ZZ_FORWARD_carrier_endpoint_do_complete
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_bytes
#define ZZ_FORWARD_slice_slice_eq_bytes
#endif
#ifndef ZZ_FORWARD_hpack_encoder_encode
#define ZZ_FORWARD_hpack_encoder_encode
#endif
#ifndef ZZ_FORWARD_carrier_publish_on_remote_open
#define ZZ_FORWARD_carrier_publish_on_remote_open
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Entry
#define ZZ_FORWARD_hpack_decoder_Entry
struct hpack_decoder_Entry_t;
typedef struct hpack_decoder_Entry_t hpack_decoder_Entry;
#endif
#ifndef ZZ_FORWARD_hpack_decoder_DYNSIZE
#define ZZ_FORWARD_hpack_decoder_DYNSIZE
#endif
#ifndef ZZ_FORWARD_hpack_decoder_Iterator
#define ZZ_FORWARD_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t;
typedef struct hpack_decoder_Iterator_t hpack_decoder_Iterator;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_close
#define ZZ_FORWARD_carrier_vault_toml_close
#endif
#ifndef ZZ_FORWARD_buffer_ends_with_cstr
#define ZZ_FORWARD_buffer_ends_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_router_push
#define ZZ_FORWARD_carrier_router_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
#define ZZ_FORWARD_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t;
typedef struct carrier_vault_CheckExistingAuthorizationState_t carrier_vault_CheckExistingAuthorizationState;
#endif
#ifndef ZZ_FORWARD_carrier_stream_open_fn
#define ZZ_FORWARD_carrier_stream_open_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_close_fn
#define ZZ_FORWARD_carrier_stream_close_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream_fn
#define ZZ_FORWARD_carrier_stream_stream_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_fragmented_fn
#define ZZ_FORWARD_carrier_stream_fragmented_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_poll_fn
#define ZZ_FORWARD_carrier_stream_poll_fn
#endif
#ifndef ZZ_FORWARD_carrier_stream_Config
#define ZZ_FORWARD_carrier_stream_Config
struct carrier_stream_Config_t;
typedef struct carrier_stream_Config_t carrier_stream_Config;
#endif
#ifndef ZZ_FORWARD_carrier_publish_PeerConnect
#define ZZ_FORWARD_carrier_publish_PeerConnect
#endif
#ifndef ZZ_FORWARD_carrier_publish_stream_to_publish
#define ZZ_FORWARD_carrier_publish_stream_to_publish
#endif
#ifndef ZZ_FORWARD_carrier_publish_close_publish
#define ZZ_FORWARD_carrier_publish_close_publish
#endif
#ifndef ZZ_FORWARD_carrier_publish_PublishStream
#define ZZ_FORWARD_carrier_publish_PublishStream
#endif
#ifndef ZZ_FORWARD_carrier_publish_publish
#define ZZ_FORWARD_carrier_publish_publish
#endif
#ifndef ZZ_FORWARD_err_elog
#define ZZ_FORWARD_err_elog
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Authorize
#define ZZ_FORWARD_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t;
typedef struct carrier_vault_toml_Authorize_t carrier_vault_toml_Authorize;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_Mem
#define ZZ_FORWARD_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t;
typedef struct carrier_vault_toml_Mem_t carrier_vault_toml_Mem;
#endif
#ifndef ZZ_FORWARD_carrier_router_close
#define ZZ_FORWARD_carrier_router_close
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_fragmented
#define ZZ_FORWARD_carrier_stream_incomming_fragmented
#endif
#ifndef ZZ_FORWARD_time_to_seconds
#define ZZ_FORWARD_time_to_seconds
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_cstr
#define ZZ_FORWARD_carrier_identity_identity_from_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_FORWARD_carrier_vault_toml_from_carriertoml_and_secret
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_carriertoml
#define ZZ_FORWARD_carrier_endpoint_from_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_set_network
#define ZZ_FORWARD_carrier_vault_toml_i_set_network
#endif
#ifndef ZZ_FORWARD_buffer_as_slice
#define ZZ_FORWARD_buffer_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_noise_initiate
#define ZZ_FORWARD_carrier_noise_initiate
#endif
#ifndef ZZ_FORWARD_io_close
#define ZZ_FORWARD_io_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_local
#define ZZ_FORWARD_carrier_vault_toml_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_i_from_carriertoml
#endif
#ifndef ZZ_FORWARD_buffer_make
#define ZZ_FORWARD_buffer_make
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_literal
#define ZZ_FORWARD_hpack_decoder_decode_literal
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt_ad
#define ZZ_FORWARD_carrier_cipher_encrypt_ad
#endif
#ifndef ZZ_FORWARD_netio_tcp_recv
#define ZZ_FORWARD_netio_tcp_recv
#endif
#ifndef ZZ_FORWARD_carrier_peering_from_proto
#define ZZ_FORWARD_carrier_peering_from_proto
#endif
#ifndef ZZ_FORWARD_protonerf_next
#define ZZ_FORWARD_protonerf_next
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_cluster_target
#define ZZ_FORWARD_carrier_endpoint_cluster_target
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_local_identity
#define ZZ_FORWARD_carrier_vault_get_local_identity
#endif
#ifndef ZZ_FORWARD_buffer_clear
#define ZZ_FORWARD_buffer_clear
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_decrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_io_read
#define ZZ_FORWARD_io_read
#endif
#ifndef ZZ_FORWARD_net_address_from_str
#define ZZ_FORWARD_net_address_from_str
#endif
#ifndef ZZ_FORWARD_carrier_identity_eq
#define ZZ_FORWARD_carrier_identity_eq
#endif
#ifndef ZZ_FORWARD_carrier_channel_open
#define ZZ_FORWARD_carrier_channel_open
#endif
#ifndef ZZ_FORWARD_time_more_than
#define ZZ_FORWARD_time_more_than
#endif
#ifndef ZZ_FORWARD_buffer_append_cstr
#define ZZ_FORWARD_buffer_append_cstr
#endif
#ifndef ZZ_FORWARD_netio_udp_close
#define ZZ_FORWARD_netio_udp_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#define ZZ_FORWARD_carrier_vault_toml_from_home_carriertoml
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network_secret
#define ZZ_FORWARD_carrier_vault_get_network_secret
#endif
#ifndef ZZ_FORWARD_protonerf_Decoder
#define ZZ_FORWARD_protonerf_Decoder
struct protonerf_Decoder_t;
typedef struct protonerf_Decoder_t protonerf_Decoder;
#endif
#ifndef ZZ_FORWARD_carrier_vault_list_authorizations
#define ZZ_FORWARD_carrier_vault_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_next_broker
#define ZZ_FORWARD_carrier_endpoint_next_broker
#endif
#ifndef ZZ_FORWARD_carrier_pq_wrapinc
#define ZZ_FORWARD_carrier_pq_wrapinc
#endif
#ifndef ZZ_FORWARD_err_make
#define ZZ_FORWARD_err_make
#endif
#ifndef ZZ_FORWARD_io_await
#define ZZ_FORWARD_io_await
#endif
#ifndef ZZ_FORWARD_io_read_slice
#define ZZ_FORWARD_io_read_slice
#endif
#ifndef ZZ_FORWARD_toml_push
#define ZZ_FORWARD_toml_push
#endif
#ifndef ZZ_FORWARD_netio_udp_bind
#define ZZ_FORWARD_netio_udp_bind
#endif
#ifndef ZZ_FORWARD_carrier_peering_received
#define ZZ_FORWARD_carrier_peering_received
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_cstr
#define ZZ_FORWARD_slice_mut_slice_append_cstr
#endif
#ifndef ZZ_FORWARD_toml_next
#define ZZ_FORWARD_toml_next
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push32
#define ZZ_FORWARD_slice_mut_slice_push32
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_push64
#define ZZ_FORWARD_slice_mut_slice_push64
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#define ZZ_FORWARD_carrier_vault_toml_i_get_network_secret
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#define ZZ_FORWARD_carrier_vault_ik_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_split
#define ZZ_FORWARD_carrier_symmetric_split
#endif
#ifndef ZZ_FORWARD_carrier_channel_send_close_frame
#define ZZ_FORWARD_carrier_channel_send_close_frame
#endif
#ifndef ZZ_FORWARD_toml_MAX_DEPTH
#define ZZ_FORWARD_toml_MAX_DEPTH
#endif
#ifndef ZZ_FORWARD_toml_Parser
#define ZZ_FORWARD_toml_Parser
struct toml_Parser_t;
typedef struct toml_Parser_t toml_Parser;
#endif
#ifndef ZZ_FORWARD_net_address_get_ip
#define ZZ_FORWARD_net_address_get_ip
#endif
#ifndef ZZ_FORWARD_carrier_noise_complete
#define ZZ_FORWARD_carrier_noise_complete
#endif
#ifndef ZZ_FORWARD_io_make_timeout_fn
#define ZZ_FORWARD_io_make_timeout_fn
#endif
#ifndef ZZ_FORWARD_io_make_channel_fn
#define ZZ_FORWARD_io_make_channel_fn
#endif
#ifndef ZZ_FORWARD_io_select_fn
#define ZZ_FORWARD_io_select_fn
#endif
#ifndef ZZ_FORWARD_io_wake_fn
#define ZZ_FORWARD_io_wake_fn
#endif
#ifndef ZZ_FORWARD_io_Async
#define ZZ_FORWARD_io_Async
struct io_Async_t;
typedef struct io_Async_t io_Async;
#endif
#ifndef ZZ_FORWARD_err_abort
#define ZZ_FORWARD_err_abort
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#define ZZ_FORWARD_carrier_vault_ik_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_pq_alloc
#define ZZ_FORWARD_carrier_pq_alloc
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_DnsPacket
#define ZZ_FORWARD_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t;
typedef struct carrier_bootstrap_DnsPacket_t carrier_bootstrap_DnsPacket;
#endif
#ifndef ZZ_FORWARD_carrier_stream_stream
#define ZZ_FORWARD_carrier_stream_stream
#endif
#ifndef ZZ_FORWARD_buffer_starts_with_cstr
#define ZZ_FORWARD_buffer_starts_with_cstr
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_FORWARD_carrier_vault_toml_load_from_toml_authorize_iter
#endif
#ifndef ZZ_FORWARD_pool_alloc
#define ZZ_FORWARD_pool_alloc
#endif
#ifndef ZZ_FORWARD_carrier_router_next_channel
#define ZZ_FORWARD_carrier_router_next_channel
#endif
#ifndef ZZ_FORWARD_buffer_format
#define ZZ_FORWARD_buffer_format
#endif
#ifndef ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_FORWARD___home_aep_proj_zz_modules_net_src_os_h_
#endif
#ifndef ZZ_FORWARD_pool_make
#define ZZ_FORWARD_pool_make
#endif
#ifndef ZZ_FORWARD_carrier_initiator_initiate
#define ZZ_FORWARD_carrier_initiator_initiate
#endif
#ifndef ZZ_FORWARD_carrier_vault_del_authorization
#define ZZ_FORWARD_carrier_vault_del_authorization
#endif
#ifndef ZZ_FORWARD_err_Err
#define ZZ_FORWARD_err_Err
struct err_Err_t;
typedef struct err_Err_t err_Err;
#endif
#ifndef ZZ_FORWARD_err_Err_200
#define ZZ_FORWARD_err_Err_200
struct err_Err_200_t;
typedef struct err_Err_200_t err_Err_200;
#endif
#ifndef ZZ_FORWARD_toml_close
#define ZZ_FORWARD_toml_close
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_network
#define ZZ_FORWARD_carrier_vault_get_network
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#define ZZ_FORWARD_carrier_vault_toml_i_advance_clock
#endif
#ifndef ZZ_FORWARD_carrier_publish_stream_to_publish
#define ZZ_FORWARD_carrier_publish_stream_to_publish
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#define ZZ_FORWARD_carrier_vault_ik_i_list_authorizations
#endif
#ifndef ZZ_FORWARD_carrier_vault_add_authorization
#define ZZ_FORWARD_carrier_vault_add_authorization
#endif
#ifndef ZZ_FORWARD_buffer_append_slice
#define ZZ_FORWARD_buffer_append_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_broker_count
#define ZZ_FORWARD_carrier_vault_broker_count
#endif
#ifndef ZZ_FORWARD_protonerf_read_varint
#define ZZ_FORWARD_protonerf_read_varint
#endif
#ifndef ZZ_FORWARD_buffer_split
#define ZZ_FORWARD_buffer_split
#endif
#ifndef ZZ_FORWARD_buffer_slen
#define ZZ_FORWARD_buffer_slen
#endif
#ifndef ZZ_FORWARD_io_write_bytes
#define ZZ_FORWARD_io_write_bytes
#endif
#ifndef ZZ_FORWARD_buffer_copy_slice
#define ZZ_FORWARD_buffer_copy_slice
#endif
#ifndef ZZ_FORWARD_carrier_sha256_Sha256
#define ZZ_FORWARD_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t;
typedef struct carrier_sha256_Sha256_t carrier_sha256_Sha256;
#endif
#ifndef ZZ_FORWARD_netio_udp_sendto
#define ZZ_FORWARD_netio_udp_sendto
#endif
#ifndef ZZ_FORWARD_carrier_channel_ack
#define ZZ_FORWARD_carrier_channel_ack
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_poll
#define ZZ_FORWARD_carrier_endpoint_poll
#endif
#ifndef ZZ_FORWARD_carrier_identity_secretkit_from_str
#define ZZ_FORWARD_carrier_identity_secretkit_from_str
#endif
#ifndef ZZ_FORWARD_io_channel
#define ZZ_FORWARD_io_channel
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive_insecure
#define ZZ_FORWARD_carrier_noise_receive_insecure
#endif
#ifndef ZZ_FORWARD_carrier_cipher_encrypt
#define ZZ_FORWARD_carrier_cipher_encrypt
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_from_ik
#define ZZ_FORWARD_carrier_vault_ik_from_ik
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#define ZZ_FORWARD_carrier_vault_ik_i_get_local_identity
#endif
#ifndef ZZ_FORWARD_carrier_channel_stream_exists
#define ZZ_FORWARD_carrier_channel_stream_exists
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_mix_key
#define ZZ_FORWARD_carrier_symmetric_mix_key
#endif
#ifndef ZZ_FORWARD_pool_free_bytes
#define ZZ_FORWARD_pool_free_bytes
#endif
#ifndef ZZ_FORWARD_netio_tcp_close
#define ZZ_FORWARD_netio_tcp_close
#endif
#ifndef ZZ_FORWARD_buffer_push
#define ZZ_FORWARD_buffer_push
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#define ZZ_FORWARD_carrier_vault_toml_i_sign_principal
#endif
#ifndef ZZ_FORWARD_buffer_pop
#define ZZ_FORWARD_buffer_pop
#endif
#ifndef ZZ_FORWARD_carrier_noise_receive
#define ZZ_FORWARD_carrier_noise_receive
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream
#define ZZ_FORWARD_carrier_vault_authorize_open_stream
#endif
#ifndef ZZ_FORWARD_carrier_pq_clear
#define ZZ_FORWARD_carrier_pq_clear
#endif
#ifndef ZZ_FORWARD_carrier_identity_secret_from_str
#define ZZ_FORWARD_carrier_identity_secret_from_str
#endif
#ifndef ZZ_FORWARD_net_address_from_cstr
#define ZZ_FORWARD_net_address_from_cstr
#endif
#ifndef ZZ_FORWARD_net_address_to_buffer
#define ZZ_FORWARD_net_address_to_buffer
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_do_not_move
#define ZZ_FORWARD_carrier_endpoint_do_not_move
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_slice
#define ZZ_FORWARD_slice_mut_slice_append_slice
#endif
#ifndef ZZ_FORWARD_buffer_substr
#define ZZ_FORWARD_buffer_substr
#endif
#ifndef ZZ_FORWARD_io_valid
#define ZZ_FORWARD_io_valid
#endif
#ifndef ZZ_FORWARD_carrier_channel_shutdown
#define ZZ_FORWARD_carrier_channel_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_publish_close_publish
#define ZZ_FORWARD_carrier_publish_close_publish
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_save_to_toml
#define ZZ_FORWARD_carrier_vault_toml_save_to_toml
#endif
#ifndef ZZ_FORWARD_buffer_available
#define ZZ_FORWARD_buffer_available
#endif
#ifndef ZZ_FORWARD__stdarg_h_
#define ZZ_FORWARD__stdarg_h_
#endif
#ifndef ZZ_FORWARD_buffer_vformat
#define ZZ_FORWARD_buffer_vformat
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_init
#define ZZ_FORWARD_carrier_symmetric_init
#endif
#ifndef ZZ_FORWARD_carrier_channel_push
#define ZZ_FORWARD_carrier_channel_push
#endif
#ifndef ZZ_FORWARD_carrier_identity_Alias
#define ZZ_FORWARD_carrier_identity_Alias
struct carrier_identity_Alias_t;
typedef struct carrier_identity_Alias_t carrier_identity_Alias;
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_net_address_OsAddress
#define ZZ_FORWARD_net_address_OsAddress
union net_address_OsAddress_t;
typedef union net_address_OsAddress_t net_address_OsAddress;
#endif
#ifndef ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
#define ZZ_FORWARD_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t;
typedef struct carrier_vault_authorize_open_stream_cb_s_t carrier_vault_authorize_open_stream_cb_s;
#endif
#ifndef ZZ_FORWARD_buffer_fgets
#define ZZ_FORWARD_buffer_fgets
#endif
#ifndef ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_FORWARD_carrier_symmetric_encrypt_and_mix_hash
#endif
#ifndef ZZ_FORWARD_carrier_initiator_complete
#define ZZ_FORWARD_carrier_initiator_complete
#endif
#ifndef ZZ_FORWARD_net_address_valid
#define ZZ_FORWARD_net_address_valid
#endif
#ifndef ZZ_FORWARD_err_ignore
#define ZZ_FORWARD_err_ignore
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#define ZZ_FORWARD_carrier_vault_toml_i_get_principal_identity
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_append_bytes
#define ZZ_FORWARD_slice_mut_slice_append_bytes
#endif
#ifndef ZZ_FORWARD_carrier_router_poll
#define ZZ_FORWARD_carrier_router_poll
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_from_vault
#define ZZ_FORWARD_carrier_endpoint_from_vault
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_register_stream
#define ZZ_FORWARD_carrier_endpoint_register_stream
#endif
#ifndef ZZ_FORWARD_err_to_str
#define ZZ_FORWARD_err_to_str
#endif
#ifndef ZZ_FORWARD_carrier_noise_accept
#define ZZ_FORWARD_carrier_noise_accept
#endif
#ifndef ZZ_FORWARD_net_address_eq
#define ZZ_FORWARD_net_address_eq
#endif
#ifndef ZZ_FORWARD_carrier_channel_alloc_stream
#define ZZ_FORWARD_carrier_channel_alloc_stream
#endif
#ifndef ZZ_FORWARD_net_address_ip_to_buffer
#define ZZ_FORWARD_net_address_ip_to_buffer
#endif
#ifndef ZZ_FORWARD_net_address_set_port
#define ZZ_FORWARD_net_address_set_port
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_local
#define ZZ_FORWARD_carrier_vault_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_sign_local
#define ZZ_FORWARD_carrier_vault_ik_i_sign_local
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_close
#define ZZ_FORWARD_carrier_stream_incomming_close
#endif
#ifndef ZZ_FORWARD_carrier_router_shutdown
#define ZZ_FORWARD_carrier_router_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_start
#define ZZ_FORWARD_carrier_endpoint_start
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_shutdown
#define ZZ_FORWARD_carrier_endpoint_shutdown
#endif
#ifndef ZZ_FORWARD_carrier_channel_clean_closed
#define ZZ_FORWARD_carrier_channel_clean_closed
#endif
#ifndef ZZ_FORWARD_pool_malloc
#define ZZ_FORWARD_pool_malloc
#endif
#ifndef ZZ_FORWARD_err_fail_with_win32
#define ZZ_FORWARD_err_fail_with_win32
#endif
#ifndef ZZ_FORWARD_io_write_cstr
#define ZZ_FORWARD_io_write_cstr
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_as_slice
#define ZZ_FORWARD_slice_mut_slice_as_slice
#endif
#ifndef ZZ_FORWARD_carrier_vault_get_principal_identity
#define ZZ_FORWARD_carrier_vault_get_principal_identity
#endif
#ifndef ZZ_FORWARD_slice_slice_eq
#define ZZ_FORWARD_slice_slice_eq
#endif
#ifndef ZZ_FORWARD_carrier_stream_incomming_stream
#define ZZ_FORWARD_carrier_stream_incomming_stream
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_Bootstrap
#define ZZ_FORWARD_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t;
typedef struct carrier_bootstrap_Bootstrap_t carrier_bootstrap_Bootstrap;
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_add_authorization
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_close
#define ZZ_FORWARD_carrier_endpoint_close
#endif
#ifndef ZZ_FORWARD_err_fail_with_errno
#define ZZ_FORWARD_err_fail_with_errno
#endif
#ifndef ZZ_FORWARD_slice_mut_slice_make
#define ZZ_FORWARD_slice_mut_slice_make
#endif
#ifndef ZZ_FORWARD_carrier_sha256_finish
#define ZZ_FORWARD_carrier_sha256_finish
#endif
#ifndef ZZ_FORWARD_carrier_channel_disco
#define ZZ_FORWARD_carrier_channel_disco
#endif
#ifndef ZZ_FORWARD_carrier_pq_cancel
#define ZZ_FORWARD_carrier_pq_cancel
#endif
#ifndef ZZ_FORWARD_carrier_vault_close
#define ZZ_FORWARD_carrier_vault_close
#endif
#ifndef ZZ_FORWARD_io_wake
#define ZZ_FORWARD_io_wake
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_broker
#define ZZ_FORWARD_carrier_endpoint_broker
#endif
#ifndef ZZ_FORWARD_carrier_vault_vector_time
#define ZZ_FORWARD_carrier_vault_vector_time
#endif
#ifndef ZZ_FORWARD_carrier_sha256_init
#define ZZ_FORWARD_carrier_sha256_init
#endif
#ifndef ZZ_FORWARD_carrier_identity_address_from_str
#define ZZ_FORWARD_carrier_identity_address_from_str
#endif
#ifndef ZZ_FORWARD_io_wait
#define ZZ_FORWARD_io_wait
#endif
#ifndef ZZ_FORWARD_carrier_sha256_update
#define ZZ_FORWARD_carrier_sha256_update
#endif
#ifndef ZZ_FORWARD_carrier_stream_close
#define ZZ_FORWARD_carrier_stream_close
#endif
#ifndef ZZ_FORWARD_io_readline
#define ZZ_FORWARD_io_readline
#endif
#ifndef ZZ_FORWARD_slice_slice_eq_cstr
#define ZZ_FORWARD_slice_slice_eq_cstr
#endif
#ifndef ZZ_FORWARD_carrier_endpoint_none
#define ZZ_FORWARD_carrier_endpoint_none
#endif
#ifndef ZZ_FORWARD_toml_parser
#define ZZ_FORWARD_toml_parser
#endif
#ifndef ZZ_FORWARD_carrier_bootstrap_bootstrap
#define ZZ_FORWARD_carrier_bootstrap_bootstrap
#endif
#ifndef ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#define ZZ_FORWARD_carrier_vault_toml_i_del_authorization
#endif
#ifndef ZZ_FORWARD_carrier_identity_identity_from_str
#define ZZ_FORWARD_carrier_identity_identity_from_str
#endif
#ifndef ZZ_FORWARD_carrier_vault_sign_principal
#define ZZ_FORWARD_carrier_vault_sign_principal
#endif
#ifndef ZZ_FORWARD_carrier_stream_Stream
#define ZZ_FORWARD_carrier_stream_Stream
struct carrier_stream_Stream_t;
typedef struct carrier_stream_Stream_t carrier_stream_Stream;
#endif
#ifndef ZZ_FORWARD_carrier_vault_ik_i_close
#define ZZ_FORWARD_carrier_vault_ik_i_close
#endif
#ifndef ZZ_FORWARD_pool_iterator
#define ZZ_FORWARD_pool_iterator
#endif
#ifndef ZZ_FORWARD_pool_each
#define ZZ_FORWARD_pool_each
#endif
#ifndef ZZ_FORWARD_carrier_cipher_decrypt_ad
#define ZZ_FORWARD_carrier_cipher_decrypt_ad
#endif
#ifndef ZZ_FORWARD_hpack_decoder_decode_integer
#define ZZ_FORWARD_hpack_decoder_decode_integer
#endif
#ifndef ZZ_EXPORT_err_checked
#define ZZ_EXPORT_err_checked

#endif
#ifndef ZZ_EXPORT_buffer_integrity
#define ZZ_EXPORT_buffer_integrity

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_string
#define ZZ_EXPORT_carrier_identity_identity_to_string
void carrier_identity_identity_to_string (carrier_identity_Identity const *  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_slice_integrity
#define ZZ_EXPORT_slice_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_slice_make
#define ZZ_EXPORT_slice_slice_make
void slice_slice_make (slice_slice_Slice*  const  self, uint8_t const *  const  mem, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network
#define ZZ_EXPORT_carrier_vault_set_network
void carrier_vault_set_network (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  network);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_integrity
#define ZZ_EXPORT_slice_mut_slice_integrity

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push
#define ZZ_EXPORT_slice_mut_slice_push
bool slice_mut_slice_push (slice_mut_slice_MutSlice*  const  self, uint8_t const  b);

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_
#include <stddef.h>

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_cb
#define ZZ_EXPORT_carrier_vault_list_authorizations_cb
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb 1
typedef struct {
    void *ctx;
    void (*fn) (void*  const  user, carrier_identity_Identity const *  const  id, char const *  const  resource, void * _ctx);
} carrier_vault_list_authorizations_cb;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_cb)

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_toml_i_list_authorizations
static void carrier_vault_toml_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_err_backtrace
#define ZZ_EXPORT_err_backtrace
void err_backtrace (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_close
#define ZZ_EXPORT_carrier_bootstrap_close
void carrier_bootstrap_close (carrier_bootstrap_Bootstrap*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push16
#define ZZ_EXPORT_slice_mut_slice_push16
bool slice_mut_slice_push16 (slice_mut_slice_MutSlice*  const  self, uint16_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_HASHLEN
#define ZZ_EXPORT_carrier_sha256_HASHLEN
#define carrier_sha256_HASHLEN ((uintptr_t )    32)

#endif
#ifndef ZZ_EXPORT_carrier_cipher_CipherState
#define ZZ_EXPORT_carrier_cipher_CipherState
struct carrier_cipher_CipherState_t {
   uint8_t key[    32] ;
   bool has_key ;
}
;
size_t sizeof_carrier_cipher_CipherState();

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_SymmetricState
#define ZZ_EXPORT_carrier_symmetric_SymmetricState
struct carrier_symmetric_SymmetricState_t {
   uint8_t ck[    carrier_sha256_HASHLEN] ;
   uint8_t h[    carrier_sha256_HASHLEN] ;
   carrier_cipher_CipherState cipher ;
}
;
size_t sizeof_carrier_symmetric_SymmetricState();

#endif
#ifndef ZZ_EXPORT_carrier_vault_close_fn
#define ZZ_EXPORT_carrier_vault_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, void * _ctx);
} carrier_vault_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_fn
#define ZZ_EXPORT_carrier_vault_sign_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len, void * _ctx);
} carrier_vault_sign_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_sign_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_identity_fn
#define ZZ_EXPORT_carrier_vault_get_identity_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id, void * _ctx);
} carrier_vault_get_identity_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_identity_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_fn
#define ZZ_EXPORT_carrier_vault_get_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  address, void * _ctx);
} carrier_vault_get_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_advance_clock_fn
#define ZZ_EXPORT_carrier_vault_advance_clock_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn 1
typedef struct {
    void *ctx;
    uint64_t (*fn) (carrier_vault_Vault const *  const  self, void * _ctx);
} carrier_vault_advance_clock_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_advance_clock_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_set_network_fn
#define ZZ_EXPORT_carrier_vault_set_network_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret, void * _ctx);
} carrier_vault_set_network_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_set_network_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret_fn
#define ZZ_EXPORT_carrier_vault_get_network_secret_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  address, void * _ctx);
} carrier_vault_get_network_secret_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_get_network_secret_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations_fn
#define ZZ_EXPORT_carrier_vault_list_authorizations_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user, void * _ctx);
} carrier_vault_list_authorizations_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_list_authorizations_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization_fn
#define ZZ_EXPORT_carrier_vault_del_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource, void * _ctx);
} carrier_vault_del_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_del_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization_fn
#define ZZ_EXPORT_carrier_vault_add_authorization_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource, void * _ctx);
} carrier_vault_add_authorization_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_vault_add_authorization_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_Secret
#define ZZ_EXPORT_carrier_identity_Secret
struct carrier_identity_Secret_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Secret();

#endif
#ifndef ZZ_EXPORT_carrier_identity_SecretKit
#define ZZ_EXPORT_carrier_identity_SecretKit
struct carrier_identity_SecretKit_t {
   carrier_identity_Secret identity ;
   carrier_identity_Secret network ;
}
;
size_t sizeof_carrier_identity_SecretKit();

#endif
#ifndef ZZ_EXPORT_carrier_vault_Broker
#define ZZ_EXPORT_carrier_vault_Broker
struct carrier_vault_Broker_t {
   uint8_t protocol ;
   uint8_t reserved[    3] ;
   uint8_t xaddr[    32] ;
   uint8_t ip4addr[    4] ;
   uint8_t ip6addr[    16] ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_vault_Broker();

#endif
#ifndef ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define ZZ_EXPORT_carrier_vault_MAX_BROKERS
#define carrier_vault_MAX_BROKERS ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_carrier_vault_Vault
#define ZZ_EXPORT_carrier_vault_Vault
struct carrier_vault_Vault_t {
   carrier_vault_close_fn i_close ;
   carrier_vault_sign_fn i_sign_local ;
   carrier_vault_sign_fn i_sign_principal ;
   carrier_vault_get_identity_fn i_get_local_identity ;
   carrier_vault_get_identity_fn i_get_principal_identity ;
   carrier_vault_get_network_fn i_get_network ;
   carrier_vault_advance_clock_fn i_advance_clock ;
   carrier_vault_set_network_fn i_set_network ;
   carrier_vault_get_network_secret_fn i_get_network_secret ;
   carrier_vault_list_authorizations_fn i_list_authorizations ;
   carrier_vault_del_authorization_fn i_del_authorization ;
   carrier_vault_add_authorization_fn i_add_authorization ;
   void*  user ;
   carrier_identity_SecretKit ik ;
   carrier_vault_Broker broker[    carrier_vault_MAX_BROKERS] ;
}
;
size_t sizeof_carrier_vault_Vault();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Move
#define ZZ_EXPORT_carrier_initiator_Move
typedef enum {
    carrier_initiator_Move_Self = 0,
    carrier_initiator_Move_Never = 1,
    carrier_initiator_Move_Target = 2,

} carrier_initiator_Move;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Identity
#define ZZ_EXPORT_carrier_identity_Identity
struct carrier_identity_Identity_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Identity();

#endif
#ifndef ZZ_EXPORT_io_Context
#define ZZ_EXPORT_io_Context
struct io_Context_t {
   bool isvalid ;
   io_Async*  async ;
   uint64_t time ;
   int fd ;
   void*  handle ;
}
;
size_t sizeof_io_Context();

#endif
#ifndef ZZ_EXPORT_netio_udp_Socket
#define ZZ_EXPORT_netio_udp_Socket
struct netio_udp_Socket_t {
   io_Context ctx ;
   unsigned int sockaddrsize ;
}
;
size_t sizeof_netio_udp_Socket();

#endif
#ifndef ZZ_EXPORT_net_address_Type
#define ZZ_EXPORT_net_address_Type
typedef enum {
    net_address_Type_Invalid = 0,
    net_address_Type_Ipv4 = 1,
    net_address_Type_Ipv6 = 2,

} net_address_Type;

#endif
#ifndef ZZ_EXPORT_net_address_Address
#define ZZ_EXPORT_net_address_Address
struct net_address_Address_t {
   net_address_Type typ ;
   uint8_t os[    32] ;
}
;
size_t sizeof_net_address_Address();

#endif
#ifndef ZZ_EXPORT_netio_tcp_Socket
#define ZZ_EXPORT_netio_tcp_Socket
struct netio_tcp_Socket_t {
   io_Context ctx ;
   net_address_Address remote_addr ;
}
;
size_t sizeof_netio_tcp_Socket();

#endif
#ifndef ZZ_EXPORT_io_Result
#define ZZ_EXPORT_io_Result
typedef enum {
    io_Result_Ready = 0,
    io_Result_Later = 1,
    io_Result_Error = 2,
    io_Result_Eof = 3,

} io_Result;

#endif
#ifndef ZZ_EXPORT_io_read_fn
#define ZZ_EXPORT_io_read_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_read_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  to, uintptr_t*  const  len, void * _ctx);
} io_read_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_read_fn)

#endif
#ifndef ZZ_EXPORT_io_write_fn
#define ZZ_EXPORT_io_write_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_write_fn 1
typedef struct {
    void *ctx;
    io_Result (*fn) (io_Context*  const  ctx, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  to, uintptr_t*  const  len, void * _ctx);
} io_write_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_write_fn)

#endif
#ifndef ZZ_EXPORT_io_close_fn
#define ZZ_EXPORT_io_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Context*  const  ctx, void * _ctx);
} io_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_close_fn)

#endif
#ifndef ZZ_EXPORT_io_Io
#define ZZ_EXPORT_io_Io
struct io_Io_t {
   io_Context ctx ;
   io_read_fn read_impl ;
   io_write_fn write_impl ;
   io_close_fn close_impl ;
}
;
size_t sizeof_io_Io();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_State
#define ZZ_EXPORT_carrier_endpoint_State
typedef enum {
    carrier_endpoint_State_Invalid = 0,
    carrier_endpoint_State_Connecting = 1,
    carrier_endpoint_State_Connected = 2,
    carrier_endpoint_State_Closed = 3,

} carrier_endpoint_State;

#endif
#ifndef ZZ_EXPORT_carrier_identity_Address
#define ZZ_EXPORT_carrier_identity_Address
struct carrier_identity_Address_t {
   uint8_t k[    32] ;
}
;
size_t sizeof_carrier_identity_Address();

#endif
#ifndef ZZ_EXPORT_carrier_noise_Initiator
#define ZZ_EXPORT_carrier_noise_Initiator
struct carrier_noise_Initiator_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Address remote_static ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Initiator();

#endif
#ifndef ZZ_EXPORT_carrier_initiator_Initiator
#define ZZ_EXPORT_carrier_initiator_Initiator
struct carrier_initiator_Initiator_t {
   carrier_noise_Initiator noise ;
   uint64_t tick_time_start ;
   bool secure ;
}
;
size_t sizeof_carrier_initiator_Initiator();

#endif
#ifndef ZZ_EXPORT__stddef_h_
#define ZZ_EXPORT__stddef_h_

#endif
#ifndef ZZ_EXPORT_buffer_Buffer
#define ZZ_EXPORT_buffer_Buffer
struct buffer_Buffer_t {
   uintptr_t at ;
   char mem[] ;
}
;
size_t sizeof_buffer_Buffer(size_t tail);
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1500_1500
#define ZZ_EXPORT_buffer_Buffer_1500_1500
struct buffer_Buffer_1500_t {
   uintptr_t at ;
   char mem[1500] ;
}
;
size_t sizeof_buffer_Buffer_1500();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_2000_2000
#define ZZ_EXPORT_buffer_Buffer_2000_2000
struct buffer_Buffer_2000_t {
   uintptr_t at ;
   char mem[2000] ;
}
;
size_t sizeof_buffer_Buffer_2000();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_20_20
#define ZZ_EXPORT_buffer_Buffer_20_20
struct buffer_Buffer_20_t {
   uintptr_t at ;
   char mem[20] ;
}
;
size_t sizeof_buffer_Buffer_20();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_300_300
#define ZZ_EXPORT_buffer_Buffer_300_300
struct buffer_Buffer_300_t {
   uintptr_t at ;
   char mem[300] ;
}
;
size_t sizeof_buffer_Buffer_300();
#endif
#ifndef ZZ_EXPORT_buffer_Buffer_1024_1024
#define ZZ_EXPORT_buffer_Buffer_1024_1024
struct buffer_Buffer_1024_t {
   uintptr_t at ;
   char mem[1024] ;
}
;
size_t sizeof_buffer_Buffer_1024();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_ConnectingState
#define ZZ_EXPORT_carrier_endpoint_ConnectingState
struct carrier_endpoint_ConnectingState_t {
   carrier_vault_Broker current_broker ;
   carrier_initiator_Initiator initiator ;
   buffer_Buffer_1024 pkt_in ;
   buffer_Buffer_1024 pkt_out ;
   uintptr_t trying_broker_index ;
   uintptr_t retry_sending ;
}
;
size_t sizeof_carrier_endpoint_ConnectingState();

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_MutSlice
#define ZZ_EXPORT_slice_mut_slice_MutSlice
struct slice_mut_slice_MutSlice_t {
   uint8_t*  mem ;
   uintptr_t size ;
   uintptr_t*  at ;
}
;
size_t sizeof_slice_mut_slice_MutSlice();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Frame
#define ZZ_EXPORT_carrier_pq_Frame
struct carrier_pq_Frame_t {
   uint64_t acked_at ;
   uint64_t sent_at ;
   uint64_t packet ;
   uint8_t typ ;
   uintptr_t bufat ;
   slice_mut_slice_MutSlice buf ;
}
;
size_t sizeof_carrier_pq_Frame();

#endif
#ifndef ZZ_EXPORT_carrier_pq_Q
#define ZZ_EXPORT_carrier_pq_Q
struct carrier_pq_Q_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[] ;
}
;
size_t sizeof_carrier_pq_Q(size_t tail);
#endif
#ifndef ZZ_EXPORT_carrier_pq_Q_64_64
#define ZZ_EXPORT_carrier_pq_Q_64_64
struct carrier_pq_Q_64_t {
   uintptr_t count ;
   uintptr_t back ;
   uintptr_t front ;
   uintptr_t sent ;
   uint64_t rtt ;
   uint64_t tlp_counter ;
   uint64_t time_last_ack_received ;
   uint64_t time_last_ping_sent ;
   pool_Pool*  allocator ;
   carrier_pq_Frame q[64] ;
}
;
size_t sizeof_carrier_pq_Q_64();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Transport
#define ZZ_EXPORT_carrier_peering_Transport
typedef enum {
    carrier_peering_Transport_Tcp = 0,
    carrier_peering_Transport_Udp = 1,

} carrier_peering_Transport;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Class
#define ZZ_EXPORT_carrier_peering_Class
typedef enum {
    carrier_peering_Class_Invalid = 0,
    carrier_peering_Class_Local = 1,
    carrier_peering_Class_Internet = 2,
    carrier_peering_Class_BrokerOrigin = 3,

} carrier_peering_Class;

#endif
#ifndef ZZ_EXPORT_carrier_peering_Path
#define ZZ_EXPORT_carrier_peering_Path
struct carrier_peering_Path_t {
   carrier_peering_Transport transport ;
   net_address_Address addr ;
   carrier_peering_Class klass ;
   bool active ;
   bool used ;
}
;
size_t sizeof_carrier_peering_Path();

#endif
#ifndef ZZ_EXPORT_carrier_peering_Peering
#define ZZ_EXPORT_carrier_peering_Peering
struct carrier_peering_Peering_t {
   carrier_peering_Path paths[    16] ;
}
;
size_t sizeof_carrier_peering_Peering();

#endif
#ifndef ZZ_EXPORT_carrier_channel_Channel
#define ZZ_EXPORT_carrier_channel_Channel
struct carrier_channel_Channel_t {
   carrier_identity_Identity peer ;
   carrier_vault_Vault*  store ;
   carrier_endpoint_Endpoint*  endpoint ;
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   uint64_t counter_out ;
   bool this_is_the_broker_channel ;
   bool errors_are_fatal ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   carrier_pq_Q_64 q ;
   io_Io timer ;
   uint32_t streamidcounter ;
   carrier_stream_Stream*  streams[    16] ;
   carrier_peering_Peering peering ;
   uint64_t outgoing_acks[    32] ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Channel();

#endif
#ifndef ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define ZZ_EXPORT_carrier_router_MAX_CHANNELS
#define carrier_router_MAX_CHANNELS ((uintptr_t )    6)

#endif
#ifndef ZZ_EXPORT_carrier_router_Router
#define ZZ_EXPORT_carrier_router_Router
struct carrier_router_Router_t {
   uintptr_t tcp_expected ;
   buffer_Buffer_1500 tcp_buf ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   bool inshutdown ;
   bool ded ;
   io_Io shutdown_timeout ;
   carrier_channel_Channel channels[    carrier_router_MAX_CHANNELS] ;
}
;
size_t sizeof_carrier_router_Router();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_StateM
#define ZZ_EXPORT_carrier_endpoint_StateM
union carrier_endpoint_StateM_t {
   carrier_endpoint_ConnectingState connecting ;
   carrier_router_Router connected ;
}
;
size_t sizeof_carrier_endpoint_StateM();

#endif
#ifndef ZZ_EXPORT_pool_Pool
#define ZZ_EXPORT_pool_Pool
struct pool_Pool_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[] ;
}
;
size_t sizeof_pool_Pool(size_t tail);
#endif
#ifndef ZZ_EXPORT_pool_Pool_1024_1024
#define ZZ_EXPORT_pool_Pool_1024_1024
struct pool_Pool_1024_t {
   uintptr_t blocksize ;
   uintptr_t poolsize ;
   uint8_t*  used ;
   uint8_t*  pool ;
   uint8_t mem[1024] ;
}
;
size_t sizeof_pool_Pool_1024();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_Endpoint
#define ZZ_EXPORT_carrier_endpoint_Endpoint
struct carrier_endpoint_Endpoint_t {
   carrier_vault_Vault vault ;
   carrier_initiator_Move cluster_move ;
   carrier_identity_Identity cluster_target ;
   carrier_stream_Config const *  broker_stream_registry[    2] ;
   carrier_stream_Config const *  p2p_stream_registry[    32] ;
   netio_udp_Socket udp4 ;
   netio_udp_Socket udp6 ;
   netio_tcp_Socket tcp4 ;
   io_Io timeout ;
   carrier_endpoint_State state ;
   carrier_endpoint_StateM statem ;
   pool_Pool_1024 streampool ;
   pool_Pool framebuffer ;
}
;
size_t sizeof_carrier_endpoint_Endpoint(size_t tail);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_secretkit
#define ZZ_EXPORT_carrier_endpoint_from_secretkit
void carrier_endpoint_from_secretkit (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_toml_ParserState
#define ZZ_EXPORT_toml_ParserState
typedef enum {
    toml_ParserState_Document = 0,
    toml_ParserState_SectionKey = 1,
    toml_ParserState_Object = 2,
    toml_ParserState_Key = 3,
    toml_ParserState_PostKey = 4,
    toml_ParserState_PreVal = 5,
    toml_ParserState_StringVal = 6,
    toml_ParserState_IntVal = 7,
    toml_ParserState_PostVal = 8,

} toml_ParserState;

#endif
#ifndef ZZ_EXPORT_toml_ValueType
#define ZZ_EXPORT_toml_ValueType
typedef enum {
    toml_ValueType_String = 0,
    toml_ValueType_Object = 1,
    toml_ValueType_Integer = 2,
    toml_ValueType_Array = 3,

} toml_ValueType;

#endif
#ifndef ZZ_EXPORT_toml_Value
#define ZZ_EXPORT_toml_Value
struct toml_Value_t {
   toml_ValueType t ;
   char const *  string ;
   int integer ;
   uintptr_t index ;
}
;
size_t sizeof_toml_Value();

#endif
#ifndef ZZ_EXPORT_toml_Iter
#define ZZ_EXPORT_toml_Iter
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Iter 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v, void * _ctx);
} toml_Iter;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Iter)

#endif
#ifndef ZZ_EXPORT_toml_Pop
#define ZZ_EXPORT_toml_Pop
#if !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)
#define ZZ_HAS_DEFINED_CLOSURE_toml_Pop 1
typedef struct {
    void *ctx;
    void (*fn) (toml_U const *  const  u, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, void * _ctx);
} toml_Pop;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_toml_Pop)

#endif
#ifndef ZZ_EXPORT_toml_U
#define ZZ_EXPORT_toml_U
struct toml_U_t {
   toml_Iter it ;
   toml_Pop pop ;
   void*  user1 ;
   uintptr_t user2 ;
}
;
size_t sizeof_toml_U();

#endif
#ifndef ZZ_EXPORT_toml_ParserStack
#define ZZ_EXPORT_toml_ParserStack
struct toml_ParserStack_t {
   toml_ParserState state ;
   toml_U user ;
   bool in_array ;
   uintptr_t index ;
}
;
size_t sizeof_toml_ParserStack();

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishChange
#define ZZ_EXPORT_carrier_proto_PublishChange
typedef enum {
    carrier_proto_PublishChange_Supersede = 1,
    carrier_proto_PublishChange_Alias = 2,

} carrier_proto_PublishChange;

#endif
#ifndef ZZ_EXPORT_time_Time
#define ZZ_EXPORT_time_Time
struct time_Time_t {
   uint64_t secs ;
   uint64_t nano ;
   bool finite ;
}
;
size_t sizeof_time_Time();

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_cstr
#define ZZ_EXPORT_carrier_identity_address_from_cstr
void carrier_identity_address_from_cstr (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes_start
#define ZZ_EXPORT_protonerf_encode_bytes_start
void protonerf_encode_bytes_start (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT__stdio_h_
#define ZZ_EXPORT__stdio_h_
#include <stdio.h>

#endif
#ifndef ZZ_EXPORT_io_Ready
#define ZZ_EXPORT_io_Ready
typedef enum {
    io_Ready_Read = 0,
    io_Ready_Write = 1,

} io_Ready;

#endif
#ifndef ZZ_EXPORT_io_select
#define ZZ_EXPORT_io_select
void io_select (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w);

#endif
#ifndef ZZ_EXPORT_err_eprintf
#define ZZ_EXPORT_err_eprintf
void err_eprintf (err_Err const *  const  self, uintptr_t const  tail, FILE*  const  out);

#endif
#ifndef ZZ_EXPORT_buffer_copy_bytes
#define ZZ_EXPORT_buffer_copy_bytes
void buffer_copy_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_read_bytes
#define ZZ_EXPORT_io_read_bytes
io_Result io_read_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  const  mem, uintptr_t*  const  memlen);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_byteorder_src_lib_h_

#line 1 "/home/aep/proj/zz/modules/byteorder/src/lib.h"
#if !defined(BYTE_ORDER)
    #if defined(__BYTE_ORDER__)
        #define BYTE_ORDER __BYTE_ORDER__
    #elif defined(__BYTE_ORDER)
        #define BYTE_ORDER __BYTE_ORDER
    #else
        #error cannot find a definition of BYTE_ORDER
    #endif
#endif

#if !defined(LITTLE_ENDIAN)
    #if defined(__LITTLE_ENDIAN)
        #define LITTLE_ENDIAN __LITTLE_ENDIAN
    #elif defined(__ORDER_LITTLE_ENDIAN__)
        #define LITTLE_ENDIAN __ORDER_LITTLE_ENDIAN__
    #else
        #error cannot find a definition of LITTLE_ENDIAN
    #endif
#endif

#if !defined(BIG_ENDIAN)
    #if defined(__BIG_ENDIAN)
        #define BIG_ENDIAN __BIG_ENDIAN
    #elif defined(__ORDER_BIG_ENDIAN__)
        #define BIG_ENDIAN __ORDER_BIG_ENDIAN__
    #else
        #error cannot find a definition of BIG_ENDIAN
    #endif
#endif

#if BYTE_ORDER == LITTLE_ENDIAN
    #if BYTE_ORDER == BIG_ENDIAN
        #error "compiler claims byte order is both little and big endian"
    #endif
#else
    #if BYTE_ORDER == BIG_ENDIAN

    #else
        #error "compiler claims byte order is neither little nor big endian"
    #endif
#endif

#endif
#ifndef ZZ_EXPORT_byteorder_swap32
#define ZZ_EXPORT_byteorder_swap32
uint32_t  static inline byteorder_swap32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_swap64
#define ZZ_EXPORT_byteorder_swap64
uint64_t  static inline byteorder_swap64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be64
#define ZZ_EXPORT_byteorder_to_be64
uint64_t  static inline byteorder_to_be64 (uint64_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open_with_headers
#define ZZ_EXPORT_carrier_channel_open_with_headers
carrier_stream_Stream * carrier_channel_open_with_headers (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf, slice_slice_Slice const *  const  extraheaders);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv6
#define ZZ_EXPORT_net_address_from_str_ipv6
bool net_address_from_str_ipv6 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_err_fail_with_system_error
#define ZZ_EXPORT_err_fail_with_system_error
void err_fail_with_system_error (err_Err*  const  self, uintptr_t const  tail, int const  merrno, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_time_to_millis
#define ZZ_EXPORT_time_to_millis
uint64_t time_to_millis (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_window
#define ZZ_EXPORT_carrier_pq_window
uintptr_t carrier_pq_window (carrier_pq_Q const *  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_network
#define ZZ_EXPORT_carrier_vault_ik_i_get_network
static void carrier_vault_ik_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_stream_do_poll
#define ZZ_EXPORT_carrier_stream_do_poll
extern void carrier_stream_do_poll (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_byteorder_to_be32
#define ZZ_EXPORT_byteorder_to_be32
uint32_t  static inline byteorder_to_be32 (uint32_t const  x);

#endif
#ifndef ZZ_EXPORT_carrier_channel_cleanup
#define ZZ_EXPORT_carrier_channel_cleanup
extern void carrier_channel_cleanup (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_io_wait_fn
#define ZZ_EXPORT_io_wait_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wait_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} io_wait_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wait_fn)

#endif
#ifndef ZZ_EXPORT_carrier_identity_alias_from_str
#define ZZ_EXPORT_carrier_identity_alias_from_str
void carrier_identity_alias_from_str (carrier_identity_Alias*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_pool_member
#define ZZ_EXPORT_pool_member

#endif
#ifndef ZZ_EXPORT_pool_continuous
#define ZZ_EXPORT_pool_continuous

#endif
#ifndef ZZ_EXPORT_pool_free
#define ZZ_EXPORT_pool_free
void pool_free (pool_Pool*  const  self, void const *  ptr_);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_home_carriertoml
void carrier_endpoint_from_home_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT__string_h_
#define ZZ_EXPORT__string_h_
#include <string.h>

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_to_str
#define ZZ_EXPORT_carrier_identity_identity_to_str
uintptr_t carrier_identity_identity_to_str (err_Err*  const  e, uintptr_t const  et, char*  const  to, uintptr_t const  l, carrier_identity_Identity const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_state_connect
#define ZZ_EXPORT_carrier_endpoint_do_state_connect
static void carrier_endpoint_do_state_connect (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_slice_slice_Slice
#define ZZ_EXPORT_slice_slice_Slice
struct slice_slice_Slice_t {
   uint8_t const *  mem ;
   uintptr_t size ;
}
;
size_t sizeof_slice_slice_Slice();

#endif
#ifndef ZZ_EXPORT_netio_tcp_send
#define ZZ_EXPORT_netio_tcp_send
io_Result netio_tcp_send (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf);

#endif
#ifndef ZZ_EXPORT_buffer_append_bytes
#define ZZ_EXPORT_buffer_append_bytes
void buffer_append_bytes (buffer_Buffer*  const  self, uintptr_t const  t, uint8_t const *  const  bytes, uintptr_t inlen);

#endif
#ifndef ZZ_EXPORT_io_write
#define ZZ_EXPORT_io_write
io_Result io_write (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_FrameType
#define ZZ_EXPORT_carrier_channel_FrameType
typedef enum {
    carrier_channel_FrameType_Ack = 1,
    carrier_channel_FrameType_Ping = 2,
    carrier_channel_FrameType_Disconnect = 3,
    carrier_channel_FrameType_Open = 4,
    carrier_channel_FrameType_Stream = 5,
    carrier_channel_FrameType_Close = 6,
    carrier_channel_FrameType_Configure = 7,
    carrier_channel_FrameType_Fragmented = 8,

} carrier_channel_FrameType;

#endif
#ifndef ZZ_EXPORT_carrier_cipher_init
#define ZZ_EXPORT_carrier_cipher_init
void carrier_cipher_init (carrier_cipher_CipherState*  const  self, uint8_t const *  const  k);

#endif
#ifndef ZZ_EXPORT_io_timeout
#define ZZ_EXPORT_io_timeout
io_Io io_timeout (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, time_Time const  t2);

#endif
#ifndef ZZ_EXPORT_carrier_channel_poll
#define ZZ_EXPORT_carrier_channel_poll
extern io_Result carrier_channel_poll (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_pq_ack
#define ZZ_EXPORT_carrier_pq_ack
void carrier_pq_ack (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_cstr
#define ZZ_EXPORT_carrier_identity_secret_from_cstr
void carrier_identity_secret_from_cstr (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network
#define ZZ_EXPORT_carrier_vault_toml_i_get_network
static void carrier_vault_toml_i_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  network);

#endif
#ifndef ZZ_EXPORT_carrier_router_disconnect
#define ZZ_EXPORT_carrier_router_disconnect
extern void carrier_router_disconnect (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  route);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_generate
#define ZZ_EXPORT_carrier_identity_secretkit_generate
void carrier_identity_secretkit_generate (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_set_network
#define ZZ_EXPORT_carrier_vault_ik_i_set_network
static void carrier_vault_ik_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_stream_cancel
#define ZZ_EXPORT_carrier_stream_cancel
void carrier_stream_cancel (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_proto_PublishRequest
#define ZZ_EXPORT_carrier_proto_PublishRequest
typedef enum {
    carrier_proto_PublishRequest_Unused = 1,
    carrier_proto_PublishRequest_Network = 2,
    carrier_proto_PublishRequest_ReceiveAlias = 3,

} carrier_proto_PublishRequest;

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt
#define ZZ_EXPORT_carrier_cipher_decrypt
uintptr_t carrier_cipher_decrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_net_address_get_port
#define ZZ_EXPORT_net_address_get_port
uint16_t net_address_get_port (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_mem_copy
#define ZZ_EXPORT_mem_copy
extern void mem_copy (void const *  const  src, void*  const  dst, uintptr_t const  n);

#endif
#ifndef ZZ_EXPORT_carrier_pq_keepalive
#define ZZ_EXPORT_carrier_pq_keepalive
uint64_t carrier_pq_keepalive (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  now);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapdec
#define ZZ_EXPORT_carrier_pq_wrapdec
static uintptr_t carrier_pq_wrapdec (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_generate
#define ZZ_EXPORT_carrier_identity_secret_generate
void carrier_identity_secret_generate (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_net_address_from_buffer
#define ZZ_EXPORT_net_address_from_buffer
void net_address_from_buffer (net_address_Address*  const  self, buffer_Buffer const *  const  s, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_channel_Transfer
#define ZZ_EXPORT_carrier_channel_Transfer
struct carrier_channel_Transfer_t {
   uint8_t version ;
   uint64_t route ;
   bool responder ;
   carrier_cipher_CipherState c_mine ;
   carrier_cipher_CipherState c_them ;
   uint64_t rtt ;
   uint64_t counter_out ;
   uint8_t outgoing_acks_at ;
}
;
size_t sizeof_carrier_channel_Transfer();

#endif
#ifndef ZZ_EXPORT_carrier_channel_transfer_from_symmetric
#define ZZ_EXPORT_carrier_channel_transfer_from_symmetric
extern carrier_channel_Transfer carrier_channel_transfer_from_symmetric (carrier_symmetric_SymmetricState const *  const  symm, uint8_t const  version, uint64_t const  route, bool const  responder);

#endif
#ifndef ZZ_EXPORT_buffer_cstr
#define ZZ_EXPORT_buffer_cstr
char  const * buffer_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_buffer_copy_cstr
#define ZZ_EXPORT_buffer_copy_cstr
void buffer_copy_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_buffer_eq_cstr
#define ZZ_EXPORT_buffer_eq_cstr
bool buffer_eq_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_net_address_set_ip
#define ZZ_EXPORT_net_address_set_ip
void net_address_set_ip (net_address_Address*  const  self, net_address_Type const  t, uint8_t const *  const  b);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_hash
#define ZZ_EXPORT_carrier_symmetric_mix_hash
extern void carrier_symmetric_mix_hash (carrier_symmetric_SymmetricState*  const  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_protonerf_decode
#define ZZ_EXPORT_protonerf_decode
void protonerf_decode (protonerf_Decoder*  const  self, slice_slice_Slice const  sl);

#endif
#ifndef ZZ_EXPORT_protonerf_Value
#define ZZ_EXPORT_protonerf_Value
union protonerf_Value_t {
   uintptr_t v_len ;
   uint64_t v_u64 ;
   int64_t v_i64 ;
   bool v_bool ;
}
;
size_t sizeof_protonerf_Value();

#endif
#ifndef ZZ_EXPORT_protonerf_Field
#define ZZ_EXPORT_protonerf_Field
struct protonerf_Field_t {
   bool valid ;
   uint64_t index ;
   protonerf_Value value ;
   uint8_t const *  a ;
}
;
size_t sizeof_protonerf_Field();

#endif
#ifndef ZZ_EXPORT_err_check
#define ZZ_EXPORT_err_check
bool err_check (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectRequest
#define ZZ_EXPORT_carrier_proto_PeerConnectRequest
typedef enum {
    carrier_proto_PeerConnectRequest_Identity = 1,
    carrier_proto_PeerConnectRequest_Timestamp = 2,
    carrier_proto_PeerConnectRequest_Handshake = 3,
    carrier_proto_PeerConnectRequest_Route = 4,
    carrier_proto_PeerConnectRequest_Paths = 5,

} carrier_proto_PeerConnectRequest;

#endif
#ifndef ZZ_EXPORT_err_fail
#define ZZ_EXPORT_err_fail
void err_fail (err_Err*  const  self, uintptr_t const  tail, uintptr_t const  e, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_channel_InvalidFrame
#define ZZ_EXPORT_carrier_channel_InvalidFrame
extern const __attribute__ ((unused)) size_t carrier_channel_InvalidFrame;

#endif
#ifndef ZZ_EXPORT_log_info
#define ZZ_EXPORT_log_info
void log_info (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_carrier_noise_Responder
#define ZZ_EXPORT_carrier_noise_Responder
struct carrier_noise_Responder_t {
   carrier_symmetric_SymmetricState symm ;
   carrier_identity_Secret ephemeral ;
   carrier_identity_Secret statickey ;
   carrier_identity_Address remote_ephemeral ;
}
;
size_t sizeof_carrier_noise_Responder();

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define ZZ_EXPORT_carrier_endpoint_PROLOGUE
#define carrier_endpoint_PROLOGUE ((char  const * )    "carrier has arrived")

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define ZZ_EXPORT_carrier_endpoint_SIGN_PURPOSE
#define carrier_endpoint_SIGN_PURPOSE ((char  const * )    "carrier handshake hash 1")

#endif
#ifndef ZZ_EXPORT_buffer_strlen
#define ZZ_EXPORT_buffer_strlen
uintptr_t buffer_strlen (char const *  s);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Signature
#define ZZ_EXPORT_carrier_identity_Signature
struct carrier_identity_Signature_t {
   uint8_t k[    64] ;
}
;
size_t sizeof_carrier_identity_Signature();

#endif
#ifndef ZZ_EXPORT_carrier_identity_verify
#define ZZ_EXPORT_carrier_identity_verify
bool carrier_identity_verify (carrier_identity_Identity const *  const  pk, carrier_identity_Signature const *  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_log_error
#define ZZ_EXPORT_log_error
void log_error (char const *  const  module, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_protonerf_encode_varint
#define ZZ_EXPORT_protonerf_encode_varint
void protonerf_encode_varint (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint64_t value);

#endif
#ifndef ZZ_EXPORT_carrier_proto_PeerConnectResponse
#define ZZ_EXPORT_carrier_proto_PeerConnectResponse
typedef enum {
    carrier_proto_PeerConnectResponse_Ok = 1,
    carrier_proto_PeerConnectResponse_Handshake = 2,
    carrier_proto_PeerConnectResponse_Paths = 3,
    carrier_proto_PeerConnectResponse_Error = 4,

} carrier_proto_PeerConnectResponse;

#endif
#ifndef ZZ_EXPORT_protonerf_encode_bytes
#define ZZ_EXPORT_protonerf_encode_bytes
void protonerf_encode_bytes (slice_mut_slice_MutSlice str, err_Err*  const  e, uintptr_t const  et, uint8_t const  index, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_err_assert_safe
#define ZZ_EXPORT_err_assert_safe
void err_assert_safe (void const *  const  a, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_responder_accept_insecure
#define ZZ_EXPORT_carrier_responder_accept_insecure
extern void carrier_responder_accept_insecure (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const *  const  store, uint64_t route, uint64_t const  timestamp, slice_mut_slice_MutSlice*  const  frame);

#endif
#ifndef ZZ_EXPORT_carrier_channel_from_transfer
#define ZZ_EXPORT_carrier_channel_from_transfer
extern void carrier_channel_from_transfer (carrier_channel_Channel*  const  self, carrier_channel_Transfer const  tr);

#endif
#ifndef ZZ_EXPORT_hex_dump_slice
#define ZZ_EXPORT_hex_dump_slice
void hex_dump_slice (slice_slice_Slice const  s);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_integrity
#define ZZ_EXPORT_hpack_decoder_integrity

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode
#define ZZ_EXPORT_hpack_decoder_decode
void hpack_decoder_decode (hpack_decoder_Iterator*  const  self, slice_slice_Slice const  wire);

#endif
#ifndef ZZ_EXPORT_carrier_publish_stream_connect
#define ZZ_EXPORT_carrier_publish_stream_connect
static bool carrier_publish_stream_connect (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  msg);

#endif
#ifndef ZZ_EXPORT_net_address_none
#define ZZ_EXPORT_net_address_none
void net_address_none (net_address_Address*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_signature_from_str
#define ZZ_EXPORT_carrier_identity_signature_from_str
void carrier_identity_signature_from_str (carrier_identity_Signature*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_local_identity
static void carrier_vault_toml_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_netio_udp_recvfrom
#define ZZ_EXPORT_netio_udp_recvfrom
io_Result netio_udp_recvfrom (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st, net_address_Address*  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_pq_send
#define ZZ_EXPORT_carrier_pq_send
uintptr_t carrier_pq_send (carrier_pq_Q*  const  self, uintptr_t const  qt, uint64_t const  time, uint8_t*  const  buf, uint16_t const  buflen, uint64_t const  counter);

#endif
#ifndef ZZ_EXPORT_netio_tcp_connect
#define ZZ_EXPORT_netio_tcp_connect
void netio_tcp_connect (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_poll
#define ZZ_EXPORT_carrier_bootstrap_poll
io_Result carrier_bootstrap_poll (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_add_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_add_authorization
static void carrier_vault_ik_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_connect
#define ZZ_EXPORT_carrier_vault_authorize_connect
bool carrier_vault_authorize_connect (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii);

#endif
#ifndef ZZ_EXPORT_net_address_from_str_ipv4
#define ZZ_EXPORT_net_address_from_str_ipv4
bool net_address_from_str_ipv4 (net_address_Address*  const  self, char const *  const  s, uintptr_t const  slen);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_native
#define ZZ_EXPORT_carrier_endpoint_native
void carrier_endpoint_native (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate_insecure
#define ZZ_EXPORT_carrier_noise_initiate_insecure
extern uintptr_t carrier_noise_initiate_insecure (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_carrier_proto_Alias
#define ZZ_EXPORT_carrier_proto_Alias
typedef enum {
    carrier_proto_Alias_Alias = 2,

} carrier_proto_Alias;

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml
void carrier_vault_toml_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_as_mut_slice
#define ZZ_EXPORT_buffer_as_mut_slice
slice_mut_slice_MutSlice buffer_as_mut_slice (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_next
#define ZZ_EXPORT_hpack_decoder_next
bool hpack_decoder_next (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_complete
#define ZZ_EXPORT_carrier_endpoint_do_complete
static bool carrier_endpoint_do_complete (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_peering_Transport const  trp, net_address_Address const  fromaddr);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_bytes
#define ZZ_EXPORT_slice_slice_eq_bytes
bool slice_slice_eq_bytes (slice_slice_Slice const *  const  self, uint8_t const *  const  other, uintptr_t const  othersize);

#endif
#ifndef ZZ_EXPORT_hpack_encoder_encode
#define ZZ_EXPORT_hpack_encoder_encode
void hpack_encoder_encode (slice_mut_slice_MutSlice const  slice, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  key, uintptr_t const  keylen, uint8_t const *  const  val, uintptr_t const  vallen);

#endif
#ifndef ZZ_EXPORT_carrier_publish_on_remote_open
#define ZZ_EXPORT_carrier_publish_on_remote_open
extern void carrier_publish_on_remote_open (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_
#include <stdarg.h>

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Entry
#define ZZ_EXPORT_hpack_decoder_Entry
struct hpack_decoder_Entry_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
}
;
size_t sizeof_hpack_decoder_Entry();

#endif
#ifndef ZZ_EXPORT_hpack_decoder_DYNSIZE
#define ZZ_EXPORT_hpack_decoder_DYNSIZE
#define hpack_decoder_DYNSIZE ((uintptr_t )    16)

#endif
#ifndef ZZ_EXPORT_hpack_decoder_Iterator
#define ZZ_EXPORT_hpack_decoder_Iterator
struct hpack_decoder_Iterator_t {
   slice_slice_Slice key ;
   slice_slice_Slice val ;
   slice_slice_Slice wire ;
   uintptr_t at ;
   hpack_decoder_Entry dyn[    hpack_decoder_DYNSIZE] ;
}
;
size_t sizeof_hpack_decoder_Iterator();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_close
#define ZZ_EXPORT_carrier_vault_toml_close
static void carrier_vault_toml_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_ends_with_cstr
#define ZZ_EXPORT_buffer_ends_with_cstr
bool buffer_ends_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_router_push
#define ZZ_EXPORT_carrier_router_push
extern bool carrier_router_push (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
#define ZZ_EXPORT_carrier_vault_CheckExistingAuthorizationState
struct carrier_vault_CheckExistingAuthorizationState_t {
   carrier_identity_Identity const *  addme ;
   char const *  resource ;
   bool found ;
}
;
size_t sizeof_carrier_vault_CheckExistingAuthorizationState();

#endif
#ifndef ZZ_EXPORT_carrier_stream_open_fn
#define ZZ_EXPORT_carrier_stream_open_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  headers, void * _ctx);
} carrier_stream_open_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_open_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_close_fn
#define ZZ_EXPORT_carrier_stream_close_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, void * _ctx);
} carrier_stream_close_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_close_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream_fn
#define ZZ_EXPORT_carrier_stream_stream_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  b, void * _ctx);
} carrier_stream_stream_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_stream_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_fragmented_fn
#define ZZ_EXPORT_carrier_stream_fragmented_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn 1
typedef struct {
    void *ctx;
    bool (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  fragments, void * _ctx);
} carrier_stream_fragmented_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_fragmented_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_poll_fn
#define ZZ_EXPORT_carrier_stream_poll_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)
#define ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn 1
typedef struct {
    void *ctx;
    void (*fn) (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async, void * _ctx);
} carrier_stream_poll_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_carrier_stream_poll_fn)

#endif
#ifndef ZZ_EXPORT_carrier_stream_Config
#define ZZ_EXPORT_carrier_stream_Config
struct carrier_stream_Config_t {
   char const *  path ;
   carrier_stream_open_fn open ;
   carrier_stream_close_fn close ;
   carrier_stream_stream_fn stream ;
   carrier_stream_fragmented_fn fragmented ;
   carrier_stream_poll_fn poll ;
}
;
size_t sizeof_carrier_stream_Config();

#endif
#ifndef ZZ_EXPORT_carrier_publish_stream_to_publish
#define ZZ_EXPORT_carrier_publish_stream_to_publish
static bool carrier_publish_stream_to_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_carrier_publish_close_publish
#define ZZ_EXPORT_carrier_publish_close_publish
static void carrier_publish_close_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_publish_publish
#define ZZ_EXPORT_carrier_publish_publish
void carrier_publish_publish (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_err_elog
#define ZZ_EXPORT_err_elog
void err_elog (err_Err const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Authorize
#define ZZ_EXPORT_carrier_vault_toml_Authorize
struct carrier_vault_toml_Authorize_t {
   bool used ;
   carrier_identity_Identity identity ;
   buffer_Buffer_300 path ;
}
;
size_t sizeof_carrier_vault_toml_Authorize();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_Mem
#define ZZ_EXPORT_carrier_vault_toml_Mem
struct carrier_vault_toml_Mem_t {
   carrier_identity_Secret secret ;
   carrier_identity_Secret principal ;
   bool has_principal ;
   carrier_identity_Address network ;
   carrier_identity_Secret network_secret ;
   carrier_vault_toml_Authorize auth[    32] ;
   buffer_Buffer_2000 file_name ;
}
;
size_t sizeof_carrier_vault_toml_Mem();

#endif
#ifndef ZZ_EXPORT_carrier_router_close
#define ZZ_EXPORT_carrier_router_close
extern void carrier_router_close (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_fragmented
#define ZZ_EXPORT_carrier_stream_incomming_fragmented
extern bool carrier_stream_incomming_fragmented (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, uint32_t const  fragments);

#endif
#ifndef ZZ_EXPORT_time_to_seconds
#define ZZ_EXPORT_time_to_seconds
uint64_t time_to_seconds (time_Time const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_cstr
#define ZZ_EXPORT_carrier_identity_identity_from_cstr
void carrier_identity_identity_from_cstr (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
#define ZZ_EXPORT_carrier_vault_toml_from_carriertoml_and_secret
void carrier_vault_toml_from_carriertoml_and_secret (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_carriertoml
#define ZZ_EXPORT_carrier_endpoint_from_carriertoml
void carrier_endpoint_from_carriertoml (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_set_network
#define ZZ_EXPORT_carrier_vault_toml_i_set_network
static void carrier_vault_toml_i_set_network (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Secret const *  const  secret);

#endif
#ifndef ZZ_EXPORT_buffer_as_slice
#define ZZ_EXPORT_buffer_as_slice
slice_slice_Slice buffer_as_slice (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_noise_initiate
#define ZZ_EXPORT_carrier_noise_initiate
extern uintptr_t carrier_noise_initiate (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_io_close
#define ZZ_EXPORT_io_close
void io_close (io_Io*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_local
#define ZZ_EXPORT_carrier_vault_toml_i_sign_local
static void carrier_vault_toml_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_i_from_carriertoml
static void carrier_vault_toml_i_from_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  file_name);

#endif
#ifndef ZZ_EXPORT_buffer_make
#define ZZ_EXPORT_buffer_make
void buffer_make (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_literal
#define ZZ_EXPORT_hpack_decoder_decode_literal
static bool hpack_decoder_decode_literal (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  index);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt_ad
#define ZZ_EXPORT_carrier_cipher_encrypt_ad
uintptr_t carrier_cipher_encrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_netio_tcp_recv
#define ZZ_EXPORT_netio_tcp_recv
io_Result netio_tcp_recv (netio_tcp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  buf, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_peering_from_proto
#define ZZ_EXPORT_carrier_peering_from_proto
void carrier_peering_from_proto (carrier_peering_Peering*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field const  field);

#endif
#ifndef ZZ_EXPORT_protonerf_next
#define ZZ_EXPORT_protonerf_next
bool protonerf_next (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et, protonerf_Field*  const  v);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_cluster_target
#define ZZ_EXPORT_carrier_endpoint_cluster_target
void carrier_endpoint_cluster_target (carrier_endpoint_Endpoint*  const  self, carrier_identity_Identity const *  const  target);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_local_identity
#define ZZ_EXPORT_carrier_vault_get_local_identity
void carrier_vault_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_buffer_clear
#define ZZ_EXPORT_buffer_clear
void buffer_clear (buffer_Buffer*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_decrypt_and_mix_hash
extern uintptr_t carrier_symmetric_decrypt_and_mix_hash (carrier_symmetric_SymmetricState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  ciphertext, uintptr_t const  cipher_len, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plain_len_max);

#endif
#ifndef ZZ_EXPORT_io_read
#define ZZ_EXPORT_io_read
io_Result io_read (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_from_str
#define ZZ_EXPORT_net_address_from_str
void net_address_from_str (net_address_Address*  const  self, char const *  s, uintptr_t slen);

#endif
#ifndef ZZ_EXPORT_carrier_identity_eq
#define ZZ_EXPORT_carrier_identity_eq
bool carrier_identity_eq (carrier_identity_Identity const *  const  self, carrier_identity_Identity const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_open
#define ZZ_EXPORT_carrier_channel_open
carrier_stream_Stream * carrier_channel_open (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_time_more_than
#define ZZ_EXPORT_time_more_than
bool time_more_than (time_Time const *  const  self, time_Time const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_append_cstr
#define ZZ_EXPORT_buffer_append_cstr
void buffer_append_cstr (buffer_Buffer*  const  self, uintptr_t const  t, char const *  const  cstr);

#endif
#ifndef ZZ_EXPORT_netio_udp_close
#define ZZ_EXPORT_netio_udp_close
void netio_udp_close (netio_udp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
#define ZZ_EXPORT_carrier_vault_toml_from_home_carriertoml
void carrier_vault_toml_from_home_carriertoml (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network_secret
#define ZZ_EXPORT_carrier_vault_get_network_secret
void carrier_vault_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  addr);

#endif
#ifndef ZZ_EXPORT_protonerf_Decoder
#define ZZ_EXPORT_protonerf_Decoder
struct protonerf_Decoder_t {
   uint8_t const *  mem ;
   uintptr_t size ;
   uintptr_t at ;
}
;
size_t sizeof_protonerf_Decoder();

#endif
#ifndef ZZ_EXPORT_carrier_vault_list_authorizations
#define ZZ_EXPORT_carrier_vault_list_authorizations
void carrier_vault_list_authorizations (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_next_broker
#define ZZ_EXPORT_carrier_endpoint_next_broker
static bool carrier_endpoint_next_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_pq_wrapinc
#define ZZ_EXPORT_carrier_pq_wrapinc
static uintptr_t carrier_pq_wrapinc (carrier_pq_Q const *  const  self, uintptr_t const  qt, uintptr_t*  const  i);

#endif
#ifndef ZZ_EXPORT_err_make
#define ZZ_EXPORT_err_make
void err_make (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_await
#define ZZ_EXPORT_io_await
io_Result io_await (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, void const *  const  poll, void*  const  user, time_Time const  timeout_);

#endif
#ifndef ZZ_EXPORT_io_read_slice
#define ZZ_EXPORT_io_read_slice
io_Result io_read_slice (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, slice_mut_slice_MutSlice*  const  slice);

#endif
#ifndef ZZ_EXPORT_toml_push
#define ZZ_EXPORT_toml_push
void toml_push (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, char const *  const  str, uintptr_t const  strlen);

#endif
#ifndef ZZ_EXPORT_netio_udp_bind
#define ZZ_EXPORT_netio_udp_bind
void netio_udp_bind (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, net_address_Address const  addr, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_peering_received
#define ZZ_EXPORT_carrier_peering_received
void carrier_peering_received (carrier_peering_Peering*  const  self, carrier_peering_Transport const  transport, net_address_Address const  addr, carrier_peering_Class const  klass);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_cstr
#define ZZ_EXPORT_slice_mut_slice_append_cstr
bool slice_mut_slice_append_cstr (slice_mut_slice_MutSlice*  const  self, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_toml_next
#define ZZ_EXPORT_toml_next
void toml_next (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push32
#define ZZ_EXPORT_slice_mut_slice_push32
bool slice_mut_slice_push32 (slice_mut_slice_MutSlice*  const  self, uint32_t const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_push64
#define ZZ_EXPORT_slice_mut_slice_push64
bool slice_mut_slice_push64 (slice_mut_slice_MutSlice*  const  self, uint64_t const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
#define ZZ_EXPORT_carrier_vault_toml_i_get_network_secret
static void carrier_vault_toml_i_get_network_secret (carrier_vault_Vault const *  const  self, carrier_identity_Secret*  const  secret);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_advance_clock
#define ZZ_EXPORT_carrier_vault_ik_i_advance_clock
static uint64_t carrier_vault_ik_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_split
#define ZZ_EXPORT_carrier_symmetric_split
extern void carrier_symmetric_split (carrier_symmetric_SymmetricState const *  const  self, carrier_cipher_CipherState*  const  ini, carrier_cipher_CipherState*  const  resp);

#endif
#ifndef ZZ_EXPORT_carrier_channel_send_close_frame
#define ZZ_EXPORT_carrier_channel_send_close_frame
extern void carrier_channel_send_close_frame (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  streamid, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_toml_MAX_DEPTH
#define ZZ_EXPORT_toml_MAX_DEPTH
#define toml_MAX_DEPTH ((uintptr_t )    64)

#endif
#ifndef ZZ_EXPORT_toml_Parser
#define ZZ_EXPORT_toml_Parser
struct toml_Parser_t {
   uintptr_t col ;
   uintptr_t line ;
   bool esc ;
   bool comment ;
   toml_ParserStack state[    toml_MAX_DEPTH] ;
   uintptr_t depth ;
   uintptr_t keylen ;
   buffer_Buffer capture ;
}
;
size_t sizeof_toml_Parser(size_t tail);

#endif
#ifndef ZZ_EXPORT_net_address_get_ip
#define ZZ_EXPORT_net_address_get_ip
uint8_t  const * net_address_get_ip (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_noise_complete
#define ZZ_EXPORT_carrier_noise_complete
extern uintptr_t carrier_noise_complete (carrier_noise_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_io_make_timeout_fn
#define ZZ_EXPORT_io_make_timeout_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn 1
typedef struct {
    void *ctx;
    io_Io (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, time_Time const  t2, void * _ctx);
} io_make_timeout_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_timeout_fn)

#endif
#ifndef ZZ_EXPORT_io_make_channel_fn
#define ZZ_EXPORT_io_make_channel_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write, void * _ctx);
} io_make_channel_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_make_channel_fn)

#endif
#ifndef ZZ_EXPORT_io_select_fn
#define ZZ_EXPORT_io_select_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_select_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, err_Err*  const  e, uintptr_t const  et, io_Context*  const  ctx, io_Ready const  w, void * _ctx);
} io_select_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_select_fn)

#endif
#ifndef ZZ_EXPORT_io_wake_fn
#define ZZ_EXPORT_io_wake_fn
#if !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)
#define ZZ_HAS_DEFINED_CLOSURE_io_wake_fn 1
typedef struct {
    void *ctx;
    void (*fn) (io_Async*  const  async, void * _ctx);
} io_wake_fn;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_io_wake_fn)

#endif
#ifndef ZZ_EXPORT_io_Async
#define ZZ_EXPORT_io_Async
struct io_Async_t {
   void const *  upper ;
   io_make_timeout_fn impl_make_timeout ;
   io_make_channel_fn impl_make_channel ;
   io_select_fn impl_select ;
   io_wake_fn impl_wake ;
   io_wait_fn impl_wait ;
}
;
size_t sizeof_io_Async();

#endif
#ifndef ZZ_EXPORT_err_abort
#define ZZ_EXPORT_err_abort
void err_abort (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_del_authorization
#define ZZ_EXPORT_carrier_vault_ik_i_del_authorization
static void carrier_vault_ik_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_pq_alloc
#define ZZ_EXPORT_carrier_pq_alloc
slice_mut_slice_MutSlice carrier_pq_alloc (carrier_pq_Q*  const  self, uintptr_t const  qt, err_Err*  const  e, uintptr_t const  et, carrier_channel_FrameType const  typ, uintptr_t const  size);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_DnsPacket
#define ZZ_EXPORT_carrier_bootstrap_DnsPacket
struct carrier_bootstrap_DnsPacket_t {
   uint16_t id ;
   uint16_t flags ;
   uint16_t queries ;
   uint16_t answers ;
   uint16_t authorities ;
   uint16_t additionals ;
}
 __attribute__((__packed__)) ;
size_t sizeof_carrier_bootstrap_DnsPacket();

#endif
#ifndef ZZ_EXPORT_carrier_stream_stream
#define ZZ_EXPORT_carrier_stream_stream
slice_mut_slice_MutSlice carrier_stream_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uintptr_t const  reserved_size);

#endif
#ifndef ZZ_EXPORT_buffer_starts_with_cstr
#define ZZ_EXPORT_buffer_starts_with_cstr
bool buffer_starts_with_cstr (buffer_Buffer const *  const  self, uintptr_t const  tail, char const *  const  a);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
#define ZZ_EXPORT_carrier_vault_toml_load_from_toml_authorize_iter
static void carrier_vault_toml_load_from_toml_authorize_iter (toml_U const *  const  self, err_Err*  const  e, uintptr_t const  et, toml_Parser*  const  p, uintptr_t const  pt, char const *  const  k, toml_Value const  v);

#endif
#ifndef ZZ_EXPORT_pool_alloc
#define ZZ_EXPORT_pool_alloc
void * pool_alloc (pool_Pool*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_router_next_channel
#define ZZ_EXPORT_carrier_router_next_channel
extern carrier_channel_Channel * carrier_router_next_channel (carrier_router_Router*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_format
#define ZZ_EXPORT_buffer_format
int buffer_format (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_
#define ZZ_EXPORT___home_aep_proj_zz_modules_net_src_os_h_

#line 1 "/home/aep/proj/zz/modules/net/src/os.h"
#if defined (_WIN32)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <Ws2def.h>
#include <Ws2ipdef.h>
#endif

#if defined(__unix__) || defined(__APPLE__) || defined(__linux__)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#endif

#if defined(ESP_PLATFORM)
#include <netinet/in.h>
#include <stdint.h>
#include <string.h>
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include <lwip/netdb.h>
#endif

typedef struct sockaddr_in  sockaddr_in4_t;
typedef struct sockaddr_in6 sockaddr_in6_t;

#endif
#ifndef ZZ_EXPORT_pool_make
#define ZZ_EXPORT_pool_make
void pool_make (pool_Pool*  const  self, uintptr_t const  pt, uintptr_t blocksize);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_initiate
#define ZZ_EXPORT_carrier_initiator_initiate
extern void carrier_initiator_initiate (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, bool const  secure, carrier_vault_Vault const *  const  vault, carrier_initiator_Move const  move, carrier_identity_Identity const *  const  cluster_target, carrier_identity_Address const *  const  xaddr, uint64_t const  vector_time, slice_mut_slice_MutSlice pkt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_del_authorization
#define ZZ_EXPORT_carrier_vault_del_authorization
void carrier_vault_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_err_Err
#define ZZ_EXPORT_err_Err
struct err_Err_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
}
;
size_t sizeof_err_Err(size_t tail);
#endif
#ifndef ZZ_EXPORT_err_Err_200_200
#define ZZ_EXPORT_err_Err_200_200
struct err_Err_200_t {
   uintptr_t error ;
   int system ;
   buffer_Buffer trace ;
   char _____tail [200];
}
;
size_t sizeof_err_Err_200();

#endif
#ifndef ZZ_EXPORT_toml_close
#define ZZ_EXPORT_toml_close
void toml_close (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_network
#define ZZ_EXPORT_carrier_vault_get_network
void carrier_vault_get_network (carrier_vault_Vault const *  const  self, carrier_identity_Address*  const  addr);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_advance_clock
#define ZZ_EXPORT_carrier_vault_toml_i_advance_clock
static uint64_t carrier_vault_toml_i_advance_clock (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_publish_stream_to_publish
#define ZZ_EXPORT_carrier_publish_stream_to_publish
static bool carrier_publish_stream_to_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  bs);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
#define ZZ_EXPORT_carrier_vault_ik_i_list_authorizations
static void carrier_vault_ik_i_list_authorizations (carrier_vault_Vault const *  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_list_authorizations_cb const  cb, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_vault_add_authorization
#define ZZ_EXPORT_carrier_vault_add_authorization
void carrier_vault_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_buffer_append_slice
#define ZZ_EXPORT_buffer_append_slice
void buffer_append_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_vault_broker_count
#define ZZ_EXPORT_carrier_vault_broker_count
uintptr_t carrier_vault_broker_count (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_protonerf_read_varint
#define ZZ_EXPORT_protonerf_read_varint
static uint64_t protonerf_read_varint (protonerf_Decoder*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_split
#define ZZ_EXPORT_buffer_split
bool buffer_split (buffer_Buffer const *  const  self, uintptr_t const  tail, char const  token, uintptr_t*  const  iterator, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_buffer_slen
#define ZZ_EXPORT_buffer_slen
uintptr_t buffer_slen (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_io_write_bytes
#define ZZ_EXPORT_io_write_bytes
io_Result io_write_bytes (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  b, uintptr_t*  const  blen);

#endif
#ifndef ZZ_EXPORT_buffer_copy_slice
#define ZZ_EXPORT_buffer_copy_slice
void buffer_copy_slice (buffer_Buffer*  const  self, uintptr_t const  t, slice_slice_Slice const  slice);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_Sha256
#define ZZ_EXPORT_carrier_sha256_Sha256
struct carrier_sha256_Sha256_t {
   uint32_t state[    8] ;
   uint8_t block[    64] ;
   uint8_t at ;
   uintptr_t blockcounter ;
}
;
size_t sizeof_carrier_sha256_Sha256();

#endif
#ifndef ZZ_EXPORT_netio_udp_sendto
#define ZZ_EXPORT_netio_udp_sendto
io_Result netio_udp_sendto (netio_udp_Socket*  const  self, err_Err*  const  e, uintptr_t const  et, slice_slice_Slice const  buf, net_address_Address const *  const  to);

#endif
#ifndef ZZ_EXPORT_carrier_channel_ack
#define ZZ_EXPORT_carrier_channel_ack
extern void carrier_channel_ack (carrier_channel_Channel*  const  self, err_Err*  const  e, uint64_t const  ackd);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_poll
#define ZZ_EXPORT_carrier_endpoint_poll
io_Result carrier_endpoint_poll (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secretkit_from_str
#define ZZ_EXPORT_carrier_identity_secretkit_from_str
void carrier_identity_secretkit_from_str (carrier_identity_SecretKit*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_io_channel
#define ZZ_EXPORT_io_channel
void io_channel (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et, io_Io*  const  read, io_Io*  const  write);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive_insecure
#define ZZ_EXPORT_carrier_noise_receive_insecure
extern void carrier_noise_receive_insecure (carrier_noise_Responder*  const  self, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_encrypt
#define ZZ_EXPORT_carrier_cipher_encrypt
uintptr_t carrier_cipher_encrypt (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plainlen, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipherlen_max);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_from_ik
#define ZZ_EXPORT_carrier_vault_ik_from_ik
void carrier_vault_ik_from_ik (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_SecretKit const  ik);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
#define ZZ_EXPORT_carrier_vault_ik_i_get_local_identity
static void carrier_vault_ik_i_get_local_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_carrier_channel_stream_exists
#define ZZ_EXPORT_carrier_channel_stream_exists
extern bool carrier_channel_stream_exists (carrier_channel_Channel*  const  self, uint32_t const  streamid);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_mix_key
#define ZZ_EXPORT_carrier_symmetric_mix_key
extern void carrier_symmetric_mix_key (carrier_symmetric_SymmetricState*  self, uint8_t const *  const  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_pool_free_bytes
#define ZZ_EXPORT_pool_free_bytes
uintptr_t pool_free_bytes (pool_Pool const *  const  self);

#endif
#ifndef ZZ_EXPORT_netio_tcp_close
#define ZZ_EXPORT_netio_tcp_close
void netio_tcp_close (netio_tcp_Socket*  const  self);

#endif
#ifndef ZZ_EXPORT_buffer_push
#define ZZ_EXPORT_buffer_push
bool buffer_push (buffer_Buffer*  const  self, uintptr_t const  t, char const  b);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_sign_principal
#define ZZ_EXPORT_carrier_vault_toml_i_sign_principal
static void carrier_vault_toml_i_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_buffer_pop
#define ZZ_EXPORT_buffer_pop
bool buffer_pop (buffer_Buffer*  const  self, uintptr_t const  t);

#endif
#ifndef ZZ_EXPORT_carrier_noise_receive
#define ZZ_EXPORT_carrier_noise_receive
extern uintptr_t carrier_noise_receive (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  payload, uintptr_t const  payload_len, uint8_t const *  const  prologue, uintptr_t const  prologue_len, uint8_t const *  const  packet, uintptr_t const  packet_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream
#define ZZ_EXPORT_carrier_vault_authorize_open_stream
bool carrier_vault_authorize_open_stream (carrier_vault_Vault const *  const  self, carrier_identity_Identity const *  const  ii, char const *  const  path);

#endif
#ifndef ZZ_EXPORT_carrier_pq_clear
#define ZZ_EXPORT_carrier_pq_clear
void carrier_pq_clear (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_identity_secret_from_str
#define ZZ_EXPORT_carrier_identity_secret_from_str
void carrier_identity_secret_from_str (carrier_identity_Secret*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_net_address_from_cstr
#define ZZ_EXPORT_net_address_from_cstr
void net_address_from_cstr (net_address_Address*  const  self, char const *  const  s);

#endif
#ifndef ZZ_EXPORT_net_address_to_buffer
#define ZZ_EXPORT_net_address_to_buffer
void net_address_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_do_not_move
#define ZZ_EXPORT_carrier_endpoint_do_not_move
void carrier_endpoint_do_not_move (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_slice
#define ZZ_EXPORT_slice_mut_slice_append_slice
bool slice_mut_slice_append_slice (slice_mut_slice_MutSlice*  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_buffer_substr
#define ZZ_EXPORT_buffer_substr
void buffer_substr (buffer_Buffer const *  const  self, uintptr_t const  tail, uintptr_t const  from, uintptr_t size, buffer_Buffer*  const  other, uintptr_t const  tail2);

#endif
#ifndef ZZ_EXPORT_io_valid
#define ZZ_EXPORT_io_valid
bool io_valid (io_Context const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_channel_shutdown
#define ZZ_EXPORT_carrier_channel_shutdown
extern void carrier_channel_shutdown (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_publish_close_publish
#define ZZ_EXPORT_carrier_publish_close_publish
static void carrier_publish_close_publish (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_save_to_toml
#define ZZ_EXPORT_carrier_vault_toml_save_to_toml
static void carrier_vault_toml_save_to_toml (carrier_vault_toml_Mem const *  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_buffer_available
#define ZZ_EXPORT_buffer_available
uintptr_t buffer_available (buffer_Buffer const *  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT__stdarg_h_
#define ZZ_EXPORT__stdarg_h_

#endif
#ifndef ZZ_EXPORT_buffer_vformat
#define ZZ_EXPORT_buffer_vformat
int buffer_vformat (buffer_Buffer*  const  self, uintptr_t const  tail, char const *  const  fmt, va_list args);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_init
#define ZZ_EXPORT_carrier_symmetric_init
extern void carrier_symmetric_init (carrier_symmetric_SymmetricState*  const  self, char const *  const  protocolname);

#endif
#ifndef ZZ_EXPORT_carrier_channel_push
#define ZZ_EXPORT_carrier_channel_push
extern void carrier_channel_push (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  body, uintptr_t const  l, uint64_t const  counter, uint8_t const  version);

#endif
#ifndef ZZ_EXPORT_carrier_identity_Alias
#define ZZ_EXPORT_carrier_identity_Alias
struct carrier_identity_Alias_t {
   uint8_t k[    8] ;
}
;
size_t sizeof_carrier_identity_Alias();

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_net_address_OsAddress
#define ZZ_EXPORT_net_address_OsAddress
union net_address_OsAddress_t {
   sockaddr_in4_t ipv4 ;
   sockaddr_in6_t ipv6 ;
   uint8_t b[    32] ;
}
;
size_t sizeof_net_address_OsAddress();

#endif
#ifndef ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
#define ZZ_EXPORT_carrier_vault_authorize_open_stream_cb_s
struct carrier_vault_authorize_open_stream_cb_s_t {
   carrier_identity_Identity const *  ii ;
   char const *  path ;
   bool accepted ;
   bool has_any ;
}
;
size_t sizeof_carrier_vault_authorize_open_stream_cb_s();

#endif
#ifndef ZZ_EXPORT_buffer_fgets
#define ZZ_EXPORT_buffer_fgets
bool buffer_fgets (buffer_Buffer*  const  self, uintptr_t const  tail, FILE*  const  stream);

#endif
#ifndef ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
#define ZZ_EXPORT_carrier_symmetric_encrypt_and_mix_hash
extern uintptr_t carrier_symmetric_encrypt_and_mix_hash (carrier_symmetric_SymmetricState*  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  plain, uintptr_t const  plain_len, uint64_t const  nonce, uint8_t*  const  ciphertext, uintptr_t const  cipher_len_max);

#endif
#ifndef ZZ_EXPORT_carrier_initiator_complete
#define ZZ_EXPORT_carrier_initiator_complete
extern void carrier_initiator_complete (carrier_initiator_Initiator*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_channel_Transfer*  const  chan, carrier_vault_Broker*  const  redirect, slice_slice_Slice pkt, carrier_identity_Identity const *  const  expect_identity);

#endif
#ifndef ZZ_EXPORT_net_address_valid
#define ZZ_EXPORT_net_address_valid
bool net_address_valid (net_address_Address const *  const  self);

#endif
#ifndef ZZ_EXPORT_err_ignore
#define ZZ_EXPORT_err_ignore
void err_ignore (err_Err*  const  self, uintptr_t const  tail);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
#define ZZ_EXPORT_carrier_vault_toml_i_get_principal_identity
static void carrier_vault_toml_i_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_append_bytes
#define ZZ_EXPORT_slice_mut_slice_append_bytes
bool slice_mut_slice_append_bytes (slice_mut_slice_MutSlice*  const  self, uint8_t const *  const  b, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_router_poll
#define ZZ_EXPORT_carrier_router_poll
extern io_Result carrier_router_poll (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_from_vault
#define ZZ_EXPORT_carrier_endpoint_from_vault
void carrier_endpoint_from_vault (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault const  vault);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_register_stream
#define ZZ_EXPORT_carrier_endpoint_register_stream
void carrier_endpoint_register_stream (carrier_endpoint_Endpoint*  const  self, carrier_stream_Config const *  const  conf);

#endif
#ifndef ZZ_EXPORT_err_to_str
#define ZZ_EXPORT_err_to_str
void err_to_str (err_Err const *  const  self, uintptr_t const  et, char*  const  dest, uintptr_t const  dest_len);

#endif
#ifndef ZZ_EXPORT_carrier_noise_accept
#define ZZ_EXPORT_carrier_noise_accept
extern uintptr_t carrier_noise_accept (carrier_noise_Responder*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t*  pkt, uintptr_t const  pktlen, uint8_t const *  const  payload, uintptr_t const  payload_len);

#endif
#ifndef ZZ_EXPORT_net_address_eq
#define ZZ_EXPORT_net_address_eq
bool net_address_eq (net_address_Address const *  const  self, net_address_Address const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_channel_alloc_stream
#define ZZ_EXPORT_carrier_channel_alloc_stream
extern carrier_stream_Stream * carrier_channel_alloc_stream (carrier_channel_Channel*  const  self, uint32_t const  streamid, carrier_stream_Config const *  const  config);

#endif
#ifndef ZZ_EXPORT_net_address_ip_to_buffer
#define ZZ_EXPORT_net_address_ip_to_buffer
void net_address_ip_to_buffer (net_address_Address const *  const  self, buffer_Buffer*  const  to, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_net_address_set_port
#define ZZ_EXPORT_net_address_set_port
void net_address_set_port (net_address_Address*  const  self, uint16_t const  port);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_local
#define ZZ_EXPORT_carrier_vault_sign_local
void carrier_vault_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_sign_local
#define ZZ_EXPORT_carrier_vault_ik_i_sign_local
static void carrier_vault_ik_i_sign_local (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_close
#define ZZ_EXPORT_carrier_stream_incomming_close
extern bool carrier_stream_incomming_close (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order);

#endif
#ifndef ZZ_EXPORT_carrier_router_shutdown
#define ZZ_EXPORT_carrier_router_shutdown
extern void carrier_router_shutdown (carrier_router_Router*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_start
#define ZZ_EXPORT_carrier_endpoint_start
void carrier_endpoint_start (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_shutdown
#define ZZ_EXPORT_carrier_endpoint_shutdown
void carrier_endpoint_shutdown (carrier_endpoint_Endpoint*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_channel_clean_closed
#define ZZ_EXPORT_carrier_channel_clean_closed
static void carrier_channel_clean_closed (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_pool_malloc
#define ZZ_EXPORT_pool_malloc
void * pool_malloc (pool_Pool*  const  self, uintptr_t size);

#endif
#ifndef ZZ_EXPORT_err_fail_with_win32
#define ZZ_EXPORT_err_fail_with_win32
void err_fail_with_win32 (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_io_write_cstr
#define ZZ_EXPORT_io_write_cstr
io_Result io_write_cstr (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  b);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_as_slice
#define ZZ_EXPORT_slice_mut_slice_as_slice
slice_slice_Slice slice_mut_slice_as_slice (slice_mut_slice_MutSlice const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_get_principal_identity
#define ZZ_EXPORT_carrier_vault_get_principal_identity
void carrier_vault_get_principal_identity (carrier_vault_Vault const *  const  self, carrier_identity_Identity*  const  id);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq
#define ZZ_EXPORT_slice_slice_eq
bool slice_slice_eq (slice_slice_Slice const *  const  self, slice_slice_Slice const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_stream_incomming_stream
#define ZZ_EXPORT_carrier_stream_incomming_stream
extern bool carrier_stream_incomming_stream (carrier_stream_Stream*  const  self, err_Err*  const  e, uintptr_t const  et, uint64_t const  order, slice_slice_Slice const  b);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_Bootstrap
#define ZZ_EXPORT_carrier_bootstrap_Bootstrap
struct carrier_bootstrap_Bootstrap_t {
   net_address_Address dns_servers[    16] ;
   uintptr_t dns_servers_count ;
   netio_udp_Socket sock4 ;
   netio_udp_Socket sock6 ;
   io_Io retry_timer ;
   carrier_vault_Vault*  store ;
}
;
size_t sizeof_carrier_bootstrap_Bootstrap();

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_add_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_add_authorization
static void carrier_vault_toml_i_add_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  addme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_close
#define ZZ_EXPORT_carrier_endpoint_close
void carrier_endpoint_close (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_err_fail_with_errno
#define ZZ_EXPORT_err_fail_with_errno
void err_fail_with_errno (err_Err*  const  self, uintptr_t const  tail, char const *  const  file, char const *  const  scope, uintptr_t const  line, char const *  const  fmt, ...);

#endif
#ifndef ZZ_EXPORT_slice_mut_slice_make
#define ZZ_EXPORT_slice_mut_slice_make
void slice_mut_slice_make (slice_mut_slice_MutSlice*  const  self, uint8_t*  const  mem, uintptr_t const  size, uintptr_t*  const  at);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_finish
#define ZZ_EXPORT_carrier_sha256_finish
void carrier_sha256_finish (carrier_sha256_Sha256*  const  self, uint8_t*  const  out);

#endif
#ifndef ZZ_EXPORT_carrier_channel_disco
#define ZZ_EXPORT_carrier_channel_disco
static void carrier_channel_disco (carrier_channel_Channel*  const  self, err_Err*  const  e, uintptr_t const  et, uint32_t const  stream_id);

#endif
#ifndef ZZ_EXPORT_carrier_pq_cancel
#define ZZ_EXPORT_carrier_pq_cancel
void carrier_pq_cancel (carrier_pq_Q*  const  self, uintptr_t const  qt);

#endif
#ifndef ZZ_EXPORT_carrier_vault_close
#define ZZ_EXPORT_carrier_vault_close
void carrier_vault_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_io_wake
#define ZZ_EXPORT_io_wake
void io_wake (io_Async*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_broker
#define ZZ_EXPORT_carrier_endpoint_broker
carrier_channel_Channel * carrier_endpoint_broker (carrier_endpoint_Endpoint*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_vault_vector_time
#define ZZ_EXPORT_carrier_vault_vector_time
uint64_t carrier_vault_vector_time (carrier_vault_Vault const *  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_init
#define ZZ_EXPORT_carrier_sha256_init
void carrier_sha256_init (carrier_sha256_Sha256*  const  self);

#endif
#ifndef ZZ_EXPORT_carrier_identity_address_from_str
#define ZZ_EXPORT_carrier_identity_address_from_str
void carrier_identity_address_from_str (carrier_identity_Address*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_io_wait
#define ZZ_EXPORT_io_wait
void io_wait (io_Async*  const  self, err_Err*  const  e, uintptr_t const  et);

#endif
#ifndef ZZ_EXPORT_carrier_sha256_update
#define ZZ_EXPORT_carrier_sha256_update
void carrier_sha256_update (carrier_sha256_Sha256*  const  self, uint8_t const *  data, uintptr_t l);

#endif
#ifndef ZZ_EXPORT_carrier_stream_close
#define ZZ_EXPORT_carrier_stream_close
void carrier_stream_close (carrier_stream_Stream*  const  self);

#endif
#ifndef ZZ_EXPORT_io_readline
#define ZZ_EXPORT_io_readline
io_Result io_readline (io_Io*  const  self, err_Err*  const  e, uintptr_t const  et, buffer_Buffer*  const  str, uintptr_t const  st);

#endif
#ifndef ZZ_EXPORT_slice_slice_eq_cstr
#define ZZ_EXPORT_slice_slice_eq_cstr
bool slice_slice_eq_cstr (slice_slice_Slice const *  const  self, char const *  const  other);

#endif
#ifndef ZZ_EXPORT_carrier_endpoint_none
#define ZZ_EXPORT_carrier_endpoint_none
void carrier_endpoint_none (carrier_endpoint_Endpoint*  const  self, uintptr_t const  xt);

#endif
#ifndef ZZ_EXPORT_toml_parser
#define ZZ_EXPORT_toml_parser
void toml_parser (toml_Parser*  const  self, uintptr_t const  tail, err_Err*  const  e, uintptr_t const  et, toml_U const  u);

#endif
#ifndef ZZ_EXPORT_carrier_bootstrap_bootstrap
#define ZZ_EXPORT_carrier_bootstrap_bootstrap
void carrier_bootstrap_bootstrap (carrier_bootstrap_Bootstrap*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_vault_Vault*  const  store, io_Async*  const  async);

#endif
#ifndef ZZ_EXPORT_carrier_vault_toml_i_del_authorization
#define ZZ_EXPORT_carrier_vault_toml_i_del_authorization
static void carrier_vault_toml_i_del_authorization (carrier_vault_Vault*  const  self, err_Err*  const  e, uintptr_t const  et, carrier_identity_Identity const *  const  delme, char const *  const  resource);

#endif
#ifndef ZZ_EXPORT_carrier_identity_identity_from_str
#define ZZ_EXPORT_carrier_identity_identity_from_str
void carrier_identity_identity_from_str (carrier_identity_Identity*  const  self, err_Err*  const  e, uintptr_t const  et, char const *  const  from, uintptr_t const  l);

#endif
#ifndef ZZ_EXPORT_carrier_vault_sign_principal
#define ZZ_EXPORT_carrier_vault_sign_principal
void carrier_vault_sign_principal (carrier_vault_Vault const *  const  self, carrier_identity_Signature*  const  s, uint8_t const *  const  subject, uintptr_t const  subject_len);

#endif
#ifndef ZZ_EXPORT_carrier_stream_Stream
#define ZZ_EXPORT_carrier_stream_Stream
struct carrier_stream_Stream_t {
   carrier_stream_Config const *  config ;
   carrier_channel_Channel*  chan ;
   uint32_t id ;
   uint64_t order_incomming ;
   uint64_t order_outgoing ;
   bool errors_are_fatal ;
   bool closing ;
   uint64_t closed_linger_until ;
   uint64_t broker_route ;
   uintptr_t state ;
   uint64_t user1 ;
   void*  user2 ;
   bool memory_pressure ;
   io_Io memory_pressure_timer_io ;
}
;
size_t sizeof_carrier_stream_Stream();

#endif
#ifndef ZZ_EXPORT_carrier_vault_ik_i_close
#define ZZ_EXPORT_carrier_vault_ik_i_close
static void carrier_vault_ik_i_close (carrier_vault_Vault*  const  self);

#endif
#ifndef ZZ_EXPORT_pool_iterator
#define ZZ_EXPORT_pool_iterator
#if !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)
#define ZZ_HAS_DEFINED_CLOSURE_pool_iterator 1
typedef struct {
    void *ctx;
    void (*fn) (pool_Pool*  const  self, void*  const  block, void*  const  user, void * _ctx);
} pool_iterator;
#endif // !defined(ZZ_HAS_DEFINED_CLOSURE_pool_iterator)

#endif
#ifndef ZZ_EXPORT_pool_each
#define ZZ_EXPORT_pool_each
void pool_each (pool_Pool*  const  self, pool_iterator const  it, void*  const  user);

#endif
#ifndef ZZ_EXPORT_carrier_cipher_decrypt_ad
#define ZZ_EXPORT_carrier_cipher_decrypt_ad
uintptr_t carrier_cipher_decrypt_ad (carrier_cipher_CipherState*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const *  const  authtext, uintptr_t const  authtext_len, uint8_t const *  const  ciphertext, uintptr_t const  cipherlen, uint64_t const  nonce, uint8_t*  const  plain, uintptr_t const  plainlen_max);

#endif
#ifndef ZZ_EXPORT_hpack_decoder_decode_integer
#define ZZ_EXPORT_hpack_decoder_decode_integer
extern unsigned int hpack_decoder_decode_integer (hpack_decoder_Iterator*  const  self, err_Err*  const  e, uintptr_t const  et, uint8_t const  prefix_size);

#endif
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
